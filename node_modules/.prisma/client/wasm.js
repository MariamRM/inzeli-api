
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  displayName: 'displayName',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt',
  permanentScore: 'permanentScore',
  creditPoints: 'creditPoints'
};

exports.Prisma.RoomScalarFieldEnum = {
  code: 'code',
  gameId: 'gameId',
  hostUserId: 'hostUserId',
  status: 'status',
  createdAt: 'createdAt',
  targetWinPoints: 'targetWinPoints',
  allowZeroCredit: 'allowZeroCredit',
  timerSec: 'timerSec',
  startedAt: 'startedAt'
};

exports.Prisma.RoomPlayerScalarFieldEnum = {
  roomCode: 'roomCode',
  userId: 'userId',
  joinedAt: 'joinedAt',
  team: 'team',
  isLeader: 'isLeader'
};

exports.Prisma.RoomStakeScalarFieldEnum = {
  roomCode: 'roomCode',
  userId: 'userId',
  amount: 'amount',
  reservedAt: 'reservedAt'
};

exports.Prisma.SponsorScalarFieldEnum = {
  code: 'code',
  name: 'name',
  active: 'active'
};

exports.Prisma.UserSponsorScalarFieldEnum = {
  userId: 'userId',
  sponsorCode: 'sponsorCode',
  activatedAt: 'activatedAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  roomCode: 'roomCode',
  gameId: 'gameId',
  createdAt: 'createdAt'
};

exports.Prisma.MatchParticipantScalarFieldEnum = {
  matchId: 'matchId',
  userId: 'userId',
  outcome: 'outcome'
};

exports.Prisma.TimelineEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roomCode: 'roomCode',
  gameId: 'gameId',
  kind: 'kind',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TeamSide = exports.$Enums.TeamSide = {
  A: 'A',
  B: 'B'
};

exports.Outcome = exports.$Enums.Outcome = {
  WIN: 'WIN',
  LOSS: 'LOSS'
};

exports.Prisma.ModelName = {
  Game: 'Game',
  User: 'User',
  Room: 'Room',
  RoomPlayer: 'RoomPlayer',
  RoomStake: 'RoomStake',
  Sponsor: 'Sponsor',
  UserSponsor: 'UserSponsor',
  Match: 'Match',
  MatchParticipant: 'MatchParticipant',
  TimelineEvent: 'TimelineEvent'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\user\\Documents\\Enzeli\\inzeli-backend\\inzeli-api\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\user\\Documents\\Enzeli\\inzeli-backend\\inzeli-api\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ---------- Prisma / PostgreSQL ----------\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// ---------- Core Catalog ----------\nmodel Game {\n  id            String          @id // e.g., TREX / CHESS / BILLIARD\n  name          String\n  category      String\n  rooms         Room[]\n  matches       Match[]\n  TimelineEvent TimelineEvent[]\n}\n\n// ---------- Users ----------\nmodel User {\n  id           String   @id @default(uuid())\n  email        String   @unique\n  displayName  String\n  passwordHash String\n  createdAt    DateTime @default(now())\n\n  // Scores\n  permanentScore Int @default(0) // leaderboard points (win +1 / loss -1)\n  creditPoints   Int @default(5) // consumable credits (new users start with 5)\n\n  roomsHosted Room[]             @relation(\"RoomsHosted\")\n  roomPlayers RoomPlayer[]\n  sponsors    UserSponsor[]\n  matchParts  MatchParticipant[]\n  timeline    TimelineEvent[]\n  RoomStake   RoomStake[]\n}\n\n// ---------- Rooms / Players / Stakes ----------\nmodel Room {\n  code       String @id\n  gameId     String\n  game       Game   @relation(fields: [gameId], references: [id])\n  hostUserId String\n  host       User   @relation(\"RoomsHosted\", fields: [hostUserId], references: [id])\n\n  status    String   @default(\"waiting\") // waiting | running | ended\n  createdAt DateTime @default(now())\n\n  // Room setup before start\n  targetWinPoints Int?\n  allowZeroCredit Boolean @default(true)\n\n  // Countdown\n  timerSec  Int?\n  startedAt DateTime?\n\n  players       RoomPlayer[]\n  matches       Match[]\n  stakes        RoomStake[]\n  TimelineEvent TimelineEvent[]\n}\n\n// NEW: team enum\nenum TeamSide {\n  A\n  B\n}\n\nmodel RoomPlayer {\n  roomCode String\n  userId   String\n  joinedAt DateTime @default(now())\n\n  // Team meta\n  team     TeamSide? @default(A) // keep nullable if you want, or make non-null\n  isLeader Boolean   @default(false)\n\n  room Room @relation(fields: [roomCode], references: [code], onDelete: Cascade)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([roomCode, userId])\n}\n\nmodel RoomStake {\n  roomCode   String\n  userId     String\n  amount     Int\n  reservedAt DateTime @default(now())\n\n  room Room @relation(fields: [roomCode], references: [code], onDelete: Cascade)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([roomCode, userId])\n}\n\n// ---------- Sponsors ----------\nmodel Sponsor {\n  code   String        @id\n  name   String\n  active Boolean       @default(true)\n  users  UserSponsor[]\n}\n\nmodel UserSponsor {\n  userId      String\n  sponsorCode String\n  activatedAt DateTime @default(now())\n\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  sponsor Sponsor @relation(fields: [sponsorCode], references: [code], onDelete: Cascade)\n\n  @@id([userId, sponsorCode])\n}\n\n// ---------- Matches ----------\nmodel Match {\n  id        String   @id @default(uuid())\n  roomCode  String?\n  gameId    String\n  createdAt DateTime @default(now())\n\n  room  Room?              @relation(fields: [roomCode], references: [code], onDelete: SetNull)\n  game  Game               @relation(fields: [gameId], references: [id])\n  parts MatchParticipant[]\n}\n\nmodel MatchParticipant {\n  matchId String\n  userId  String\n  outcome Outcome\n\n  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)\n  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([matchId, userId])\n}\n\nenum Outcome {\n  WIN\n  LOSS\n}\n\n// ---------- Timeline ----------\nmodel TimelineEvent {\n  id        String   @id @default(uuid())\n  userId    String?\n  roomCode  String?\n  gameId    String?\n  kind      String // e.g., ROOM_CREATED, ROOM_JOINED, STAKE_SET, ROOM_STARTED, MATCH_FINISHED\n  meta      Json?\n  createdAt DateTime @default(now())\n\n  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)\n  room Room? @relation(fields: [roomCode], references: [code], onDelete: SetNull)\n  game Game? @relation(fields: [gameId], references: [id], onDelete: SetNull)\n}\n",
  "inlineSchemaHash": "dab9ba392e0cc7a93b9e9d3560c8d8557222f0aa100bf846b7609814aeef2649",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Game\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rooms\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"GameToRoom\"},{\"name\":\"matches\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"GameToMatch\"},{\"name\":\"TimelineEvent\",\"kind\":\"object\",\"type\":\"TimelineEvent\",\"relationName\":\"GameToTimelineEvent\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"permanentScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"creditPoints\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"roomsHosted\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"RoomsHosted\"},{\"name\":\"roomPlayers\",\"kind\":\"object\",\"type\":\"RoomPlayer\",\"relationName\":\"RoomPlayerToUser\"},{\"name\":\"sponsors\",\"kind\":\"object\",\"type\":\"UserSponsor\",\"relationName\":\"UserToUserSponsor\"},{\"name\":\"matchParts\",\"kind\":\"object\",\"type\":\"MatchParticipant\",\"relationName\":\"MatchParticipantToUser\"},{\"name\":\"timeline\",\"kind\":\"object\",\"type\":\"TimelineEvent\",\"relationName\":\"TimelineEventToUser\"},{\"name\":\"RoomStake\",\"kind\":\"object\",\"type\":\"RoomStake\",\"relationName\":\"RoomStakeToUser\"}],\"dbName\":null},\"Room\":{\"fields\":[{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToRoom\"},{\"name\":\"hostUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"host\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoomsHosted\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"targetWinPoints\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"allowZeroCredit\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"timerSec\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"players\",\"kind\":\"object\",\"type\":\"RoomPlayer\",\"relationName\":\"RoomToRoomPlayer\"},{\"name\":\"matches\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"MatchToRoom\"},{\"name\":\"stakes\",\"kind\":\"object\",\"type\":\"RoomStake\",\"relationName\":\"RoomToRoomStake\"},{\"name\":\"TimelineEvent\",\"kind\":\"object\",\"type\":\"TimelineEvent\",\"relationName\":\"RoomToTimelineEvent\"}],\"dbName\":null},\"RoomPlayer\":{\"fields\":[{\"name\":\"roomCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"team\",\"kind\":\"enum\",\"type\":\"TeamSide\"},{\"name\":\"isLeader\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"RoomToRoomPlayer\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoomPlayerToUser\"}],\"dbName\":null},\"RoomStake\":{\"fields\":[{\"name\":\"roomCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reservedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"RoomToRoomStake\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RoomStakeToUser\"}],\"dbName\":null},\"Sponsor\":{\"fields\":[{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"UserSponsor\",\"relationName\":\"SponsorToUserSponsor\"}],\"dbName\":null},\"UserSponsor\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sponsorCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserSponsor\"},{\"name\":\"sponsor\",\"kind\":\"object\",\"type\":\"Sponsor\",\"relationName\":\"SponsorToUserSponsor\"}],\"dbName\":null},\"Match\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"MatchToRoom\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToMatch\"},{\"name\":\"parts\",\"kind\":\"object\",\"type\":\"MatchParticipant\",\"relationName\":\"MatchToMatchParticipant\"}],\"dbName\":null},\"MatchParticipant\":{\"fields\":[{\"name\":\"matchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"outcome\",\"kind\":\"enum\",\"type\":\"Outcome\"},{\"name\":\"match\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"MatchToMatchParticipant\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MatchParticipantToUser\"}],\"dbName\":null},\"TimelineEvent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"kind\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TimelineEventToUser\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"Room\",\"relationName\":\"RoomToTimelineEvent\"},{\"name\":\"game\",\"kind\":\"object\",\"type\":\"Game\",\"relationName\":\"GameToTimelineEvent\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

