
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model RoomPlayer
 * 
 */
export type RoomPlayer = $Result.DefaultSelection<Prisma.$RoomPlayerPayload>
/**
 * Model RoomStake
 * 
 */
export type RoomStake = $Result.DefaultSelection<Prisma.$RoomStakePayload>
/**
 * Model Sponsor
 * 
 */
export type Sponsor = $Result.DefaultSelection<Prisma.$SponsorPayload>
/**
 * Model UserSponsor
 * 
 */
export type UserSponsor = $Result.DefaultSelection<Prisma.$UserSponsorPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model MatchParticipant
 * 
 */
export type MatchParticipant = $Result.DefaultSelection<Prisma.$MatchParticipantPayload>
/**
 * Model TimelineEvent
 * 
 */
export type TimelineEvent = $Result.DefaultSelection<Prisma.$TimelineEventPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TeamSide: {
  A: 'A',
  B: 'B'
};

export type TeamSide = (typeof TeamSide)[keyof typeof TeamSide]


export const Outcome: {
  WIN: 'WIN',
  LOSS: 'LOSS'
};

export type Outcome = (typeof Outcome)[keyof typeof Outcome]

}

export type TeamSide = $Enums.TeamSide

export const TeamSide: typeof $Enums.TeamSide

export type Outcome = $Enums.Outcome

export const Outcome: typeof $Enums.Outcome

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Games
 * const games = await prisma.game.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Games
   * const games = await prisma.game.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomPlayer`: Exposes CRUD operations for the **RoomPlayer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomPlayers
    * const roomPlayers = await prisma.roomPlayer.findMany()
    * ```
    */
  get roomPlayer(): Prisma.RoomPlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roomStake`: Exposes CRUD operations for the **RoomStake** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomStakes
    * const roomStakes = await prisma.roomStake.findMany()
    * ```
    */
  get roomStake(): Prisma.RoomStakeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sponsor`: Exposes CRUD operations for the **Sponsor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sponsors
    * const sponsors = await prisma.sponsor.findMany()
    * ```
    */
  get sponsor(): Prisma.SponsorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSponsor`: Exposes CRUD operations for the **UserSponsor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSponsors
    * const userSponsors = await prisma.userSponsor.findMany()
    * ```
    */
  get userSponsor(): Prisma.UserSponsorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchParticipant`: Exposes CRUD operations for the **MatchParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchParticipants
    * const matchParticipants = await prisma.matchParticipant.findMany()
    * ```
    */
  get matchParticipant(): Prisma.MatchParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.timelineEvent`: Exposes CRUD operations for the **TimelineEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimelineEvents
    * const timelineEvents = await prisma.timelineEvent.findMany()
    * ```
    */
  get timelineEvent(): Prisma.TimelineEventDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Game: 'Game',
    User: 'User',
    Room: 'Room',
    RoomPlayer: 'RoomPlayer',
    RoomStake: 'RoomStake',
    Sponsor: 'Sponsor',
    UserSponsor: 'UserSponsor',
    Match: 'Match',
    MatchParticipant: 'MatchParticipant',
    TimelineEvent: 'TimelineEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "game" | "user" | "room" | "roomPlayer" | "roomStake" | "sponsor" | "userSponsor" | "match" | "matchParticipant" | "timelineEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      RoomPlayer: {
        payload: Prisma.$RoomPlayerPayload<ExtArgs>
        fields: Prisma.RoomPlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomPlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomPlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>
          }
          findFirst: {
            args: Prisma.RoomPlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomPlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>
          }
          findMany: {
            args: Prisma.RoomPlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>[]
          }
          create: {
            args: Prisma.RoomPlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>
          }
          createMany: {
            args: Prisma.RoomPlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomPlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>[]
          }
          delete: {
            args: Prisma.RoomPlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>
          }
          update: {
            args: Prisma.RoomPlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>
          }
          deleteMany: {
            args: Prisma.RoomPlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomPlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomPlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>[]
          }
          upsert: {
            args: Prisma.RoomPlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPlayerPayload>
          }
          aggregate: {
            args: Prisma.RoomPlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomPlayer>
          }
          groupBy: {
            args: Prisma.RoomPlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomPlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomPlayerCountArgs<ExtArgs>
            result: $Utils.Optional<RoomPlayerCountAggregateOutputType> | number
          }
        }
      }
      RoomStake: {
        payload: Prisma.$RoomStakePayload<ExtArgs>
        fields: Prisma.RoomStakeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomStakeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomStakeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>
          }
          findFirst: {
            args: Prisma.RoomStakeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomStakeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>
          }
          findMany: {
            args: Prisma.RoomStakeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>[]
          }
          create: {
            args: Prisma.RoomStakeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>
          }
          createMany: {
            args: Prisma.RoomStakeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomStakeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>[]
          }
          delete: {
            args: Prisma.RoomStakeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>
          }
          update: {
            args: Prisma.RoomStakeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>
          }
          deleteMany: {
            args: Prisma.RoomStakeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomStakeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomStakeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>[]
          }
          upsert: {
            args: Prisma.RoomStakeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomStakePayload>
          }
          aggregate: {
            args: Prisma.RoomStakeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoomStake>
          }
          groupBy: {
            args: Prisma.RoomStakeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomStakeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomStakeCountArgs<ExtArgs>
            result: $Utils.Optional<RoomStakeCountAggregateOutputType> | number
          }
        }
      }
      Sponsor: {
        payload: Prisma.$SponsorPayload<ExtArgs>
        fields: Prisma.SponsorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SponsorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SponsorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          findFirst: {
            args: Prisma.SponsorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SponsorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          findMany: {
            args: Prisma.SponsorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>[]
          }
          create: {
            args: Prisma.SponsorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          createMany: {
            args: Prisma.SponsorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SponsorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>[]
          }
          delete: {
            args: Prisma.SponsorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          update: {
            args: Prisma.SponsorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          deleteMany: {
            args: Prisma.SponsorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SponsorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SponsorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>[]
          }
          upsert: {
            args: Prisma.SponsorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SponsorPayload>
          }
          aggregate: {
            args: Prisma.SponsorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSponsor>
          }
          groupBy: {
            args: Prisma.SponsorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SponsorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SponsorCountArgs<ExtArgs>
            result: $Utils.Optional<SponsorCountAggregateOutputType> | number
          }
        }
      }
      UserSponsor: {
        payload: Prisma.$UserSponsorPayload<ExtArgs>
        fields: Prisma.UserSponsorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSponsorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSponsorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>
          }
          findFirst: {
            args: Prisma.UserSponsorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSponsorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>
          }
          findMany: {
            args: Prisma.UserSponsorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>[]
          }
          create: {
            args: Prisma.UserSponsorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>
          }
          createMany: {
            args: Prisma.UserSponsorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSponsorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>[]
          }
          delete: {
            args: Prisma.UserSponsorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>
          }
          update: {
            args: Prisma.UserSponsorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>
          }
          deleteMany: {
            args: Prisma.UserSponsorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSponsorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSponsorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>[]
          }
          upsert: {
            args: Prisma.UserSponsorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSponsorPayload>
          }
          aggregate: {
            args: Prisma.UserSponsorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSponsor>
          }
          groupBy: {
            args: Prisma.UserSponsorGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSponsorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSponsorCountArgs<ExtArgs>
            result: $Utils.Optional<UserSponsorCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      MatchParticipant: {
        payload: Prisma.$MatchParticipantPayload<ExtArgs>
        fields: Prisma.MatchParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>
          }
          findFirst: {
            args: Prisma.MatchParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>
          }
          findMany: {
            args: Prisma.MatchParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>[]
          }
          create: {
            args: Prisma.MatchParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>
          }
          createMany: {
            args: Prisma.MatchParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>[]
          }
          delete: {
            args: Prisma.MatchParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>
          }
          update: {
            args: Prisma.MatchParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>
          }
          deleteMany: {
            args: Prisma.MatchParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>[]
          }
          upsert: {
            args: Prisma.MatchParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchParticipantPayload>
          }
          aggregate: {
            args: Prisma.MatchParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchParticipant>
          }
          groupBy: {
            args: Prisma.MatchParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<MatchParticipantCountAggregateOutputType> | number
          }
        }
      }
      TimelineEvent: {
        payload: Prisma.$TimelineEventPayload<ExtArgs>
        fields: Prisma.TimelineEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimelineEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimelineEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>
          }
          findFirst: {
            args: Prisma.TimelineEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimelineEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>
          }
          findMany: {
            args: Prisma.TimelineEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>[]
          }
          create: {
            args: Prisma.TimelineEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>
          }
          createMany: {
            args: Prisma.TimelineEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimelineEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>[]
          }
          delete: {
            args: Prisma.TimelineEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>
          }
          update: {
            args: Prisma.TimelineEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>
          }
          deleteMany: {
            args: Prisma.TimelineEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimelineEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TimelineEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>[]
          }
          upsert: {
            args: Prisma.TimelineEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimelineEventPayload>
          }
          aggregate: {
            args: Prisma.TimelineEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimelineEvent>
          }
          groupBy: {
            args: Prisma.TimelineEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimelineEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimelineEventCountArgs<ExtArgs>
            result: $Utils.Optional<TimelineEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    game?: GameOmit
    user?: UserOmit
    room?: RoomOmit
    roomPlayer?: RoomPlayerOmit
    roomStake?: RoomStakeOmit
    sponsor?: SponsorOmit
    userSponsor?: UserSponsorOmit
    match?: MatchOmit
    matchParticipant?: MatchParticipantOmit
    timelineEvent?: TimelineEventOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    rooms: number
    matches: number
    TimelineEvent: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | GameCountOutputTypeCountRoomsArgs
    matches?: boolean | GameCountOutputTypeCountMatchesArgs
    TimelineEvent?: boolean | GameCountOutputTypeCountTimelineEventArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountTimelineEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineEventWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    roomsHosted: number
    roomPlayers: number
    sponsors: number
    matchParts: number
    timeline: number
    RoomStake: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomsHosted?: boolean | UserCountOutputTypeCountRoomsHostedArgs
    roomPlayers?: boolean | UserCountOutputTypeCountRoomPlayersArgs
    sponsors?: boolean | UserCountOutputTypeCountSponsorsArgs
    matchParts?: boolean | UserCountOutputTypeCountMatchPartsArgs
    timeline?: boolean | UserCountOutputTypeCountTimelineArgs
    RoomStake?: boolean | UserCountOutputTypeCountRoomStakeArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoomsHostedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoomPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomPlayerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSponsorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSponsorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTimelineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoomStakeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomStakeWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    players: number
    matches: number
    stakes: number
    TimelineEvent: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | RoomCountOutputTypeCountPlayersArgs
    matches?: boolean | RoomCountOutputTypeCountMatchesArgs
    stakes?: boolean | RoomCountOutputTypeCountStakesArgs
    TimelineEvent?: boolean | RoomCountOutputTypeCountTimelineEventArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomPlayerWhereInput
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountStakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomStakeWhereInput
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountTimelineEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineEventWhereInput
  }


  /**
   * Count Type SponsorCountOutputType
   */

  export type SponsorCountOutputType = {
    users: number
  }

  export type SponsorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SponsorCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * SponsorCountOutputType without action
   */
  export type SponsorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SponsorCountOutputType
     */
    select?: SponsorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SponsorCountOutputType without action
   */
  export type SponsorCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSponsorWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    parts: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parts?: boolean | MatchCountOutputTypeCountPartsArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchParticipantWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    category: number
    _all: number
  }


  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: string
    name: string
    category: string
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    rooms?: boolean | Game$roomsArgs<ExtArgs>
    matches?: boolean | Game$matchesArgs<ExtArgs>
    TimelineEvent?: boolean | Game$TimelineEventArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rooms?: boolean | Game$roomsArgs<ExtArgs>
    matches?: boolean | Game$matchesArgs<ExtArgs>
    TimelineEvent?: boolean | Game$TimelineEventArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      rooms: Prisma.$RoomPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
      TimelineEvent: Prisma.$TimelineEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rooms<T extends Game$roomsArgs<ExtArgs> = {}>(args?: Subset<T, Game$roomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Game$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Game$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TimelineEvent<T extends Game$TimelineEventArgs<ExtArgs> = {}>(args?: Subset<T, Game$TimelineEventArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'String'>
    readonly name: FieldRef<"Game", 'String'>
    readonly category: FieldRef<"Game", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.rooms
   */
  export type Game$roomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Game.matches
   */
  export type Game$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Game.TimelineEvent
   */
  export type Game$TimelineEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    where?: TimelineEventWhereInput
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    cursor?: TimelineEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimelineEventScalarFieldEnum | TimelineEventScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    permanentScore: number | null
    creditPoints: number | null
  }

  export type UserSumAggregateOutputType = {
    permanentScore: number | null
    creditPoints: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    displayName: string | null
    passwordHash: string | null
    createdAt: Date | null
    permanentScore: number | null
    creditPoints: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    displayName: string | null
    passwordHash: string | null
    createdAt: Date | null
    permanentScore: number | null
    creditPoints: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    displayName: number
    passwordHash: number
    createdAt: number
    permanentScore: number
    creditPoints: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    permanentScore?: true
    creditPoints?: true
  }

  export type UserSumAggregateInputType = {
    permanentScore?: true
    creditPoints?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    displayName?: true
    passwordHash?: true
    createdAt?: true
    permanentScore?: true
    creditPoints?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    displayName?: true
    passwordHash?: true
    createdAt?: true
    permanentScore?: true
    creditPoints?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    displayName?: true
    passwordHash?: true
    createdAt?: true
    permanentScore?: true
    creditPoints?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    displayName: string
    passwordHash: string
    createdAt: Date
    permanentScore: number
    creditPoints: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    displayName?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    permanentScore?: boolean
    creditPoints?: boolean
    roomsHosted?: boolean | User$roomsHostedArgs<ExtArgs>
    roomPlayers?: boolean | User$roomPlayersArgs<ExtArgs>
    sponsors?: boolean | User$sponsorsArgs<ExtArgs>
    matchParts?: boolean | User$matchPartsArgs<ExtArgs>
    timeline?: boolean | User$timelineArgs<ExtArgs>
    RoomStake?: boolean | User$RoomStakeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    displayName?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    permanentScore?: boolean
    creditPoints?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    displayName?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    permanentScore?: boolean
    creditPoints?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    displayName?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    permanentScore?: boolean
    creditPoints?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "displayName" | "passwordHash" | "createdAt" | "permanentScore" | "creditPoints", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roomsHosted?: boolean | User$roomsHostedArgs<ExtArgs>
    roomPlayers?: boolean | User$roomPlayersArgs<ExtArgs>
    sponsors?: boolean | User$sponsorsArgs<ExtArgs>
    matchParts?: boolean | User$matchPartsArgs<ExtArgs>
    timeline?: boolean | User$timelineArgs<ExtArgs>
    RoomStake?: boolean | User$RoomStakeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      roomsHosted: Prisma.$RoomPayload<ExtArgs>[]
      roomPlayers: Prisma.$RoomPlayerPayload<ExtArgs>[]
      sponsors: Prisma.$UserSponsorPayload<ExtArgs>[]
      matchParts: Prisma.$MatchParticipantPayload<ExtArgs>[]
      timeline: Prisma.$TimelineEventPayload<ExtArgs>[]
      RoomStake: Prisma.$RoomStakePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      displayName: string
      passwordHash: string
      createdAt: Date
      permanentScore: number
      creditPoints: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roomsHosted<T extends User$roomsHostedArgs<ExtArgs> = {}>(args?: Subset<T, User$roomsHostedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roomPlayers<T extends User$roomPlayersArgs<ExtArgs> = {}>(args?: Subset<T, User$roomPlayersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sponsors<T extends User$sponsorsArgs<ExtArgs> = {}>(args?: Subset<T, User$sponsorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchParts<T extends User$matchPartsArgs<ExtArgs> = {}>(args?: Subset<T, User$matchPartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    timeline<T extends User$timelineArgs<ExtArgs> = {}>(args?: Subset<T, User$timelineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    RoomStake<T extends User$RoomStakeArgs<ExtArgs> = {}>(args?: Subset<T, User$RoomStakeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly displayName: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly permanentScore: FieldRef<"User", 'Int'>
    readonly creditPoints: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.roomsHosted
   */
  export type User$roomsHostedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * User.roomPlayers
   */
  export type User$roomPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    where?: RoomPlayerWhereInput
    orderBy?: RoomPlayerOrderByWithRelationInput | RoomPlayerOrderByWithRelationInput[]
    cursor?: RoomPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomPlayerScalarFieldEnum | RoomPlayerScalarFieldEnum[]
  }

  /**
   * User.sponsors
   */
  export type User$sponsorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    where?: UserSponsorWhereInput
    orderBy?: UserSponsorOrderByWithRelationInput | UserSponsorOrderByWithRelationInput[]
    cursor?: UserSponsorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSponsorScalarFieldEnum | UserSponsorScalarFieldEnum[]
  }

  /**
   * User.matchParts
   */
  export type User$matchPartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    where?: MatchParticipantWhereInput
    orderBy?: MatchParticipantOrderByWithRelationInput | MatchParticipantOrderByWithRelationInput[]
    cursor?: MatchParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchParticipantScalarFieldEnum | MatchParticipantScalarFieldEnum[]
  }

  /**
   * User.timeline
   */
  export type User$timelineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    where?: TimelineEventWhereInput
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    cursor?: TimelineEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimelineEventScalarFieldEnum | TimelineEventScalarFieldEnum[]
  }

  /**
   * User.RoomStake
   */
  export type User$RoomStakeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    where?: RoomStakeWhereInput
    orderBy?: RoomStakeOrderByWithRelationInput | RoomStakeOrderByWithRelationInput[]
    cursor?: RoomStakeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomStakeScalarFieldEnum | RoomStakeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    targetWinPoints: number | null
    timerSec: number | null
  }

  export type RoomSumAggregateOutputType = {
    targetWinPoints: number | null
    timerSec: number | null
  }

  export type RoomMinAggregateOutputType = {
    code: string | null
    gameId: string | null
    hostUserId: string | null
    status: string | null
    createdAt: Date | null
    targetWinPoints: number | null
    allowZeroCredit: boolean | null
    timerSec: number | null
    startedAt: Date | null
  }

  export type RoomMaxAggregateOutputType = {
    code: string | null
    gameId: string | null
    hostUserId: string | null
    status: string | null
    createdAt: Date | null
    targetWinPoints: number | null
    allowZeroCredit: boolean | null
    timerSec: number | null
    startedAt: Date | null
  }

  export type RoomCountAggregateOutputType = {
    code: number
    gameId: number
    hostUserId: number
    status: number
    createdAt: number
    targetWinPoints: number
    allowZeroCredit: number
    timerSec: number
    startedAt: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    targetWinPoints?: true
    timerSec?: true
  }

  export type RoomSumAggregateInputType = {
    targetWinPoints?: true
    timerSec?: true
  }

  export type RoomMinAggregateInputType = {
    code?: true
    gameId?: true
    hostUserId?: true
    status?: true
    createdAt?: true
    targetWinPoints?: true
    allowZeroCredit?: true
    timerSec?: true
    startedAt?: true
  }

  export type RoomMaxAggregateInputType = {
    code?: true
    gameId?: true
    hostUserId?: true
    status?: true
    createdAt?: true
    targetWinPoints?: true
    allowZeroCredit?: true
    timerSec?: true
    startedAt?: true
  }

  export type RoomCountAggregateInputType = {
    code?: true
    gameId?: true
    hostUserId?: true
    status?: true
    createdAt?: true
    targetWinPoints?: true
    allowZeroCredit?: true
    timerSec?: true
    startedAt?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    code: string
    gameId: string
    hostUserId: string
    status: string
    createdAt: Date
    targetWinPoints: number | null
    allowZeroCredit: boolean
    timerSec: number | null
    startedAt: Date | null
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    gameId?: boolean
    hostUserId?: boolean
    status?: boolean
    createdAt?: boolean
    targetWinPoints?: boolean
    allowZeroCredit?: boolean
    timerSec?: boolean
    startedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Room$playersArgs<ExtArgs>
    matches?: boolean | Room$matchesArgs<ExtArgs>
    stakes?: boolean | Room$stakesArgs<ExtArgs>
    TimelineEvent?: boolean | Room$TimelineEventArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    gameId?: boolean
    hostUserId?: boolean
    status?: boolean
    createdAt?: boolean
    targetWinPoints?: boolean
    allowZeroCredit?: boolean
    timerSec?: boolean
    startedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    gameId?: boolean
    hostUserId?: boolean
    status?: boolean
    createdAt?: boolean
    targetWinPoints?: boolean
    allowZeroCredit?: boolean
    timerSec?: boolean
    startedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    code?: boolean
    gameId?: boolean
    hostUserId?: boolean
    status?: boolean
    createdAt?: boolean
    targetWinPoints?: boolean
    allowZeroCredit?: boolean
    timerSec?: boolean
    startedAt?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "gameId" | "hostUserId" | "status" | "createdAt" | "targetWinPoints" | "allowZeroCredit" | "timerSec" | "startedAt", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
    players?: boolean | Room$playersArgs<ExtArgs>
    matches?: boolean | Room$matchesArgs<ExtArgs>
    stakes?: boolean | Room$stakesArgs<ExtArgs>
    TimelineEvent?: boolean | Room$TimelineEventArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    host?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      host: Prisma.$UserPayload<ExtArgs>
      players: Prisma.$RoomPlayerPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
      stakes: Prisma.$RoomStakePayload<ExtArgs>[]
      TimelineEvent: Prisma.$TimelineEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      gameId: string
      hostUserId: string
      status: string
      createdAt: Date
      targetWinPoints: number | null
      allowZeroCredit: boolean
      timerSec: number | null
      startedAt: Date | null
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const roomWithCodeOnly = await prisma.room.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `code`
     * const roomWithCodeOnly = await prisma.room.createManyAndReturn({
     *   select: { code: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `code`
     * const roomWithCodeOnly = await prisma.room.updateManyAndReturn({
     *   select: { code: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    host<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    players<T extends Room$playersArgs<ExtArgs> = {}>(args?: Subset<T, Room$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends Room$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Room$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stakes<T extends Room$stakesArgs<ExtArgs> = {}>(args?: Subset<T, Room$stakesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TimelineEvent<T extends Room$TimelineEventArgs<ExtArgs> = {}>(args?: Subset<T, Room$TimelineEventArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly code: FieldRef<"Room", 'String'>
    readonly gameId: FieldRef<"Room", 'String'>
    readonly hostUserId: FieldRef<"Room", 'String'>
    readonly status: FieldRef<"Room", 'String'>
    readonly createdAt: FieldRef<"Room", 'DateTime'>
    readonly targetWinPoints: FieldRef<"Room", 'Int'>
    readonly allowZeroCredit: FieldRef<"Room", 'Boolean'>
    readonly timerSec: FieldRef<"Room", 'Int'>
    readonly startedAt: FieldRef<"Room", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room.players
   */
  export type Room$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    where?: RoomPlayerWhereInput
    orderBy?: RoomPlayerOrderByWithRelationInput | RoomPlayerOrderByWithRelationInput[]
    cursor?: RoomPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomPlayerScalarFieldEnum | RoomPlayerScalarFieldEnum[]
  }

  /**
   * Room.matches
   */
  export type Room$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Room.stakes
   */
  export type Room$stakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    where?: RoomStakeWhereInput
    orderBy?: RoomStakeOrderByWithRelationInput | RoomStakeOrderByWithRelationInput[]
    cursor?: RoomStakeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomStakeScalarFieldEnum | RoomStakeScalarFieldEnum[]
  }

  /**
   * Room.TimelineEvent
   */
  export type Room$TimelineEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    where?: TimelineEventWhereInput
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    cursor?: TimelineEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TimelineEventScalarFieldEnum | TimelineEventScalarFieldEnum[]
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model RoomPlayer
   */

  export type AggregateRoomPlayer = {
    _count: RoomPlayerCountAggregateOutputType | null
    _min: RoomPlayerMinAggregateOutputType | null
    _max: RoomPlayerMaxAggregateOutputType | null
  }

  export type RoomPlayerMinAggregateOutputType = {
    roomCode: string | null
    userId: string | null
    joinedAt: Date | null
    team: $Enums.TeamSide | null
    isLeader: boolean | null
  }

  export type RoomPlayerMaxAggregateOutputType = {
    roomCode: string | null
    userId: string | null
    joinedAt: Date | null
    team: $Enums.TeamSide | null
    isLeader: boolean | null
  }

  export type RoomPlayerCountAggregateOutputType = {
    roomCode: number
    userId: number
    joinedAt: number
    team: number
    isLeader: number
    _all: number
  }


  export type RoomPlayerMinAggregateInputType = {
    roomCode?: true
    userId?: true
    joinedAt?: true
    team?: true
    isLeader?: true
  }

  export type RoomPlayerMaxAggregateInputType = {
    roomCode?: true
    userId?: true
    joinedAt?: true
    team?: true
    isLeader?: true
  }

  export type RoomPlayerCountAggregateInputType = {
    roomCode?: true
    userId?: true
    joinedAt?: true
    team?: true
    isLeader?: true
    _all?: true
  }

  export type RoomPlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomPlayer to aggregate.
     */
    where?: RoomPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomPlayers to fetch.
     */
    orderBy?: RoomPlayerOrderByWithRelationInput | RoomPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomPlayers
    **/
    _count?: true | RoomPlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomPlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomPlayerMaxAggregateInputType
  }

  export type GetRoomPlayerAggregateType<T extends RoomPlayerAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomPlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomPlayer[P]>
      : GetScalarType<T[P], AggregateRoomPlayer[P]>
  }




  export type RoomPlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomPlayerWhereInput
    orderBy?: RoomPlayerOrderByWithAggregationInput | RoomPlayerOrderByWithAggregationInput[]
    by: RoomPlayerScalarFieldEnum[] | RoomPlayerScalarFieldEnum
    having?: RoomPlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomPlayerCountAggregateInputType | true
    _min?: RoomPlayerMinAggregateInputType
    _max?: RoomPlayerMaxAggregateInputType
  }

  export type RoomPlayerGroupByOutputType = {
    roomCode: string
    userId: string
    joinedAt: Date
    team: $Enums.TeamSide | null
    isLeader: boolean
    _count: RoomPlayerCountAggregateOutputType | null
    _min: RoomPlayerMinAggregateOutputType | null
    _max: RoomPlayerMaxAggregateOutputType | null
  }

  type GetRoomPlayerGroupByPayload<T extends RoomPlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomPlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomPlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomPlayerGroupByOutputType[P]>
            : GetScalarType<T[P], RoomPlayerGroupByOutputType[P]>
        }
      >
    >


  export type RoomPlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomCode?: boolean
    userId?: boolean
    joinedAt?: boolean
    team?: boolean
    isLeader?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomPlayer"]>

  export type RoomPlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomCode?: boolean
    userId?: boolean
    joinedAt?: boolean
    team?: boolean
    isLeader?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomPlayer"]>

  export type RoomPlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomCode?: boolean
    userId?: boolean
    joinedAt?: boolean
    team?: boolean
    isLeader?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomPlayer"]>

  export type RoomPlayerSelectScalar = {
    roomCode?: boolean
    userId?: boolean
    joinedAt?: boolean
    team?: boolean
    isLeader?: boolean
  }

  export type RoomPlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roomCode" | "userId" | "joinedAt" | "team" | "isLeader", ExtArgs["result"]["roomPlayer"]>
  export type RoomPlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RoomPlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RoomPlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RoomPlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomPlayer"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roomCode: string
      userId: string
      joinedAt: Date
      team: $Enums.TeamSide | null
      isLeader: boolean
    }, ExtArgs["result"]["roomPlayer"]>
    composites: {}
  }

  type RoomPlayerGetPayload<S extends boolean | null | undefined | RoomPlayerDefaultArgs> = $Result.GetResult<Prisma.$RoomPlayerPayload, S>

  type RoomPlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomPlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomPlayerCountAggregateInputType | true
    }

  export interface RoomPlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomPlayer'], meta: { name: 'RoomPlayer' } }
    /**
     * Find zero or one RoomPlayer that matches the filter.
     * @param {RoomPlayerFindUniqueArgs} args - Arguments to find a RoomPlayer
     * @example
     * // Get one RoomPlayer
     * const roomPlayer = await prisma.roomPlayer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomPlayerFindUniqueArgs>(args: SelectSubset<T, RoomPlayerFindUniqueArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomPlayer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomPlayerFindUniqueOrThrowArgs} args - Arguments to find a RoomPlayer
     * @example
     * // Get one RoomPlayer
     * const roomPlayer = await prisma.roomPlayer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomPlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomPlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomPlayer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerFindFirstArgs} args - Arguments to find a RoomPlayer
     * @example
     * // Get one RoomPlayer
     * const roomPlayer = await prisma.roomPlayer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomPlayerFindFirstArgs>(args?: SelectSubset<T, RoomPlayerFindFirstArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomPlayer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerFindFirstOrThrowArgs} args - Arguments to find a RoomPlayer
     * @example
     * // Get one RoomPlayer
     * const roomPlayer = await prisma.roomPlayer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomPlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomPlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomPlayers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomPlayers
     * const roomPlayers = await prisma.roomPlayer.findMany()
     * 
     * // Get first 10 RoomPlayers
     * const roomPlayers = await prisma.roomPlayer.findMany({ take: 10 })
     * 
     * // Only select the `roomCode`
     * const roomPlayerWithRoomCodeOnly = await prisma.roomPlayer.findMany({ select: { roomCode: true } })
     * 
     */
    findMany<T extends RoomPlayerFindManyArgs>(args?: SelectSubset<T, RoomPlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomPlayer.
     * @param {RoomPlayerCreateArgs} args - Arguments to create a RoomPlayer.
     * @example
     * // Create one RoomPlayer
     * const RoomPlayer = await prisma.roomPlayer.create({
     *   data: {
     *     // ... data to create a RoomPlayer
     *   }
     * })
     * 
     */
    create<T extends RoomPlayerCreateArgs>(args: SelectSubset<T, RoomPlayerCreateArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomPlayers.
     * @param {RoomPlayerCreateManyArgs} args - Arguments to create many RoomPlayers.
     * @example
     * // Create many RoomPlayers
     * const roomPlayer = await prisma.roomPlayer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomPlayerCreateManyArgs>(args?: SelectSubset<T, RoomPlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomPlayers and returns the data saved in the database.
     * @param {RoomPlayerCreateManyAndReturnArgs} args - Arguments to create many RoomPlayers.
     * @example
     * // Create many RoomPlayers
     * const roomPlayer = await prisma.roomPlayer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomPlayers and only return the `roomCode`
     * const roomPlayerWithRoomCodeOnly = await prisma.roomPlayer.createManyAndReturn({
     *   select: { roomCode: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomPlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomPlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomPlayer.
     * @param {RoomPlayerDeleteArgs} args - Arguments to delete one RoomPlayer.
     * @example
     * // Delete one RoomPlayer
     * const RoomPlayer = await prisma.roomPlayer.delete({
     *   where: {
     *     // ... filter to delete one RoomPlayer
     *   }
     * })
     * 
     */
    delete<T extends RoomPlayerDeleteArgs>(args: SelectSubset<T, RoomPlayerDeleteArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomPlayer.
     * @param {RoomPlayerUpdateArgs} args - Arguments to update one RoomPlayer.
     * @example
     * // Update one RoomPlayer
     * const roomPlayer = await prisma.roomPlayer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomPlayerUpdateArgs>(args: SelectSubset<T, RoomPlayerUpdateArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomPlayers.
     * @param {RoomPlayerDeleteManyArgs} args - Arguments to filter RoomPlayers to delete.
     * @example
     * // Delete a few RoomPlayers
     * const { count } = await prisma.roomPlayer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomPlayerDeleteManyArgs>(args?: SelectSubset<T, RoomPlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomPlayers
     * const roomPlayer = await prisma.roomPlayer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomPlayerUpdateManyArgs>(args: SelectSubset<T, RoomPlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomPlayers and returns the data updated in the database.
     * @param {RoomPlayerUpdateManyAndReturnArgs} args - Arguments to update many RoomPlayers.
     * @example
     * // Update many RoomPlayers
     * const roomPlayer = await prisma.roomPlayer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomPlayers and only return the `roomCode`
     * const roomPlayerWithRoomCodeOnly = await prisma.roomPlayer.updateManyAndReturn({
     *   select: { roomCode: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomPlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomPlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomPlayer.
     * @param {RoomPlayerUpsertArgs} args - Arguments to update or create a RoomPlayer.
     * @example
     * // Update or create a RoomPlayer
     * const roomPlayer = await prisma.roomPlayer.upsert({
     *   create: {
     *     // ... data to create a RoomPlayer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomPlayer we want to update
     *   }
     * })
     */
    upsert<T extends RoomPlayerUpsertArgs>(args: SelectSubset<T, RoomPlayerUpsertArgs<ExtArgs>>): Prisma__RoomPlayerClient<$Result.GetResult<Prisma.$RoomPlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerCountArgs} args - Arguments to filter RoomPlayers to count.
     * @example
     * // Count the number of RoomPlayers
     * const count = await prisma.roomPlayer.count({
     *   where: {
     *     // ... the filter for the RoomPlayers we want to count
     *   }
     * })
    **/
    count<T extends RoomPlayerCountArgs>(
      args?: Subset<T, RoomPlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomPlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomPlayerAggregateArgs>(args: Subset<T, RoomPlayerAggregateArgs>): Prisma.PrismaPromise<GetRoomPlayerAggregateType<T>>

    /**
     * Group by RoomPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomPlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomPlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomPlayerGroupByArgs['orderBy'] }
        : { orderBy?: RoomPlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomPlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomPlayer model
   */
  readonly fields: RoomPlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomPlayer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomPlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomPlayer model
   */
  interface RoomPlayerFieldRefs {
    readonly roomCode: FieldRef<"RoomPlayer", 'String'>
    readonly userId: FieldRef<"RoomPlayer", 'String'>
    readonly joinedAt: FieldRef<"RoomPlayer", 'DateTime'>
    readonly team: FieldRef<"RoomPlayer", 'TeamSide'>
    readonly isLeader: FieldRef<"RoomPlayer", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RoomPlayer findUnique
   */
  export type RoomPlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * Filter, which RoomPlayer to fetch.
     */
    where: RoomPlayerWhereUniqueInput
  }

  /**
   * RoomPlayer findUniqueOrThrow
   */
  export type RoomPlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * Filter, which RoomPlayer to fetch.
     */
    where: RoomPlayerWhereUniqueInput
  }

  /**
   * RoomPlayer findFirst
   */
  export type RoomPlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * Filter, which RoomPlayer to fetch.
     */
    where?: RoomPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomPlayers to fetch.
     */
    orderBy?: RoomPlayerOrderByWithRelationInput | RoomPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomPlayers.
     */
    cursor?: RoomPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomPlayers.
     */
    distinct?: RoomPlayerScalarFieldEnum | RoomPlayerScalarFieldEnum[]
  }

  /**
   * RoomPlayer findFirstOrThrow
   */
  export type RoomPlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * Filter, which RoomPlayer to fetch.
     */
    where?: RoomPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomPlayers to fetch.
     */
    orderBy?: RoomPlayerOrderByWithRelationInput | RoomPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomPlayers.
     */
    cursor?: RoomPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomPlayers.
     */
    distinct?: RoomPlayerScalarFieldEnum | RoomPlayerScalarFieldEnum[]
  }

  /**
   * RoomPlayer findMany
   */
  export type RoomPlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * Filter, which RoomPlayers to fetch.
     */
    where?: RoomPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomPlayers to fetch.
     */
    orderBy?: RoomPlayerOrderByWithRelationInput | RoomPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomPlayers.
     */
    cursor?: RoomPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomPlayers.
     */
    skip?: number
    distinct?: RoomPlayerScalarFieldEnum | RoomPlayerScalarFieldEnum[]
  }

  /**
   * RoomPlayer create
   */
  export type RoomPlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomPlayer.
     */
    data: XOR<RoomPlayerCreateInput, RoomPlayerUncheckedCreateInput>
  }

  /**
   * RoomPlayer createMany
   */
  export type RoomPlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomPlayers.
     */
    data: RoomPlayerCreateManyInput | RoomPlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomPlayer createManyAndReturn
   */
  export type RoomPlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * The data used to create many RoomPlayers.
     */
    data: RoomPlayerCreateManyInput | RoomPlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomPlayer update
   */
  export type RoomPlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomPlayer.
     */
    data: XOR<RoomPlayerUpdateInput, RoomPlayerUncheckedUpdateInput>
    /**
     * Choose, which RoomPlayer to update.
     */
    where: RoomPlayerWhereUniqueInput
  }

  /**
   * RoomPlayer updateMany
   */
  export type RoomPlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomPlayers.
     */
    data: XOR<RoomPlayerUpdateManyMutationInput, RoomPlayerUncheckedUpdateManyInput>
    /**
     * Filter which RoomPlayers to update
     */
    where?: RoomPlayerWhereInput
    /**
     * Limit how many RoomPlayers to update.
     */
    limit?: number
  }

  /**
   * RoomPlayer updateManyAndReturn
   */
  export type RoomPlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * The data used to update RoomPlayers.
     */
    data: XOR<RoomPlayerUpdateManyMutationInput, RoomPlayerUncheckedUpdateManyInput>
    /**
     * Filter which RoomPlayers to update
     */
    where?: RoomPlayerWhereInput
    /**
     * Limit how many RoomPlayers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomPlayer upsert
   */
  export type RoomPlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomPlayer to update in case it exists.
     */
    where: RoomPlayerWhereUniqueInput
    /**
     * In case the RoomPlayer found by the `where` argument doesn't exist, create a new RoomPlayer with this data.
     */
    create: XOR<RoomPlayerCreateInput, RoomPlayerUncheckedCreateInput>
    /**
     * In case the RoomPlayer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomPlayerUpdateInput, RoomPlayerUncheckedUpdateInput>
  }

  /**
   * RoomPlayer delete
   */
  export type RoomPlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
    /**
     * Filter which RoomPlayer to delete.
     */
    where: RoomPlayerWhereUniqueInput
  }

  /**
   * RoomPlayer deleteMany
   */
  export type RoomPlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomPlayers to delete
     */
    where?: RoomPlayerWhereInput
    /**
     * Limit how many RoomPlayers to delete.
     */
    limit?: number
  }

  /**
   * RoomPlayer without action
   */
  export type RoomPlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomPlayer
     */
    select?: RoomPlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomPlayer
     */
    omit?: RoomPlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomPlayerInclude<ExtArgs> | null
  }


  /**
   * Model RoomStake
   */

  export type AggregateRoomStake = {
    _count: RoomStakeCountAggregateOutputType | null
    _avg: RoomStakeAvgAggregateOutputType | null
    _sum: RoomStakeSumAggregateOutputType | null
    _min: RoomStakeMinAggregateOutputType | null
    _max: RoomStakeMaxAggregateOutputType | null
  }

  export type RoomStakeAvgAggregateOutputType = {
    amount: number | null
  }

  export type RoomStakeSumAggregateOutputType = {
    amount: number | null
  }

  export type RoomStakeMinAggregateOutputType = {
    roomCode: string | null
    userId: string | null
    amount: number | null
    reservedAt: Date | null
  }

  export type RoomStakeMaxAggregateOutputType = {
    roomCode: string | null
    userId: string | null
    amount: number | null
    reservedAt: Date | null
  }

  export type RoomStakeCountAggregateOutputType = {
    roomCode: number
    userId: number
    amount: number
    reservedAt: number
    _all: number
  }


  export type RoomStakeAvgAggregateInputType = {
    amount?: true
  }

  export type RoomStakeSumAggregateInputType = {
    amount?: true
  }

  export type RoomStakeMinAggregateInputType = {
    roomCode?: true
    userId?: true
    amount?: true
    reservedAt?: true
  }

  export type RoomStakeMaxAggregateInputType = {
    roomCode?: true
    userId?: true
    amount?: true
    reservedAt?: true
  }

  export type RoomStakeCountAggregateInputType = {
    roomCode?: true
    userId?: true
    amount?: true
    reservedAt?: true
    _all?: true
  }

  export type RoomStakeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomStake to aggregate.
     */
    where?: RoomStakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStakes to fetch.
     */
    orderBy?: RoomStakeOrderByWithRelationInput | RoomStakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomStakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomStakes
    **/
    _count?: true | RoomStakeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomStakeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomStakeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomStakeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomStakeMaxAggregateInputType
  }

  export type GetRoomStakeAggregateType<T extends RoomStakeAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomStake]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomStake[P]>
      : GetScalarType<T[P], AggregateRoomStake[P]>
  }




  export type RoomStakeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomStakeWhereInput
    orderBy?: RoomStakeOrderByWithAggregationInput | RoomStakeOrderByWithAggregationInput[]
    by: RoomStakeScalarFieldEnum[] | RoomStakeScalarFieldEnum
    having?: RoomStakeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomStakeCountAggregateInputType | true
    _avg?: RoomStakeAvgAggregateInputType
    _sum?: RoomStakeSumAggregateInputType
    _min?: RoomStakeMinAggregateInputType
    _max?: RoomStakeMaxAggregateInputType
  }

  export type RoomStakeGroupByOutputType = {
    roomCode: string
    userId: string
    amount: number
    reservedAt: Date
    _count: RoomStakeCountAggregateOutputType | null
    _avg: RoomStakeAvgAggregateOutputType | null
    _sum: RoomStakeSumAggregateOutputType | null
    _min: RoomStakeMinAggregateOutputType | null
    _max: RoomStakeMaxAggregateOutputType | null
  }

  type GetRoomStakeGroupByPayload<T extends RoomStakeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomStakeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomStakeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomStakeGroupByOutputType[P]>
            : GetScalarType<T[P], RoomStakeGroupByOutputType[P]>
        }
      >
    >


  export type RoomStakeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomCode?: boolean
    userId?: boolean
    amount?: boolean
    reservedAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomStake"]>

  export type RoomStakeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomCode?: boolean
    userId?: boolean
    amount?: boolean
    reservedAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomStake"]>

  export type RoomStakeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomCode?: boolean
    userId?: boolean
    amount?: boolean
    reservedAt?: boolean
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roomStake"]>

  export type RoomStakeSelectScalar = {
    roomCode?: boolean
    userId?: boolean
    amount?: boolean
    reservedAt?: boolean
  }

  export type RoomStakeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roomCode" | "userId" | "amount" | "reservedAt", ExtArgs["result"]["roomStake"]>
  export type RoomStakeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RoomStakeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RoomStakeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | RoomDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RoomStakePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoomStake"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roomCode: string
      userId: string
      amount: number
      reservedAt: Date
    }, ExtArgs["result"]["roomStake"]>
    composites: {}
  }

  type RoomStakeGetPayload<S extends boolean | null | undefined | RoomStakeDefaultArgs> = $Result.GetResult<Prisma.$RoomStakePayload, S>

  type RoomStakeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomStakeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomStakeCountAggregateInputType | true
    }

  export interface RoomStakeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoomStake'], meta: { name: 'RoomStake' } }
    /**
     * Find zero or one RoomStake that matches the filter.
     * @param {RoomStakeFindUniqueArgs} args - Arguments to find a RoomStake
     * @example
     * // Get one RoomStake
     * const roomStake = await prisma.roomStake.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomStakeFindUniqueArgs>(args: SelectSubset<T, RoomStakeFindUniqueArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RoomStake that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomStakeFindUniqueOrThrowArgs} args - Arguments to find a RoomStake
     * @example
     * // Get one RoomStake
     * const roomStake = await prisma.roomStake.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomStakeFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomStakeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomStake that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeFindFirstArgs} args - Arguments to find a RoomStake
     * @example
     * // Get one RoomStake
     * const roomStake = await prisma.roomStake.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomStakeFindFirstArgs>(args?: SelectSubset<T, RoomStakeFindFirstArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RoomStake that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeFindFirstOrThrowArgs} args - Arguments to find a RoomStake
     * @example
     * // Get one RoomStake
     * const roomStake = await prisma.roomStake.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomStakeFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomStakeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RoomStakes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomStakes
     * const roomStakes = await prisma.roomStake.findMany()
     * 
     * // Get first 10 RoomStakes
     * const roomStakes = await prisma.roomStake.findMany({ take: 10 })
     * 
     * // Only select the `roomCode`
     * const roomStakeWithRoomCodeOnly = await prisma.roomStake.findMany({ select: { roomCode: true } })
     * 
     */
    findMany<T extends RoomStakeFindManyArgs>(args?: SelectSubset<T, RoomStakeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RoomStake.
     * @param {RoomStakeCreateArgs} args - Arguments to create a RoomStake.
     * @example
     * // Create one RoomStake
     * const RoomStake = await prisma.roomStake.create({
     *   data: {
     *     // ... data to create a RoomStake
     *   }
     * })
     * 
     */
    create<T extends RoomStakeCreateArgs>(args: SelectSubset<T, RoomStakeCreateArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RoomStakes.
     * @param {RoomStakeCreateManyArgs} args - Arguments to create many RoomStakes.
     * @example
     * // Create many RoomStakes
     * const roomStake = await prisma.roomStake.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomStakeCreateManyArgs>(args?: SelectSubset<T, RoomStakeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoomStakes and returns the data saved in the database.
     * @param {RoomStakeCreateManyAndReturnArgs} args - Arguments to create many RoomStakes.
     * @example
     * // Create many RoomStakes
     * const roomStake = await prisma.roomStake.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoomStakes and only return the `roomCode`
     * const roomStakeWithRoomCodeOnly = await prisma.roomStake.createManyAndReturn({
     *   select: { roomCode: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomStakeCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomStakeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RoomStake.
     * @param {RoomStakeDeleteArgs} args - Arguments to delete one RoomStake.
     * @example
     * // Delete one RoomStake
     * const RoomStake = await prisma.roomStake.delete({
     *   where: {
     *     // ... filter to delete one RoomStake
     *   }
     * })
     * 
     */
    delete<T extends RoomStakeDeleteArgs>(args: SelectSubset<T, RoomStakeDeleteArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RoomStake.
     * @param {RoomStakeUpdateArgs} args - Arguments to update one RoomStake.
     * @example
     * // Update one RoomStake
     * const roomStake = await prisma.roomStake.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomStakeUpdateArgs>(args: SelectSubset<T, RoomStakeUpdateArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RoomStakes.
     * @param {RoomStakeDeleteManyArgs} args - Arguments to filter RoomStakes to delete.
     * @example
     * // Delete a few RoomStakes
     * const { count } = await prisma.roomStake.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomStakeDeleteManyArgs>(args?: SelectSubset<T, RoomStakeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomStakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomStakes
     * const roomStake = await prisma.roomStake.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomStakeUpdateManyArgs>(args: SelectSubset<T, RoomStakeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomStakes and returns the data updated in the database.
     * @param {RoomStakeUpdateManyAndReturnArgs} args - Arguments to update many RoomStakes.
     * @example
     * // Update many RoomStakes
     * const roomStake = await prisma.roomStake.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RoomStakes and only return the `roomCode`
     * const roomStakeWithRoomCodeOnly = await prisma.roomStake.updateManyAndReturn({
     *   select: { roomCode: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomStakeUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomStakeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RoomStake.
     * @param {RoomStakeUpsertArgs} args - Arguments to update or create a RoomStake.
     * @example
     * // Update or create a RoomStake
     * const roomStake = await prisma.roomStake.upsert({
     *   create: {
     *     // ... data to create a RoomStake
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomStake we want to update
     *   }
     * })
     */
    upsert<T extends RoomStakeUpsertArgs>(args: SelectSubset<T, RoomStakeUpsertArgs<ExtArgs>>): Prisma__RoomStakeClient<$Result.GetResult<Prisma.$RoomStakePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RoomStakes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeCountArgs} args - Arguments to filter RoomStakes to count.
     * @example
     * // Count the number of RoomStakes
     * const count = await prisma.roomStake.count({
     *   where: {
     *     // ... the filter for the RoomStakes we want to count
     *   }
     * })
    **/
    count<T extends RoomStakeCountArgs>(
      args?: Subset<T, RoomStakeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomStakeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomStake.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomStakeAggregateArgs>(args: Subset<T, RoomStakeAggregateArgs>): Prisma.PrismaPromise<GetRoomStakeAggregateType<T>>

    /**
     * Group by RoomStake.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomStakeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomStakeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomStakeGroupByArgs['orderBy'] }
        : { orderBy?: RoomStakeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomStakeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomStakeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoomStake model
   */
  readonly fields: RoomStakeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomStake.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomStakeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoomStake model
   */
  interface RoomStakeFieldRefs {
    readonly roomCode: FieldRef<"RoomStake", 'String'>
    readonly userId: FieldRef<"RoomStake", 'String'>
    readonly amount: FieldRef<"RoomStake", 'Int'>
    readonly reservedAt: FieldRef<"RoomStake", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoomStake findUnique
   */
  export type RoomStakeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * Filter, which RoomStake to fetch.
     */
    where: RoomStakeWhereUniqueInput
  }

  /**
   * RoomStake findUniqueOrThrow
   */
  export type RoomStakeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * Filter, which RoomStake to fetch.
     */
    where: RoomStakeWhereUniqueInput
  }

  /**
   * RoomStake findFirst
   */
  export type RoomStakeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * Filter, which RoomStake to fetch.
     */
    where?: RoomStakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStakes to fetch.
     */
    orderBy?: RoomStakeOrderByWithRelationInput | RoomStakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomStakes.
     */
    cursor?: RoomStakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomStakes.
     */
    distinct?: RoomStakeScalarFieldEnum | RoomStakeScalarFieldEnum[]
  }

  /**
   * RoomStake findFirstOrThrow
   */
  export type RoomStakeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * Filter, which RoomStake to fetch.
     */
    where?: RoomStakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStakes to fetch.
     */
    orderBy?: RoomStakeOrderByWithRelationInput | RoomStakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomStakes.
     */
    cursor?: RoomStakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStakes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomStakes.
     */
    distinct?: RoomStakeScalarFieldEnum | RoomStakeScalarFieldEnum[]
  }

  /**
   * RoomStake findMany
   */
  export type RoomStakeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * Filter, which RoomStakes to fetch.
     */
    where?: RoomStakeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomStakes to fetch.
     */
    orderBy?: RoomStakeOrderByWithRelationInput | RoomStakeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomStakes.
     */
    cursor?: RoomStakeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomStakes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomStakes.
     */
    skip?: number
    distinct?: RoomStakeScalarFieldEnum | RoomStakeScalarFieldEnum[]
  }

  /**
   * RoomStake create
   */
  export type RoomStakeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * The data needed to create a RoomStake.
     */
    data: XOR<RoomStakeCreateInput, RoomStakeUncheckedCreateInput>
  }

  /**
   * RoomStake createMany
   */
  export type RoomStakeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoomStakes.
     */
    data: RoomStakeCreateManyInput | RoomStakeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoomStake createManyAndReturn
   */
  export type RoomStakeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * The data used to create many RoomStakes.
     */
    data: RoomStakeCreateManyInput | RoomStakeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomStake update
   */
  export type RoomStakeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * The data needed to update a RoomStake.
     */
    data: XOR<RoomStakeUpdateInput, RoomStakeUncheckedUpdateInput>
    /**
     * Choose, which RoomStake to update.
     */
    where: RoomStakeWhereUniqueInput
  }

  /**
   * RoomStake updateMany
   */
  export type RoomStakeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoomStakes.
     */
    data: XOR<RoomStakeUpdateManyMutationInput, RoomStakeUncheckedUpdateManyInput>
    /**
     * Filter which RoomStakes to update
     */
    where?: RoomStakeWhereInput
    /**
     * Limit how many RoomStakes to update.
     */
    limit?: number
  }

  /**
   * RoomStake updateManyAndReturn
   */
  export type RoomStakeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * The data used to update RoomStakes.
     */
    data: XOR<RoomStakeUpdateManyMutationInput, RoomStakeUncheckedUpdateManyInput>
    /**
     * Filter which RoomStakes to update
     */
    where?: RoomStakeWhereInput
    /**
     * Limit how many RoomStakes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoomStake upsert
   */
  export type RoomStakeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * The filter to search for the RoomStake to update in case it exists.
     */
    where: RoomStakeWhereUniqueInput
    /**
     * In case the RoomStake found by the `where` argument doesn't exist, create a new RoomStake with this data.
     */
    create: XOR<RoomStakeCreateInput, RoomStakeUncheckedCreateInput>
    /**
     * In case the RoomStake was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomStakeUpdateInput, RoomStakeUncheckedUpdateInput>
  }

  /**
   * RoomStake delete
   */
  export type RoomStakeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
    /**
     * Filter which RoomStake to delete.
     */
    where: RoomStakeWhereUniqueInput
  }

  /**
   * RoomStake deleteMany
   */
  export type RoomStakeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoomStakes to delete
     */
    where?: RoomStakeWhereInput
    /**
     * Limit how many RoomStakes to delete.
     */
    limit?: number
  }

  /**
   * RoomStake without action
   */
  export type RoomStakeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomStake
     */
    select?: RoomStakeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RoomStake
     */
    omit?: RoomStakeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomStakeInclude<ExtArgs> | null
  }


  /**
   * Model Sponsor
   */

  export type AggregateSponsor = {
    _count: SponsorCountAggregateOutputType | null
    _min: SponsorMinAggregateOutputType | null
    _max: SponsorMaxAggregateOutputType | null
  }

  export type SponsorMinAggregateOutputType = {
    code: string | null
    name: string | null
    active: boolean | null
  }

  export type SponsorMaxAggregateOutputType = {
    code: string | null
    name: string | null
    active: boolean | null
  }

  export type SponsorCountAggregateOutputType = {
    code: number
    name: number
    active: number
    _all: number
  }


  export type SponsorMinAggregateInputType = {
    code?: true
    name?: true
    active?: true
  }

  export type SponsorMaxAggregateInputType = {
    code?: true
    name?: true
    active?: true
  }

  export type SponsorCountAggregateInputType = {
    code?: true
    name?: true
    active?: true
    _all?: true
  }

  export type SponsorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sponsor to aggregate.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sponsors
    **/
    _count?: true | SponsorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SponsorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SponsorMaxAggregateInputType
  }

  export type GetSponsorAggregateType<T extends SponsorAggregateArgs> = {
        [P in keyof T & keyof AggregateSponsor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSponsor[P]>
      : GetScalarType<T[P], AggregateSponsor[P]>
  }




  export type SponsorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SponsorWhereInput
    orderBy?: SponsorOrderByWithAggregationInput | SponsorOrderByWithAggregationInput[]
    by: SponsorScalarFieldEnum[] | SponsorScalarFieldEnum
    having?: SponsorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SponsorCountAggregateInputType | true
    _min?: SponsorMinAggregateInputType
    _max?: SponsorMaxAggregateInputType
  }

  export type SponsorGroupByOutputType = {
    code: string
    name: string
    active: boolean
    _count: SponsorCountAggregateOutputType | null
    _min: SponsorMinAggregateOutputType | null
    _max: SponsorMaxAggregateOutputType | null
  }

  type GetSponsorGroupByPayload<T extends SponsorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SponsorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SponsorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SponsorGroupByOutputType[P]>
            : GetScalarType<T[P], SponsorGroupByOutputType[P]>
        }
      >
    >


  export type SponsorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    active?: boolean
    users?: boolean | Sponsor$usersArgs<ExtArgs>
    _count?: boolean | SponsorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sponsor"]>

  export type SponsorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    active?: boolean
  }, ExtArgs["result"]["sponsor"]>

  export type SponsorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    active?: boolean
  }, ExtArgs["result"]["sponsor"]>

  export type SponsorSelectScalar = {
    code?: boolean
    name?: boolean
    active?: boolean
  }

  export type SponsorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "active", ExtArgs["result"]["sponsor"]>
  export type SponsorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Sponsor$usersArgs<ExtArgs>
    _count?: boolean | SponsorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SponsorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SponsorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SponsorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sponsor"
    objects: {
      users: Prisma.$UserSponsorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      active: boolean
    }, ExtArgs["result"]["sponsor"]>
    composites: {}
  }

  type SponsorGetPayload<S extends boolean | null | undefined | SponsorDefaultArgs> = $Result.GetResult<Prisma.$SponsorPayload, S>

  type SponsorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SponsorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SponsorCountAggregateInputType | true
    }

  export interface SponsorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sponsor'], meta: { name: 'Sponsor' } }
    /**
     * Find zero or one Sponsor that matches the filter.
     * @param {SponsorFindUniqueArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SponsorFindUniqueArgs>(args: SelectSubset<T, SponsorFindUniqueArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sponsor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SponsorFindUniqueOrThrowArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SponsorFindUniqueOrThrowArgs>(args: SelectSubset<T, SponsorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sponsor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindFirstArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SponsorFindFirstArgs>(args?: SelectSubset<T, SponsorFindFirstArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sponsor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindFirstOrThrowArgs} args - Arguments to find a Sponsor
     * @example
     * // Get one Sponsor
     * const sponsor = await prisma.sponsor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SponsorFindFirstOrThrowArgs>(args?: SelectSubset<T, SponsorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sponsors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sponsors
     * const sponsors = await prisma.sponsor.findMany()
     * 
     * // Get first 10 Sponsors
     * const sponsors = await prisma.sponsor.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const sponsorWithCodeOnly = await prisma.sponsor.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends SponsorFindManyArgs>(args?: SelectSubset<T, SponsorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sponsor.
     * @param {SponsorCreateArgs} args - Arguments to create a Sponsor.
     * @example
     * // Create one Sponsor
     * const Sponsor = await prisma.sponsor.create({
     *   data: {
     *     // ... data to create a Sponsor
     *   }
     * })
     * 
     */
    create<T extends SponsorCreateArgs>(args: SelectSubset<T, SponsorCreateArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sponsors.
     * @param {SponsorCreateManyArgs} args - Arguments to create many Sponsors.
     * @example
     * // Create many Sponsors
     * const sponsor = await prisma.sponsor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SponsorCreateManyArgs>(args?: SelectSubset<T, SponsorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sponsors and returns the data saved in the database.
     * @param {SponsorCreateManyAndReturnArgs} args - Arguments to create many Sponsors.
     * @example
     * // Create many Sponsors
     * const sponsor = await prisma.sponsor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sponsors and only return the `code`
     * const sponsorWithCodeOnly = await prisma.sponsor.createManyAndReturn({
     *   select: { code: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SponsorCreateManyAndReturnArgs>(args?: SelectSubset<T, SponsorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sponsor.
     * @param {SponsorDeleteArgs} args - Arguments to delete one Sponsor.
     * @example
     * // Delete one Sponsor
     * const Sponsor = await prisma.sponsor.delete({
     *   where: {
     *     // ... filter to delete one Sponsor
     *   }
     * })
     * 
     */
    delete<T extends SponsorDeleteArgs>(args: SelectSubset<T, SponsorDeleteArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sponsor.
     * @param {SponsorUpdateArgs} args - Arguments to update one Sponsor.
     * @example
     * // Update one Sponsor
     * const sponsor = await prisma.sponsor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SponsorUpdateArgs>(args: SelectSubset<T, SponsorUpdateArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sponsors.
     * @param {SponsorDeleteManyArgs} args - Arguments to filter Sponsors to delete.
     * @example
     * // Delete a few Sponsors
     * const { count } = await prisma.sponsor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SponsorDeleteManyArgs>(args?: SelectSubset<T, SponsorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sponsors
     * const sponsor = await prisma.sponsor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SponsorUpdateManyArgs>(args: SelectSubset<T, SponsorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sponsors and returns the data updated in the database.
     * @param {SponsorUpdateManyAndReturnArgs} args - Arguments to update many Sponsors.
     * @example
     * // Update many Sponsors
     * const sponsor = await prisma.sponsor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sponsors and only return the `code`
     * const sponsorWithCodeOnly = await prisma.sponsor.updateManyAndReturn({
     *   select: { code: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SponsorUpdateManyAndReturnArgs>(args: SelectSubset<T, SponsorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sponsor.
     * @param {SponsorUpsertArgs} args - Arguments to update or create a Sponsor.
     * @example
     * // Update or create a Sponsor
     * const sponsor = await prisma.sponsor.upsert({
     *   create: {
     *     // ... data to create a Sponsor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sponsor we want to update
     *   }
     * })
     */
    upsert<T extends SponsorUpsertArgs>(args: SelectSubset<T, SponsorUpsertArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorCountArgs} args - Arguments to filter Sponsors to count.
     * @example
     * // Count the number of Sponsors
     * const count = await prisma.sponsor.count({
     *   where: {
     *     // ... the filter for the Sponsors we want to count
     *   }
     * })
    **/
    count<T extends SponsorCountArgs>(
      args?: Subset<T, SponsorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SponsorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SponsorAggregateArgs>(args: Subset<T, SponsorAggregateArgs>): Prisma.PrismaPromise<GetSponsorAggregateType<T>>

    /**
     * Group by Sponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SponsorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SponsorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SponsorGroupByArgs['orderBy'] }
        : { orderBy?: SponsorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SponsorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSponsorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sponsor model
   */
  readonly fields: SponsorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sponsor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SponsorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Sponsor$usersArgs<ExtArgs> = {}>(args?: Subset<T, Sponsor$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sponsor model
   */
  interface SponsorFieldRefs {
    readonly code: FieldRef<"Sponsor", 'String'>
    readonly name: FieldRef<"Sponsor", 'String'>
    readonly active: FieldRef<"Sponsor", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Sponsor findUnique
   */
  export type SponsorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor findUniqueOrThrow
   */
  export type SponsorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor findFirst
   */
  export type SponsorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sponsors.
     */
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Sponsor findFirstOrThrow
   */
  export type SponsorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsor to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sponsors.
     */
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Sponsor findMany
   */
  export type SponsorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter, which Sponsors to fetch.
     */
    where?: SponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sponsors to fetch.
     */
    orderBy?: SponsorOrderByWithRelationInput | SponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sponsors.
     */
    cursor?: SponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sponsors.
     */
    skip?: number
    distinct?: SponsorScalarFieldEnum | SponsorScalarFieldEnum[]
  }

  /**
   * Sponsor create
   */
  export type SponsorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * The data needed to create a Sponsor.
     */
    data: XOR<SponsorCreateInput, SponsorUncheckedCreateInput>
  }

  /**
   * Sponsor createMany
   */
  export type SponsorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sponsors.
     */
    data: SponsorCreateManyInput | SponsorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sponsor createManyAndReturn
   */
  export type SponsorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * The data used to create many Sponsors.
     */
    data: SponsorCreateManyInput | SponsorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sponsor update
   */
  export type SponsorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * The data needed to update a Sponsor.
     */
    data: XOR<SponsorUpdateInput, SponsorUncheckedUpdateInput>
    /**
     * Choose, which Sponsor to update.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor updateMany
   */
  export type SponsorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sponsors.
     */
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyInput>
    /**
     * Filter which Sponsors to update
     */
    where?: SponsorWhereInput
    /**
     * Limit how many Sponsors to update.
     */
    limit?: number
  }

  /**
   * Sponsor updateManyAndReturn
   */
  export type SponsorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * The data used to update Sponsors.
     */
    data: XOR<SponsorUpdateManyMutationInput, SponsorUncheckedUpdateManyInput>
    /**
     * Filter which Sponsors to update
     */
    where?: SponsorWhereInput
    /**
     * Limit how many Sponsors to update.
     */
    limit?: number
  }

  /**
   * Sponsor upsert
   */
  export type SponsorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * The filter to search for the Sponsor to update in case it exists.
     */
    where: SponsorWhereUniqueInput
    /**
     * In case the Sponsor found by the `where` argument doesn't exist, create a new Sponsor with this data.
     */
    create: XOR<SponsorCreateInput, SponsorUncheckedCreateInput>
    /**
     * In case the Sponsor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SponsorUpdateInput, SponsorUncheckedUpdateInput>
  }

  /**
   * Sponsor delete
   */
  export type SponsorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
    /**
     * Filter which Sponsor to delete.
     */
    where: SponsorWhereUniqueInput
  }

  /**
   * Sponsor deleteMany
   */
  export type SponsorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sponsors to delete
     */
    where?: SponsorWhereInput
    /**
     * Limit how many Sponsors to delete.
     */
    limit?: number
  }

  /**
   * Sponsor.users
   */
  export type Sponsor$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    where?: UserSponsorWhereInput
    orderBy?: UserSponsorOrderByWithRelationInput | UserSponsorOrderByWithRelationInput[]
    cursor?: UserSponsorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSponsorScalarFieldEnum | UserSponsorScalarFieldEnum[]
  }

  /**
   * Sponsor without action
   */
  export type SponsorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sponsor
     */
    select?: SponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sponsor
     */
    omit?: SponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SponsorInclude<ExtArgs> | null
  }


  /**
   * Model UserSponsor
   */

  export type AggregateUserSponsor = {
    _count: UserSponsorCountAggregateOutputType | null
    _min: UserSponsorMinAggregateOutputType | null
    _max: UserSponsorMaxAggregateOutputType | null
  }

  export type UserSponsorMinAggregateOutputType = {
    userId: string | null
    sponsorCode: string | null
    activatedAt: Date | null
  }

  export type UserSponsorMaxAggregateOutputType = {
    userId: string | null
    sponsorCode: string | null
    activatedAt: Date | null
  }

  export type UserSponsorCountAggregateOutputType = {
    userId: number
    sponsorCode: number
    activatedAt: number
    _all: number
  }


  export type UserSponsorMinAggregateInputType = {
    userId?: true
    sponsorCode?: true
    activatedAt?: true
  }

  export type UserSponsorMaxAggregateInputType = {
    userId?: true
    sponsorCode?: true
    activatedAt?: true
  }

  export type UserSponsorCountAggregateInputType = {
    userId?: true
    sponsorCode?: true
    activatedAt?: true
    _all?: true
  }

  export type UserSponsorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSponsor to aggregate.
     */
    where?: UserSponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSponsors to fetch.
     */
    orderBy?: UserSponsorOrderByWithRelationInput | UserSponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSponsors
    **/
    _count?: true | UserSponsorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSponsorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSponsorMaxAggregateInputType
  }

  export type GetUserSponsorAggregateType<T extends UserSponsorAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSponsor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSponsor[P]>
      : GetScalarType<T[P], AggregateUserSponsor[P]>
  }




  export type UserSponsorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSponsorWhereInput
    orderBy?: UserSponsorOrderByWithAggregationInput | UserSponsorOrderByWithAggregationInput[]
    by: UserSponsorScalarFieldEnum[] | UserSponsorScalarFieldEnum
    having?: UserSponsorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSponsorCountAggregateInputType | true
    _min?: UserSponsorMinAggregateInputType
    _max?: UserSponsorMaxAggregateInputType
  }

  export type UserSponsorGroupByOutputType = {
    userId: string
    sponsorCode: string
    activatedAt: Date
    _count: UserSponsorCountAggregateOutputType | null
    _min: UserSponsorMinAggregateOutputType | null
    _max: UserSponsorMaxAggregateOutputType | null
  }

  type GetUserSponsorGroupByPayload<T extends UserSponsorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSponsorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSponsorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSponsorGroupByOutputType[P]>
            : GetScalarType<T[P], UserSponsorGroupByOutputType[P]>
        }
      >
    >


  export type UserSponsorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    sponsorCode?: boolean
    activatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sponsor?: boolean | SponsorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSponsor"]>

  export type UserSponsorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    sponsorCode?: boolean
    activatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sponsor?: boolean | SponsorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSponsor"]>

  export type UserSponsorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    sponsorCode?: boolean
    activatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    sponsor?: boolean | SponsorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSponsor"]>

  export type UserSponsorSelectScalar = {
    userId?: boolean
    sponsorCode?: boolean
    activatedAt?: boolean
  }

  export type UserSponsorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "sponsorCode" | "activatedAt", ExtArgs["result"]["userSponsor"]>
  export type UserSponsorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sponsor?: boolean | SponsorDefaultArgs<ExtArgs>
  }
  export type UserSponsorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sponsor?: boolean | SponsorDefaultArgs<ExtArgs>
  }
  export type UserSponsorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    sponsor?: boolean | SponsorDefaultArgs<ExtArgs>
  }

  export type $UserSponsorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSponsor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      sponsor: Prisma.$SponsorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      sponsorCode: string
      activatedAt: Date
    }, ExtArgs["result"]["userSponsor"]>
    composites: {}
  }

  type UserSponsorGetPayload<S extends boolean | null | undefined | UserSponsorDefaultArgs> = $Result.GetResult<Prisma.$UserSponsorPayload, S>

  type UserSponsorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSponsorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSponsorCountAggregateInputType | true
    }

  export interface UserSponsorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSponsor'], meta: { name: 'UserSponsor' } }
    /**
     * Find zero or one UserSponsor that matches the filter.
     * @param {UserSponsorFindUniqueArgs} args - Arguments to find a UserSponsor
     * @example
     * // Get one UserSponsor
     * const userSponsor = await prisma.userSponsor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSponsorFindUniqueArgs>(args: SelectSubset<T, UserSponsorFindUniqueArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSponsor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSponsorFindUniqueOrThrowArgs} args - Arguments to find a UserSponsor
     * @example
     * // Get one UserSponsor
     * const userSponsor = await prisma.userSponsor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSponsorFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSponsorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSponsor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorFindFirstArgs} args - Arguments to find a UserSponsor
     * @example
     * // Get one UserSponsor
     * const userSponsor = await prisma.userSponsor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSponsorFindFirstArgs>(args?: SelectSubset<T, UserSponsorFindFirstArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSponsor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorFindFirstOrThrowArgs} args - Arguments to find a UserSponsor
     * @example
     * // Get one UserSponsor
     * const userSponsor = await prisma.userSponsor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSponsorFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSponsorFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSponsors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSponsors
     * const userSponsors = await prisma.userSponsor.findMany()
     * 
     * // Get first 10 UserSponsors
     * const userSponsors = await prisma.userSponsor.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userSponsorWithUserIdOnly = await prisma.userSponsor.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserSponsorFindManyArgs>(args?: SelectSubset<T, UserSponsorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSponsor.
     * @param {UserSponsorCreateArgs} args - Arguments to create a UserSponsor.
     * @example
     * // Create one UserSponsor
     * const UserSponsor = await prisma.userSponsor.create({
     *   data: {
     *     // ... data to create a UserSponsor
     *   }
     * })
     * 
     */
    create<T extends UserSponsorCreateArgs>(args: SelectSubset<T, UserSponsorCreateArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSponsors.
     * @param {UserSponsorCreateManyArgs} args - Arguments to create many UserSponsors.
     * @example
     * // Create many UserSponsors
     * const userSponsor = await prisma.userSponsor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSponsorCreateManyArgs>(args?: SelectSubset<T, UserSponsorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSponsors and returns the data saved in the database.
     * @param {UserSponsorCreateManyAndReturnArgs} args - Arguments to create many UserSponsors.
     * @example
     * // Create many UserSponsors
     * const userSponsor = await prisma.userSponsor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSponsors and only return the `userId`
     * const userSponsorWithUserIdOnly = await prisma.userSponsor.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSponsorCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSponsorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSponsor.
     * @param {UserSponsorDeleteArgs} args - Arguments to delete one UserSponsor.
     * @example
     * // Delete one UserSponsor
     * const UserSponsor = await prisma.userSponsor.delete({
     *   where: {
     *     // ... filter to delete one UserSponsor
     *   }
     * })
     * 
     */
    delete<T extends UserSponsorDeleteArgs>(args: SelectSubset<T, UserSponsorDeleteArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSponsor.
     * @param {UserSponsorUpdateArgs} args - Arguments to update one UserSponsor.
     * @example
     * // Update one UserSponsor
     * const userSponsor = await prisma.userSponsor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSponsorUpdateArgs>(args: SelectSubset<T, UserSponsorUpdateArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSponsors.
     * @param {UserSponsorDeleteManyArgs} args - Arguments to filter UserSponsors to delete.
     * @example
     * // Delete a few UserSponsors
     * const { count } = await prisma.userSponsor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSponsorDeleteManyArgs>(args?: SelectSubset<T, UserSponsorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSponsors
     * const userSponsor = await prisma.userSponsor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSponsorUpdateManyArgs>(args: SelectSubset<T, UserSponsorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSponsors and returns the data updated in the database.
     * @param {UserSponsorUpdateManyAndReturnArgs} args - Arguments to update many UserSponsors.
     * @example
     * // Update many UserSponsors
     * const userSponsor = await prisma.userSponsor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSponsors and only return the `userId`
     * const userSponsorWithUserIdOnly = await prisma.userSponsor.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSponsorUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSponsorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSponsor.
     * @param {UserSponsorUpsertArgs} args - Arguments to update or create a UserSponsor.
     * @example
     * // Update or create a UserSponsor
     * const userSponsor = await prisma.userSponsor.upsert({
     *   create: {
     *     // ... data to create a UserSponsor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSponsor we want to update
     *   }
     * })
     */
    upsert<T extends UserSponsorUpsertArgs>(args: SelectSubset<T, UserSponsorUpsertArgs<ExtArgs>>): Prisma__UserSponsorClient<$Result.GetResult<Prisma.$UserSponsorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSponsors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorCountArgs} args - Arguments to filter UserSponsors to count.
     * @example
     * // Count the number of UserSponsors
     * const count = await prisma.userSponsor.count({
     *   where: {
     *     // ... the filter for the UserSponsors we want to count
     *   }
     * })
    **/
    count<T extends UserSponsorCountArgs>(
      args?: Subset<T, UserSponsorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSponsorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSponsorAggregateArgs>(args: Subset<T, UserSponsorAggregateArgs>): Prisma.PrismaPromise<GetUserSponsorAggregateType<T>>

    /**
     * Group by UserSponsor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSponsorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSponsorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSponsorGroupByArgs['orderBy'] }
        : { orderBy?: UserSponsorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSponsorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSponsorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSponsor model
   */
  readonly fields: UserSponsorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSponsor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSponsorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sponsor<T extends SponsorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SponsorDefaultArgs<ExtArgs>>): Prisma__SponsorClient<$Result.GetResult<Prisma.$SponsorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSponsor model
   */
  interface UserSponsorFieldRefs {
    readonly userId: FieldRef<"UserSponsor", 'String'>
    readonly sponsorCode: FieldRef<"UserSponsor", 'String'>
    readonly activatedAt: FieldRef<"UserSponsor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSponsor findUnique
   */
  export type UserSponsorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * Filter, which UserSponsor to fetch.
     */
    where: UserSponsorWhereUniqueInput
  }

  /**
   * UserSponsor findUniqueOrThrow
   */
  export type UserSponsorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * Filter, which UserSponsor to fetch.
     */
    where: UserSponsorWhereUniqueInput
  }

  /**
   * UserSponsor findFirst
   */
  export type UserSponsorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * Filter, which UserSponsor to fetch.
     */
    where?: UserSponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSponsors to fetch.
     */
    orderBy?: UserSponsorOrderByWithRelationInput | UserSponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSponsors.
     */
    cursor?: UserSponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSponsors.
     */
    distinct?: UserSponsorScalarFieldEnum | UserSponsorScalarFieldEnum[]
  }

  /**
   * UserSponsor findFirstOrThrow
   */
  export type UserSponsorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * Filter, which UserSponsor to fetch.
     */
    where?: UserSponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSponsors to fetch.
     */
    orderBy?: UserSponsorOrderByWithRelationInput | UserSponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSponsors.
     */
    cursor?: UserSponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSponsors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSponsors.
     */
    distinct?: UserSponsorScalarFieldEnum | UserSponsorScalarFieldEnum[]
  }

  /**
   * UserSponsor findMany
   */
  export type UserSponsorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * Filter, which UserSponsors to fetch.
     */
    where?: UserSponsorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSponsors to fetch.
     */
    orderBy?: UserSponsorOrderByWithRelationInput | UserSponsorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSponsors.
     */
    cursor?: UserSponsorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSponsors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSponsors.
     */
    skip?: number
    distinct?: UserSponsorScalarFieldEnum | UserSponsorScalarFieldEnum[]
  }

  /**
   * UserSponsor create
   */
  export type UserSponsorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSponsor.
     */
    data: XOR<UserSponsorCreateInput, UserSponsorUncheckedCreateInput>
  }

  /**
   * UserSponsor createMany
   */
  export type UserSponsorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSponsors.
     */
    data: UserSponsorCreateManyInput | UserSponsorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSponsor createManyAndReturn
   */
  export type UserSponsorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * The data used to create many UserSponsors.
     */
    data: UserSponsorCreateManyInput | UserSponsorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSponsor update
   */
  export type UserSponsorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSponsor.
     */
    data: XOR<UserSponsorUpdateInput, UserSponsorUncheckedUpdateInput>
    /**
     * Choose, which UserSponsor to update.
     */
    where: UserSponsorWhereUniqueInput
  }

  /**
   * UserSponsor updateMany
   */
  export type UserSponsorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSponsors.
     */
    data: XOR<UserSponsorUpdateManyMutationInput, UserSponsorUncheckedUpdateManyInput>
    /**
     * Filter which UserSponsors to update
     */
    where?: UserSponsorWhereInput
    /**
     * Limit how many UserSponsors to update.
     */
    limit?: number
  }

  /**
   * UserSponsor updateManyAndReturn
   */
  export type UserSponsorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * The data used to update UserSponsors.
     */
    data: XOR<UserSponsorUpdateManyMutationInput, UserSponsorUncheckedUpdateManyInput>
    /**
     * Filter which UserSponsors to update
     */
    where?: UserSponsorWhereInput
    /**
     * Limit how many UserSponsors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSponsor upsert
   */
  export type UserSponsorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSponsor to update in case it exists.
     */
    where: UserSponsorWhereUniqueInput
    /**
     * In case the UserSponsor found by the `where` argument doesn't exist, create a new UserSponsor with this data.
     */
    create: XOR<UserSponsorCreateInput, UserSponsorUncheckedCreateInput>
    /**
     * In case the UserSponsor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSponsorUpdateInput, UserSponsorUncheckedUpdateInput>
  }

  /**
   * UserSponsor delete
   */
  export type UserSponsorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
    /**
     * Filter which UserSponsor to delete.
     */
    where: UserSponsorWhereUniqueInput
  }

  /**
   * UserSponsor deleteMany
   */
  export type UserSponsorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSponsors to delete
     */
    where?: UserSponsorWhereInput
    /**
     * Limit how many UserSponsors to delete.
     */
    limit?: number
  }

  /**
   * UserSponsor without action
   */
  export type UserSponsorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSponsor
     */
    select?: UserSponsorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSponsor
     */
    omit?: UserSponsorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSponsorInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    roomCode: string | null
    gameId: string | null
    createdAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    roomCode: string | null
    gameId: string | null
    createdAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    roomCode: number
    gameId: number
    createdAt: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    id?: true
    roomCode?: true
    gameId?: true
    createdAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    roomCode?: true
    gameId?: true
    createdAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    roomCode?: true
    gameId?: true
    createdAt?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    roomCode: string | null
    gameId: string
    createdAt: Date
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomCode?: boolean
    gameId?: boolean
    createdAt?: boolean
    room?: boolean | Match$roomArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    parts?: boolean | Match$partsArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomCode?: boolean
    gameId?: boolean
    createdAt?: boolean
    room?: boolean | Match$roomArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomCode?: boolean
    gameId?: boolean
    createdAt?: boolean
    room?: boolean | Match$roomArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    roomCode?: boolean
    gameId?: boolean
    createdAt?: boolean
  }

  export type MatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomCode" | "gameId" | "createdAt", ExtArgs["result"]["match"]>
  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | Match$roomArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    parts?: boolean | Match$partsArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | Match$roomArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type MatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | Match$roomArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      room: Prisma.$RoomPayload<ExtArgs> | null
      game: Prisma.$GamePayload<ExtArgs>
      parts: Prisma.$MatchParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roomCode: string | null
      gameId: string
      createdAt: Date
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches and returns the data updated in the database.
     * @param {MatchUpdateManyAndReturnArgs} args - Arguments to update many Matches.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends Match$roomArgs<ExtArgs> = {}>(args?: Subset<T, Match$roomArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parts<T extends Match$partsArgs<ExtArgs> = {}>(args?: Subset<T, Match$partsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly roomCode: FieldRef<"Match", 'String'>
    readonly gameId: FieldRef<"Match", 'String'>
    readonly createdAt: FieldRef<"Match", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
  }

  /**
   * Match updateManyAndReturn
   */
  export type MatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to delete.
     */
    limit?: number
  }

  /**
   * Match.room
   */
  export type Match$roomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
  }

  /**
   * Match.parts
   */
  export type Match$partsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    where?: MatchParticipantWhereInput
    orderBy?: MatchParticipantOrderByWithRelationInput | MatchParticipantOrderByWithRelationInput[]
    cursor?: MatchParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchParticipantScalarFieldEnum | MatchParticipantScalarFieldEnum[]
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model MatchParticipant
   */

  export type AggregateMatchParticipant = {
    _count: MatchParticipantCountAggregateOutputType | null
    _min: MatchParticipantMinAggregateOutputType | null
    _max: MatchParticipantMaxAggregateOutputType | null
  }

  export type MatchParticipantMinAggregateOutputType = {
    matchId: string | null
    userId: string | null
    outcome: $Enums.Outcome | null
  }

  export type MatchParticipantMaxAggregateOutputType = {
    matchId: string | null
    userId: string | null
    outcome: $Enums.Outcome | null
  }

  export type MatchParticipantCountAggregateOutputType = {
    matchId: number
    userId: number
    outcome: number
    _all: number
  }


  export type MatchParticipantMinAggregateInputType = {
    matchId?: true
    userId?: true
    outcome?: true
  }

  export type MatchParticipantMaxAggregateInputType = {
    matchId?: true
    userId?: true
    outcome?: true
  }

  export type MatchParticipantCountAggregateInputType = {
    matchId?: true
    userId?: true
    outcome?: true
    _all?: true
  }

  export type MatchParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchParticipant to aggregate.
     */
    where?: MatchParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: MatchParticipantOrderByWithRelationInput | MatchParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchParticipants
    **/
    _count?: true | MatchParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchParticipantMaxAggregateInputType
  }

  export type GetMatchParticipantAggregateType<T extends MatchParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchParticipant[P]>
      : GetScalarType<T[P], AggregateMatchParticipant[P]>
  }




  export type MatchParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchParticipantWhereInput
    orderBy?: MatchParticipantOrderByWithAggregationInput | MatchParticipantOrderByWithAggregationInput[]
    by: MatchParticipantScalarFieldEnum[] | MatchParticipantScalarFieldEnum
    having?: MatchParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchParticipantCountAggregateInputType | true
    _min?: MatchParticipantMinAggregateInputType
    _max?: MatchParticipantMaxAggregateInputType
  }

  export type MatchParticipantGroupByOutputType = {
    matchId: string
    userId: string
    outcome: $Enums.Outcome
    _count: MatchParticipantCountAggregateOutputType | null
    _min: MatchParticipantMinAggregateOutputType | null
    _max: MatchParticipantMaxAggregateOutputType | null
  }

  type GetMatchParticipantGroupByPayload<T extends MatchParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], MatchParticipantGroupByOutputType[P]>
        }
      >
    >


  export type MatchParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    matchId?: boolean
    userId?: boolean
    outcome?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchParticipant"]>

  export type MatchParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    matchId?: boolean
    userId?: boolean
    outcome?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchParticipant"]>

  export type MatchParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    matchId?: boolean
    userId?: boolean
    outcome?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchParticipant"]>

  export type MatchParticipantSelectScalar = {
    matchId?: boolean
    userId?: boolean
    outcome?: boolean
  }

  export type MatchParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"matchId" | "userId" | "outcome", ExtArgs["result"]["matchParticipant"]>
  export type MatchParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchParticipant"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      matchId: string
      userId: string
      outcome: $Enums.Outcome
    }, ExtArgs["result"]["matchParticipant"]>
    composites: {}
  }

  type MatchParticipantGetPayload<S extends boolean | null | undefined | MatchParticipantDefaultArgs> = $Result.GetResult<Prisma.$MatchParticipantPayload, S>

  type MatchParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchParticipantCountAggregateInputType | true
    }

  export interface MatchParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchParticipant'], meta: { name: 'MatchParticipant' } }
    /**
     * Find zero or one MatchParticipant that matches the filter.
     * @param {MatchParticipantFindUniqueArgs} args - Arguments to find a MatchParticipant
     * @example
     * // Get one MatchParticipant
     * const matchParticipant = await prisma.matchParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchParticipantFindUniqueArgs>(args: SelectSubset<T, MatchParticipantFindUniqueArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchParticipantFindUniqueOrThrowArgs} args - Arguments to find a MatchParticipant
     * @example
     * // Get one MatchParticipant
     * const matchParticipant = await prisma.matchParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantFindFirstArgs} args - Arguments to find a MatchParticipant
     * @example
     * // Get one MatchParticipant
     * const matchParticipant = await prisma.matchParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchParticipantFindFirstArgs>(args?: SelectSubset<T, MatchParticipantFindFirstArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantFindFirstOrThrowArgs} args - Arguments to find a MatchParticipant
     * @example
     * // Get one MatchParticipant
     * const matchParticipant = await prisma.matchParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchParticipants
     * const matchParticipants = await prisma.matchParticipant.findMany()
     * 
     * // Get first 10 MatchParticipants
     * const matchParticipants = await prisma.matchParticipant.findMany({ take: 10 })
     * 
     * // Only select the `matchId`
     * const matchParticipantWithMatchIdOnly = await prisma.matchParticipant.findMany({ select: { matchId: true } })
     * 
     */
    findMany<T extends MatchParticipantFindManyArgs>(args?: SelectSubset<T, MatchParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchParticipant.
     * @param {MatchParticipantCreateArgs} args - Arguments to create a MatchParticipant.
     * @example
     * // Create one MatchParticipant
     * const MatchParticipant = await prisma.matchParticipant.create({
     *   data: {
     *     // ... data to create a MatchParticipant
     *   }
     * })
     * 
     */
    create<T extends MatchParticipantCreateArgs>(args: SelectSubset<T, MatchParticipantCreateArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchParticipants.
     * @param {MatchParticipantCreateManyArgs} args - Arguments to create many MatchParticipants.
     * @example
     * // Create many MatchParticipants
     * const matchParticipant = await prisma.matchParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchParticipantCreateManyArgs>(args?: SelectSubset<T, MatchParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchParticipants and returns the data saved in the database.
     * @param {MatchParticipantCreateManyAndReturnArgs} args - Arguments to create many MatchParticipants.
     * @example
     * // Create many MatchParticipants
     * const matchParticipant = await prisma.matchParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchParticipants and only return the `matchId`
     * const matchParticipantWithMatchIdOnly = await prisma.matchParticipant.createManyAndReturn({
     *   select: { matchId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchParticipant.
     * @param {MatchParticipantDeleteArgs} args - Arguments to delete one MatchParticipant.
     * @example
     * // Delete one MatchParticipant
     * const MatchParticipant = await prisma.matchParticipant.delete({
     *   where: {
     *     // ... filter to delete one MatchParticipant
     *   }
     * })
     * 
     */
    delete<T extends MatchParticipantDeleteArgs>(args: SelectSubset<T, MatchParticipantDeleteArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchParticipant.
     * @param {MatchParticipantUpdateArgs} args - Arguments to update one MatchParticipant.
     * @example
     * // Update one MatchParticipant
     * const matchParticipant = await prisma.matchParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchParticipantUpdateArgs>(args: SelectSubset<T, MatchParticipantUpdateArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchParticipants.
     * @param {MatchParticipantDeleteManyArgs} args - Arguments to filter MatchParticipants to delete.
     * @example
     * // Delete a few MatchParticipants
     * const { count } = await prisma.matchParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchParticipantDeleteManyArgs>(args?: SelectSubset<T, MatchParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchParticipants
     * const matchParticipant = await prisma.matchParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchParticipantUpdateManyArgs>(args: SelectSubset<T, MatchParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchParticipants and returns the data updated in the database.
     * @param {MatchParticipantUpdateManyAndReturnArgs} args - Arguments to update many MatchParticipants.
     * @example
     * // Update many MatchParticipants
     * const matchParticipant = await prisma.matchParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchParticipants and only return the `matchId`
     * const matchParticipantWithMatchIdOnly = await prisma.matchParticipant.updateManyAndReturn({
     *   select: { matchId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchParticipant.
     * @param {MatchParticipantUpsertArgs} args - Arguments to update or create a MatchParticipant.
     * @example
     * // Update or create a MatchParticipant
     * const matchParticipant = await prisma.matchParticipant.upsert({
     *   create: {
     *     // ... data to create a MatchParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchParticipant we want to update
     *   }
     * })
     */
    upsert<T extends MatchParticipantUpsertArgs>(args: SelectSubset<T, MatchParticipantUpsertArgs<ExtArgs>>): Prisma__MatchParticipantClient<$Result.GetResult<Prisma.$MatchParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantCountArgs} args - Arguments to filter MatchParticipants to count.
     * @example
     * // Count the number of MatchParticipants
     * const count = await prisma.matchParticipant.count({
     *   where: {
     *     // ... the filter for the MatchParticipants we want to count
     *   }
     * })
    **/
    count<T extends MatchParticipantCountArgs>(
      args?: Subset<T, MatchParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchParticipantAggregateArgs>(args: Subset<T, MatchParticipantAggregateArgs>): Prisma.PrismaPromise<GetMatchParticipantAggregateType<T>>

    /**
     * Group by MatchParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchParticipantGroupByArgs['orderBy'] }
        : { orderBy?: MatchParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchParticipant model
   */
  readonly fields: MatchParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchParticipant model
   */
  interface MatchParticipantFieldRefs {
    readonly matchId: FieldRef<"MatchParticipant", 'String'>
    readonly userId: FieldRef<"MatchParticipant", 'String'>
    readonly outcome: FieldRef<"MatchParticipant", 'Outcome'>
  }
    

  // Custom InputTypes
  /**
   * MatchParticipant findUnique
   */
  export type MatchParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * Filter, which MatchParticipant to fetch.
     */
    where: MatchParticipantWhereUniqueInput
  }

  /**
   * MatchParticipant findUniqueOrThrow
   */
  export type MatchParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * Filter, which MatchParticipant to fetch.
     */
    where: MatchParticipantWhereUniqueInput
  }

  /**
   * MatchParticipant findFirst
   */
  export type MatchParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * Filter, which MatchParticipant to fetch.
     */
    where?: MatchParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: MatchParticipantOrderByWithRelationInput | MatchParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchParticipants.
     */
    cursor?: MatchParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchParticipants.
     */
    distinct?: MatchParticipantScalarFieldEnum | MatchParticipantScalarFieldEnum[]
  }

  /**
   * MatchParticipant findFirstOrThrow
   */
  export type MatchParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * Filter, which MatchParticipant to fetch.
     */
    where?: MatchParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: MatchParticipantOrderByWithRelationInput | MatchParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchParticipants.
     */
    cursor?: MatchParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchParticipants.
     */
    distinct?: MatchParticipantScalarFieldEnum | MatchParticipantScalarFieldEnum[]
  }

  /**
   * MatchParticipant findMany
   */
  export type MatchParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * Filter, which MatchParticipants to fetch.
     */
    where?: MatchParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: MatchParticipantOrderByWithRelationInput | MatchParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchParticipants.
     */
    cursor?: MatchParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    distinct?: MatchParticipantScalarFieldEnum | MatchParticipantScalarFieldEnum[]
  }

  /**
   * MatchParticipant create
   */
  export type MatchParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchParticipant.
     */
    data: XOR<MatchParticipantCreateInput, MatchParticipantUncheckedCreateInput>
  }

  /**
   * MatchParticipant createMany
   */
  export type MatchParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchParticipants.
     */
    data: MatchParticipantCreateManyInput | MatchParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchParticipant createManyAndReturn
   */
  export type MatchParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many MatchParticipants.
     */
    data: MatchParticipantCreateManyInput | MatchParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchParticipant update
   */
  export type MatchParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchParticipant.
     */
    data: XOR<MatchParticipantUpdateInput, MatchParticipantUncheckedUpdateInput>
    /**
     * Choose, which MatchParticipant to update.
     */
    where: MatchParticipantWhereUniqueInput
  }

  /**
   * MatchParticipant updateMany
   */
  export type MatchParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchParticipants.
     */
    data: XOR<MatchParticipantUpdateManyMutationInput, MatchParticipantUncheckedUpdateManyInput>
    /**
     * Filter which MatchParticipants to update
     */
    where?: MatchParticipantWhereInput
    /**
     * Limit how many MatchParticipants to update.
     */
    limit?: number
  }

  /**
   * MatchParticipant updateManyAndReturn
   */
  export type MatchParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * The data used to update MatchParticipants.
     */
    data: XOR<MatchParticipantUpdateManyMutationInput, MatchParticipantUncheckedUpdateManyInput>
    /**
     * Filter which MatchParticipants to update
     */
    where?: MatchParticipantWhereInput
    /**
     * Limit how many MatchParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchParticipant upsert
   */
  export type MatchParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchParticipant to update in case it exists.
     */
    where: MatchParticipantWhereUniqueInput
    /**
     * In case the MatchParticipant found by the `where` argument doesn't exist, create a new MatchParticipant with this data.
     */
    create: XOR<MatchParticipantCreateInput, MatchParticipantUncheckedCreateInput>
    /**
     * In case the MatchParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchParticipantUpdateInput, MatchParticipantUncheckedUpdateInput>
  }

  /**
   * MatchParticipant delete
   */
  export type MatchParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
    /**
     * Filter which MatchParticipant to delete.
     */
    where: MatchParticipantWhereUniqueInput
  }

  /**
   * MatchParticipant deleteMany
   */
  export type MatchParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchParticipants to delete
     */
    where?: MatchParticipantWhereInput
    /**
     * Limit how many MatchParticipants to delete.
     */
    limit?: number
  }

  /**
   * MatchParticipant without action
   */
  export type MatchParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchParticipant
     */
    select?: MatchParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchParticipant
     */
    omit?: MatchParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchParticipantInclude<ExtArgs> | null
  }


  /**
   * Model TimelineEvent
   */

  export type AggregateTimelineEvent = {
    _count: TimelineEventCountAggregateOutputType | null
    _min: TimelineEventMinAggregateOutputType | null
    _max: TimelineEventMaxAggregateOutputType | null
  }

  export type TimelineEventMinAggregateOutputType = {
    id: string | null
    userId: string | null
    roomCode: string | null
    gameId: string | null
    kind: string | null
    createdAt: Date | null
  }

  export type TimelineEventMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    roomCode: string | null
    gameId: string | null
    kind: string | null
    createdAt: Date | null
  }

  export type TimelineEventCountAggregateOutputType = {
    id: number
    userId: number
    roomCode: number
    gameId: number
    kind: number
    meta: number
    createdAt: number
    _all: number
  }


  export type TimelineEventMinAggregateInputType = {
    id?: true
    userId?: true
    roomCode?: true
    gameId?: true
    kind?: true
    createdAt?: true
  }

  export type TimelineEventMaxAggregateInputType = {
    id?: true
    userId?: true
    roomCode?: true
    gameId?: true
    kind?: true
    createdAt?: true
  }

  export type TimelineEventCountAggregateInputType = {
    id?: true
    userId?: true
    roomCode?: true
    gameId?: true
    kind?: true
    meta?: true
    createdAt?: true
    _all?: true
  }

  export type TimelineEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimelineEvent to aggregate.
     */
    where?: TimelineEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineEvents to fetch.
     */
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimelineEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimelineEvents
    **/
    _count?: true | TimelineEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimelineEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimelineEventMaxAggregateInputType
  }

  export type GetTimelineEventAggregateType<T extends TimelineEventAggregateArgs> = {
        [P in keyof T & keyof AggregateTimelineEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimelineEvent[P]>
      : GetScalarType<T[P], AggregateTimelineEvent[P]>
  }




  export type TimelineEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimelineEventWhereInput
    orderBy?: TimelineEventOrderByWithAggregationInput | TimelineEventOrderByWithAggregationInput[]
    by: TimelineEventScalarFieldEnum[] | TimelineEventScalarFieldEnum
    having?: TimelineEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimelineEventCountAggregateInputType | true
    _min?: TimelineEventMinAggregateInputType
    _max?: TimelineEventMaxAggregateInputType
  }

  export type TimelineEventGroupByOutputType = {
    id: string
    userId: string | null
    roomCode: string | null
    gameId: string | null
    kind: string
    meta: JsonValue | null
    createdAt: Date
    _count: TimelineEventCountAggregateOutputType | null
    _min: TimelineEventMinAggregateOutputType | null
    _max: TimelineEventMaxAggregateOutputType | null
  }

  type GetTimelineEventGroupByPayload<T extends TimelineEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimelineEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimelineEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimelineEventGroupByOutputType[P]>
            : GetScalarType<T[P], TimelineEventGroupByOutputType[P]>
        }
      >
    >


  export type TimelineEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roomCode?: boolean
    gameId?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | TimelineEvent$userArgs<ExtArgs>
    room?: boolean | TimelineEvent$roomArgs<ExtArgs>
    game?: boolean | TimelineEvent$gameArgs<ExtArgs>
  }, ExtArgs["result"]["timelineEvent"]>

  export type TimelineEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roomCode?: boolean
    gameId?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | TimelineEvent$userArgs<ExtArgs>
    room?: boolean | TimelineEvent$roomArgs<ExtArgs>
    game?: boolean | TimelineEvent$gameArgs<ExtArgs>
  }, ExtArgs["result"]["timelineEvent"]>

  export type TimelineEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roomCode?: boolean
    gameId?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | TimelineEvent$userArgs<ExtArgs>
    room?: boolean | TimelineEvent$roomArgs<ExtArgs>
    game?: boolean | TimelineEvent$gameArgs<ExtArgs>
  }, ExtArgs["result"]["timelineEvent"]>

  export type TimelineEventSelectScalar = {
    id?: boolean
    userId?: boolean
    roomCode?: boolean
    gameId?: boolean
    kind?: boolean
    meta?: boolean
    createdAt?: boolean
  }

  export type TimelineEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "roomCode" | "gameId" | "kind" | "meta" | "createdAt", ExtArgs["result"]["timelineEvent"]>
  export type TimelineEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TimelineEvent$userArgs<ExtArgs>
    room?: boolean | TimelineEvent$roomArgs<ExtArgs>
    game?: boolean | TimelineEvent$gameArgs<ExtArgs>
  }
  export type TimelineEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TimelineEvent$userArgs<ExtArgs>
    room?: boolean | TimelineEvent$roomArgs<ExtArgs>
    game?: boolean | TimelineEvent$gameArgs<ExtArgs>
  }
  export type TimelineEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TimelineEvent$userArgs<ExtArgs>
    room?: boolean | TimelineEvent$roomArgs<ExtArgs>
    game?: boolean | TimelineEvent$gameArgs<ExtArgs>
  }

  export type $TimelineEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimelineEvent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      room: Prisma.$RoomPayload<ExtArgs> | null
      game: Prisma.$GamePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      roomCode: string | null
      gameId: string | null
      kind: string
      meta: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["timelineEvent"]>
    composites: {}
  }

  type TimelineEventGetPayload<S extends boolean | null | undefined | TimelineEventDefaultArgs> = $Result.GetResult<Prisma.$TimelineEventPayload, S>

  type TimelineEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TimelineEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TimelineEventCountAggregateInputType | true
    }

  export interface TimelineEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimelineEvent'], meta: { name: 'TimelineEvent' } }
    /**
     * Find zero or one TimelineEvent that matches the filter.
     * @param {TimelineEventFindUniqueArgs} args - Arguments to find a TimelineEvent
     * @example
     * // Get one TimelineEvent
     * const timelineEvent = await prisma.timelineEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimelineEventFindUniqueArgs>(args: SelectSubset<T, TimelineEventFindUniqueArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TimelineEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TimelineEventFindUniqueOrThrowArgs} args - Arguments to find a TimelineEvent
     * @example
     * // Get one TimelineEvent
     * const timelineEvent = await prisma.timelineEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimelineEventFindUniqueOrThrowArgs>(args: SelectSubset<T, TimelineEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimelineEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventFindFirstArgs} args - Arguments to find a TimelineEvent
     * @example
     * // Get one TimelineEvent
     * const timelineEvent = await prisma.timelineEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimelineEventFindFirstArgs>(args?: SelectSubset<T, TimelineEventFindFirstArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TimelineEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventFindFirstOrThrowArgs} args - Arguments to find a TimelineEvent
     * @example
     * // Get one TimelineEvent
     * const timelineEvent = await prisma.timelineEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimelineEventFindFirstOrThrowArgs>(args?: SelectSubset<T, TimelineEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TimelineEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimelineEvents
     * const timelineEvents = await prisma.timelineEvent.findMany()
     * 
     * // Get first 10 TimelineEvents
     * const timelineEvents = await prisma.timelineEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timelineEventWithIdOnly = await prisma.timelineEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimelineEventFindManyArgs>(args?: SelectSubset<T, TimelineEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TimelineEvent.
     * @param {TimelineEventCreateArgs} args - Arguments to create a TimelineEvent.
     * @example
     * // Create one TimelineEvent
     * const TimelineEvent = await prisma.timelineEvent.create({
     *   data: {
     *     // ... data to create a TimelineEvent
     *   }
     * })
     * 
     */
    create<T extends TimelineEventCreateArgs>(args: SelectSubset<T, TimelineEventCreateArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TimelineEvents.
     * @param {TimelineEventCreateManyArgs} args - Arguments to create many TimelineEvents.
     * @example
     * // Create many TimelineEvents
     * const timelineEvent = await prisma.timelineEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimelineEventCreateManyArgs>(args?: SelectSubset<T, TimelineEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimelineEvents and returns the data saved in the database.
     * @param {TimelineEventCreateManyAndReturnArgs} args - Arguments to create many TimelineEvents.
     * @example
     * // Create many TimelineEvents
     * const timelineEvent = await prisma.timelineEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimelineEvents and only return the `id`
     * const timelineEventWithIdOnly = await prisma.timelineEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimelineEventCreateManyAndReturnArgs>(args?: SelectSubset<T, TimelineEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TimelineEvent.
     * @param {TimelineEventDeleteArgs} args - Arguments to delete one TimelineEvent.
     * @example
     * // Delete one TimelineEvent
     * const TimelineEvent = await prisma.timelineEvent.delete({
     *   where: {
     *     // ... filter to delete one TimelineEvent
     *   }
     * })
     * 
     */
    delete<T extends TimelineEventDeleteArgs>(args: SelectSubset<T, TimelineEventDeleteArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TimelineEvent.
     * @param {TimelineEventUpdateArgs} args - Arguments to update one TimelineEvent.
     * @example
     * // Update one TimelineEvent
     * const timelineEvent = await prisma.timelineEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimelineEventUpdateArgs>(args: SelectSubset<T, TimelineEventUpdateArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TimelineEvents.
     * @param {TimelineEventDeleteManyArgs} args - Arguments to filter TimelineEvents to delete.
     * @example
     * // Delete a few TimelineEvents
     * const { count } = await prisma.timelineEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimelineEventDeleteManyArgs>(args?: SelectSubset<T, TimelineEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimelineEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimelineEvents
     * const timelineEvent = await prisma.timelineEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimelineEventUpdateManyArgs>(args: SelectSubset<T, TimelineEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimelineEvents and returns the data updated in the database.
     * @param {TimelineEventUpdateManyAndReturnArgs} args - Arguments to update many TimelineEvents.
     * @example
     * // Update many TimelineEvents
     * const timelineEvent = await prisma.timelineEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TimelineEvents and only return the `id`
     * const timelineEventWithIdOnly = await prisma.timelineEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TimelineEventUpdateManyAndReturnArgs>(args: SelectSubset<T, TimelineEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TimelineEvent.
     * @param {TimelineEventUpsertArgs} args - Arguments to update or create a TimelineEvent.
     * @example
     * // Update or create a TimelineEvent
     * const timelineEvent = await prisma.timelineEvent.upsert({
     *   create: {
     *     // ... data to create a TimelineEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimelineEvent we want to update
     *   }
     * })
     */
    upsert<T extends TimelineEventUpsertArgs>(args: SelectSubset<T, TimelineEventUpsertArgs<ExtArgs>>): Prisma__TimelineEventClient<$Result.GetResult<Prisma.$TimelineEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TimelineEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventCountArgs} args - Arguments to filter TimelineEvents to count.
     * @example
     * // Count the number of TimelineEvents
     * const count = await prisma.timelineEvent.count({
     *   where: {
     *     // ... the filter for the TimelineEvents we want to count
     *   }
     * })
    **/
    count<T extends TimelineEventCountArgs>(
      args?: Subset<T, TimelineEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimelineEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimelineEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimelineEventAggregateArgs>(args: Subset<T, TimelineEventAggregateArgs>): Prisma.PrismaPromise<GetTimelineEventAggregateType<T>>

    /**
     * Group by TimelineEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimelineEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimelineEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimelineEventGroupByArgs['orderBy'] }
        : { orderBy?: TimelineEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimelineEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimelineEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimelineEvent model
   */
  readonly fields: TimelineEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimelineEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimelineEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends TimelineEvent$userArgs<ExtArgs> = {}>(args?: Subset<T, TimelineEvent$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    room<T extends TimelineEvent$roomArgs<ExtArgs> = {}>(args?: Subset<T, TimelineEvent$roomArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    game<T extends TimelineEvent$gameArgs<ExtArgs> = {}>(args?: Subset<T, TimelineEvent$gameArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimelineEvent model
   */
  interface TimelineEventFieldRefs {
    readonly id: FieldRef<"TimelineEvent", 'String'>
    readonly userId: FieldRef<"TimelineEvent", 'String'>
    readonly roomCode: FieldRef<"TimelineEvent", 'String'>
    readonly gameId: FieldRef<"TimelineEvent", 'String'>
    readonly kind: FieldRef<"TimelineEvent", 'String'>
    readonly meta: FieldRef<"TimelineEvent", 'Json'>
    readonly createdAt: FieldRef<"TimelineEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TimelineEvent findUnique
   */
  export type TimelineEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * Filter, which TimelineEvent to fetch.
     */
    where: TimelineEventWhereUniqueInput
  }

  /**
   * TimelineEvent findUniqueOrThrow
   */
  export type TimelineEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * Filter, which TimelineEvent to fetch.
     */
    where: TimelineEventWhereUniqueInput
  }

  /**
   * TimelineEvent findFirst
   */
  export type TimelineEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * Filter, which TimelineEvent to fetch.
     */
    where?: TimelineEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineEvents to fetch.
     */
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimelineEvents.
     */
    cursor?: TimelineEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimelineEvents.
     */
    distinct?: TimelineEventScalarFieldEnum | TimelineEventScalarFieldEnum[]
  }

  /**
   * TimelineEvent findFirstOrThrow
   */
  export type TimelineEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * Filter, which TimelineEvent to fetch.
     */
    where?: TimelineEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineEvents to fetch.
     */
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimelineEvents.
     */
    cursor?: TimelineEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimelineEvents.
     */
    distinct?: TimelineEventScalarFieldEnum | TimelineEventScalarFieldEnum[]
  }

  /**
   * TimelineEvent findMany
   */
  export type TimelineEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * Filter, which TimelineEvents to fetch.
     */
    where?: TimelineEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimelineEvents to fetch.
     */
    orderBy?: TimelineEventOrderByWithRelationInput | TimelineEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimelineEvents.
     */
    cursor?: TimelineEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimelineEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimelineEvents.
     */
    skip?: number
    distinct?: TimelineEventScalarFieldEnum | TimelineEventScalarFieldEnum[]
  }

  /**
   * TimelineEvent create
   */
  export type TimelineEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * The data needed to create a TimelineEvent.
     */
    data: XOR<TimelineEventCreateInput, TimelineEventUncheckedCreateInput>
  }

  /**
   * TimelineEvent createMany
   */
  export type TimelineEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimelineEvents.
     */
    data: TimelineEventCreateManyInput | TimelineEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimelineEvent createManyAndReturn
   */
  export type TimelineEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * The data used to create many TimelineEvents.
     */
    data: TimelineEventCreateManyInput | TimelineEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimelineEvent update
   */
  export type TimelineEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * The data needed to update a TimelineEvent.
     */
    data: XOR<TimelineEventUpdateInput, TimelineEventUncheckedUpdateInput>
    /**
     * Choose, which TimelineEvent to update.
     */
    where: TimelineEventWhereUniqueInput
  }

  /**
   * TimelineEvent updateMany
   */
  export type TimelineEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimelineEvents.
     */
    data: XOR<TimelineEventUpdateManyMutationInput, TimelineEventUncheckedUpdateManyInput>
    /**
     * Filter which TimelineEvents to update
     */
    where?: TimelineEventWhereInput
    /**
     * Limit how many TimelineEvents to update.
     */
    limit?: number
  }

  /**
   * TimelineEvent updateManyAndReturn
   */
  export type TimelineEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * The data used to update TimelineEvents.
     */
    data: XOR<TimelineEventUpdateManyMutationInput, TimelineEventUncheckedUpdateManyInput>
    /**
     * Filter which TimelineEvents to update
     */
    where?: TimelineEventWhereInput
    /**
     * Limit how many TimelineEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TimelineEvent upsert
   */
  export type TimelineEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * The filter to search for the TimelineEvent to update in case it exists.
     */
    where: TimelineEventWhereUniqueInput
    /**
     * In case the TimelineEvent found by the `where` argument doesn't exist, create a new TimelineEvent with this data.
     */
    create: XOR<TimelineEventCreateInput, TimelineEventUncheckedCreateInput>
    /**
     * In case the TimelineEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimelineEventUpdateInput, TimelineEventUncheckedUpdateInput>
  }

  /**
   * TimelineEvent delete
   */
  export type TimelineEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
    /**
     * Filter which TimelineEvent to delete.
     */
    where: TimelineEventWhereUniqueInput
  }

  /**
   * TimelineEvent deleteMany
   */
  export type TimelineEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimelineEvents to delete
     */
    where?: TimelineEventWhereInput
    /**
     * Limit how many TimelineEvents to delete.
     */
    limit?: number
  }

  /**
   * TimelineEvent.user
   */
  export type TimelineEvent$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * TimelineEvent.room
   */
  export type TimelineEvent$roomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
  }

  /**
   * TimelineEvent.game
   */
  export type TimelineEvent$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
  }

  /**
   * TimelineEvent without action
   */
  export type TimelineEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimelineEvent
     */
    select?: TimelineEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TimelineEvent
     */
    omit?: TimelineEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimelineEventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    displayName: 'displayName',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt',
    permanentScore: 'permanentScore',
    creditPoints: 'creditPoints'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    code: 'code',
    gameId: 'gameId',
    hostUserId: 'hostUserId',
    status: 'status',
    createdAt: 'createdAt',
    targetWinPoints: 'targetWinPoints',
    allowZeroCredit: 'allowZeroCredit',
    timerSec: 'timerSec',
    startedAt: 'startedAt'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const RoomPlayerScalarFieldEnum: {
    roomCode: 'roomCode',
    userId: 'userId',
    joinedAt: 'joinedAt',
    team: 'team',
    isLeader: 'isLeader'
  };

  export type RoomPlayerScalarFieldEnum = (typeof RoomPlayerScalarFieldEnum)[keyof typeof RoomPlayerScalarFieldEnum]


  export const RoomStakeScalarFieldEnum: {
    roomCode: 'roomCode',
    userId: 'userId',
    amount: 'amount',
    reservedAt: 'reservedAt'
  };

  export type RoomStakeScalarFieldEnum = (typeof RoomStakeScalarFieldEnum)[keyof typeof RoomStakeScalarFieldEnum]


  export const SponsorScalarFieldEnum: {
    code: 'code',
    name: 'name',
    active: 'active'
  };

  export type SponsorScalarFieldEnum = (typeof SponsorScalarFieldEnum)[keyof typeof SponsorScalarFieldEnum]


  export const UserSponsorScalarFieldEnum: {
    userId: 'userId',
    sponsorCode: 'sponsorCode',
    activatedAt: 'activatedAt'
  };

  export type UserSponsorScalarFieldEnum = (typeof UserSponsorScalarFieldEnum)[keyof typeof UserSponsorScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    roomCode: 'roomCode',
    gameId: 'gameId',
    createdAt: 'createdAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const MatchParticipantScalarFieldEnum: {
    matchId: 'matchId',
    userId: 'userId',
    outcome: 'outcome'
  };

  export type MatchParticipantScalarFieldEnum = (typeof MatchParticipantScalarFieldEnum)[keyof typeof MatchParticipantScalarFieldEnum]


  export const TimelineEventScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    roomCode: 'roomCode',
    gameId: 'gameId',
    kind: 'kind',
    meta: 'meta',
    createdAt: 'createdAt'
  };

  export type TimelineEventScalarFieldEnum = (typeof TimelineEventScalarFieldEnum)[keyof typeof TimelineEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'TeamSide'
   */
  export type EnumTeamSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamSide'>
    


  /**
   * Reference to a field of type 'TeamSide[]'
   */
  export type ListEnumTeamSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamSide[]'>
    


  /**
   * Reference to a field of type 'Outcome'
   */
  export type EnumOutcomeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Outcome'>
    


  /**
   * Reference to a field of type 'Outcome[]'
   */
  export type ListEnumOutcomeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Outcome[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: StringFilter<"Game"> | string
    name?: StringFilter<"Game"> | string
    category?: StringFilter<"Game"> | string
    rooms?: RoomListRelationFilter
    matches?: MatchListRelationFilter
    TimelineEvent?: TimelineEventListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    rooms?: RoomOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
    TimelineEvent?: TimelineEventOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    name?: StringFilter<"Game"> | string
    category?: StringFilter<"Game"> | string
    rooms?: RoomListRelationFilter
    matches?: MatchListRelationFilter
    TimelineEvent?: TimelineEventListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Game"> | string
    name?: StringWithAggregatesFilter<"Game"> | string
    category?: StringWithAggregatesFilter<"Game"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    displayName?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    permanentScore?: IntFilter<"User"> | number
    creditPoints?: IntFilter<"User"> | number
    roomsHosted?: RoomListRelationFilter
    roomPlayers?: RoomPlayerListRelationFilter
    sponsors?: UserSponsorListRelationFilter
    matchParts?: MatchParticipantListRelationFilter
    timeline?: TimelineEventListRelationFilter
    RoomStake?: RoomStakeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    permanentScore?: SortOrder
    creditPoints?: SortOrder
    roomsHosted?: RoomOrderByRelationAggregateInput
    roomPlayers?: RoomPlayerOrderByRelationAggregateInput
    sponsors?: UserSponsorOrderByRelationAggregateInput
    matchParts?: MatchParticipantOrderByRelationAggregateInput
    timeline?: TimelineEventOrderByRelationAggregateInput
    RoomStake?: RoomStakeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    displayName?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    permanentScore?: IntFilter<"User"> | number
    creditPoints?: IntFilter<"User"> | number
    roomsHosted?: RoomListRelationFilter
    roomPlayers?: RoomPlayerListRelationFilter
    sponsors?: UserSponsorListRelationFilter
    matchParts?: MatchParticipantListRelationFilter
    timeline?: TimelineEventListRelationFilter
    RoomStake?: RoomStakeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    permanentScore?: SortOrder
    creditPoints?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    displayName?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    permanentScore?: IntWithAggregatesFilter<"User"> | number
    creditPoints?: IntWithAggregatesFilter<"User"> | number
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    code?: StringFilter<"Room"> | string
    gameId?: StringFilter<"Room"> | string
    hostUserId?: StringFilter<"Room"> | string
    status?: StringFilter<"Room"> | string
    createdAt?: DateTimeFilter<"Room"> | Date | string
    targetWinPoints?: IntNullableFilter<"Room"> | number | null
    allowZeroCredit?: BoolFilter<"Room"> | boolean
    timerSec?: IntNullableFilter<"Room"> | number | null
    startedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    players?: RoomPlayerListRelationFilter
    matches?: MatchListRelationFilter
    stakes?: RoomStakeListRelationFilter
    TimelineEvent?: TimelineEventListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    code?: SortOrder
    gameId?: SortOrder
    hostUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    targetWinPoints?: SortOrderInput | SortOrder
    allowZeroCredit?: SortOrder
    timerSec?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    game?: GameOrderByWithRelationInput
    host?: UserOrderByWithRelationInput
    players?: RoomPlayerOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
    stakes?: RoomStakeOrderByRelationAggregateInput
    TimelineEvent?: TimelineEventOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    gameId?: StringFilter<"Room"> | string
    hostUserId?: StringFilter<"Room"> | string
    status?: StringFilter<"Room"> | string
    createdAt?: DateTimeFilter<"Room"> | Date | string
    targetWinPoints?: IntNullableFilter<"Room"> | number | null
    allowZeroCredit?: BoolFilter<"Room"> | boolean
    timerSec?: IntNullableFilter<"Room"> | number | null
    startedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    players?: RoomPlayerListRelationFilter
    matches?: MatchListRelationFilter
    stakes?: RoomStakeListRelationFilter
    TimelineEvent?: TimelineEventListRelationFilter
  }, "code">

  export type RoomOrderByWithAggregationInput = {
    code?: SortOrder
    gameId?: SortOrder
    hostUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    targetWinPoints?: SortOrderInput | SortOrder
    allowZeroCredit?: SortOrder
    timerSec?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"Room"> | string
    gameId?: StringWithAggregatesFilter<"Room"> | string
    hostUserId?: StringWithAggregatesFilter<"Room"> | string
    status?: StringWithAggregatesFilter<"Room"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
    targetWinPoints?: IntNullableWithAggregatesFilter<"Room"> | number | null
    allowZeroCredit?: BoolWithAggregatesFilter<"Room"> | boolean
    timerSec?: IntNullableWithAggregatesFilter<"Room"> | number | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"Room"> | Date | string | null
  }

  export type RoomPlayerWhereInput = {
    AND?: RoomPlayerWhereInput | RoomPlayerWhereInput[]
    OR?: RoomPlayerWhereInput[]
    NOT?: RoomPlayerWhereInput | RoomPlayerWhereInput[]
    roomCode?: StringFilter<"RoomPlayer"> | string
    userId?: StringFilter<"RoomPlayer"> | string
    joinedAt?: DateTimeFilter<"RoomPlayer"> | Date | string
    team?: EnumTeamSideNullableFilter<"RoomPlayer"> | $Enums.TeamSide | null
    isLeader?: BoolFilter<"RoomPlayer"> | boolean
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RoomPlayerOrderByWithRelationInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    team?: SortOrderInput | SortOrder
    isLeader?: SortOrder
    room?: RoomOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RoomPlayerWhereUniqueInput = Prisma.AtLeast<{
    roomCode_userId?: RoomPlayerRoomCodeUserIdCompoundUniqueInput
    AND?: RoomPlayerWhereInput | RoomPlayerWhereInput[]
    OR?: RoomPlayerWhereInput[]
    NOT?: RoomPlayerWhereInput | RoomPlayerWhereInput[]
    roomCode?: StringFilter<"RoomPlayer"> | string
    userId?: StringFilter<"RoomPlayer"> | string
    joinedAt?: DateTimeFilter<"RoomPlayer"> | Date | string
    team?: EnumTeamSideNullableFilter<"RoomPlayer"> | $Enums.TeamSide | null
    isLeader?: BoolFilter<"RoomPlayer"> | boolean
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "roomCode_userId">

  export type RoomPlayerOrderByWithAggregationInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    team?: SortOrderInput | SortOrder
    isLeader?: SortOrder
    _count?: RoomPlayerCountOrderByAggregateInput
    _max?: RoomPlayerMaxOrderByAggregateInput
    _min?: RoomPlayerMinOrderByAggregateInput
  }

  export type RoomPlayerScalarWhereWithAggregatesInput = {
    AND?: RoomPlayerScalarWhereWithAggregatesInput | RoomPlayerScalarWhereWithAggregatesInput[]
    OR?: RoomPlayerScalarWhereWithAggregatesInput[]
    NOT?: RoomPlayerScalarWhereWithAggregatesInput | RoomPlayerScalarWhereWithAggregatesInput[]
    roomCode?: StringWithAggregatesFilter<"RoomPlayer"> | string
    userId?: StringWithAggregatesFilter<"RoomPlayer"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"RoomPlayer"> | Date | string
    team?: EnumTeamSideNullableWithAggregatesFilter<"RoomPlayer"> | $Enums.TeamSide | null
    isLeader?: BoolWithAggregatesFilter<"RoomPlayer"> | boolean
  }

  export type RoomStakeWhereInput = {
    AND?: RoomStakeWhereInput | RoomStakeWhereInput[]
    OR?: RoomStakeWhereInput[]
    NOT?: RoomStakeWhereInput | RoomStakeWhereInput[]
    roomCode?: StringFilter<"RoomStake"> | string
    userId?: StringFilter<"RoomStake"> | string
    amount?: IntFilter<"RoomStake"> | number
    reservedAt?: DateTimeFilter<"RoomStake"> | Date | string
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RoomStakeOrderByWithRelationInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    reservedAt?: SortOrder
    room?: RoomOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RoomStakeWhereUniqueInput = Prisma.AtLeast<{
    roomCode_userId?: RoomStakeRoomCodeUserIdCompoundUniqueInput
    AND?: RoomStakeWhereInput | RoomStakeWhereInput[]
    OR?: RoomStakeWhereInput[]
    NOT?: RoomStakeWhereInput | RoomStakeWhereInput[]
    roomCode?: StringFilter<"RoomStake"> | string
    userId?: StringFilter<"RoomStake"> | string
    amount?: IntFilter<"RoomStake"> | number
    reservedAt?: DateTimeFilter<"RoomStake"> | Date | string
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "roomCode_userId">

  export type RoomStakeOrderByWithAggregationInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    reservedAt?: SortOrder
    _count?: RoomStakeCountOrderByAggregateInput
    _avg?: RoomStakeAvgOrderByAggregateInput
    _max?: RoomStakeMaxOrderByAggregateInput
    _min?: RoomStakeMinOrderByAggregateInput
    _sum?: RoomStakeSumOrderByAggregateInput
  }

  export type RoomStakeScalarWhereWithAggregatesInput = {
    AND?: RoomStakeScalarWhereWithAggregatesInput | RoomStakeScalarWhereWithAggregatesInput[]
    OR?: RoomStakeScalarWhereWithAggregatesInput[]
    NOT?: RoomStakeScalarWhereWithAggregatesInput | RoomStakeScalarWhereWithAggregatesInput[]
    roomCode?: StringWithAggregatesFilter<"RoomStake"> | string
    userId?: StringWithAggregatesFilter<"RoomStake"> | string
    amount?: IntWithAggregatesFilter<"RoomStake"> | number
    reservedAt?: DateTimeWithAggregatesFilter<"RoomStake"> | Date | string
  }

  export type SponsorWhereInput = {
    AND?: SponsorWhereInput | SponsorWhereInput[]
    OR?: SponsorWhereInput[]
    NOT?: SponsorWhereInput | SponsorWhereInput[]
    code?: StringFilter<"Sponsor"> | string
    name?: StringFilter<"Sponsor"> | string
    active?: BoolFilter<"Sponsor"> | boolean
    users?: UserSponsorListRelationFilter
  }

  export type SponsorOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    active?: SortOrder
    users?: UserSponsorOrderByRelationAggregateInput
  }

  export type SponsorWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: SponsorWhereInput | SponsorWhereInput[]
    OR?: SponsorWhereInput[]
    NOT?: SponsorWhereInput | SponsorWhereInput[]
    name?: StringFilter<"Sponsor"> | string
    active?: BoolFilter<"Sponsor"> | boolean
    users?: UserSponsorListRelationFilter
  }, "code">

  export type SponsorOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    active?: SortOrder
    _count?: SponsorCountOrderByAggregateInput
    _max?: SponsorMaxOrderByAggregateInput
    _min?: SponsorMinOrderByAggregateInput
  }

  export type SponsorScalarWhereWithAggregatesInput = {
    AND?: SponsorScalarWhereWithAggregatesInput | SponsorScalarWhereWithAggregatesInput[]
    OR?: SponsorScalarWhereWithAggregatesInput[]
    NOT?: SponsorScalarWhereWithAggregatesInput | SponsorScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"Sponsor"> | string
    name?: StringWithAggregatesFilter<"Sponsor"> | string
    active?: BoolWithAggregatesFilter<"Sponsor"> | boolean
  }

  export type UserSponsorWhereInput = {
    AND?: UserSponsorWhereInput | UserSponsorWhereInput[]
    OR?: UserSponsorWhereInput[]
    NOT?: UserSponsorWhereInput | UserSponsorWhereInput[]
    userId?: StringFilter<"UserSponsor"> | string
    sponsorCode?: StringFilter<"UserSponsor"> | string
    activatedAt?: DateTimeFilter<"UserSponsor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    sponsor?: XOR<SponsorScalarRelationFilter, SponsorWhereInput>
  }

  export type UserSponsorOrderByWithRelationInput = {
    userId?: SortOrder
    sponsorCode?: SortOrder
    activatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    sponsor?: SponsorOrderByWithRelationInput
  }

  export type UserSponsorWhereUniqueInput = Prisma.AtLeast<{
    userId_sponsorCode?: UserSponsorUserIdSponsorCodeCompoundUniqueInput
    AND?: UserSponsorWhereInput | UserSponsorWhereInput[]
    OR?: UserSponsorWhereInput[]
    NOT?: UserSponsorWhereInput | UserSponsorWhereInput[]
    userId?: StringFilter<"UserSponsor"> | string
    sponsorCode?: StringFilter<"UserSponsor"> | string
    activatedAt?: DateTimeFilter<"UserSponsor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    sponsor?: XOR<SponsorScalarRelationFilter, SponsorWhereInput>
  }, "userId_sponsorCode">

  export type UserSponsorOrderByWithAggregationInput = {
    userId?: SortOrder
    sponsorCode?: SortOrder
    activatedAt?: SortOrder
    _count?: UserSponsorCountOrderByAggregateInput
    _max?: UserSponsorMaxOrderByAggregateInput
    _min?: UserSponsorMinOrderByAggregateInput
  }

  export type UserSponsorScalarWhereWithAggregatesInput = {
    AND?: UserSponsorScalarWhereWithAggregatesInput | UserSponsorScalarWhereWithAggregatesInput[]
    OR?: UserSponsorScalarWhereWithAggregatesInput[]
    NOT?: UserSponsorScalarWhereWithAggregatesInput | UserSponsorScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserSponsor"> | string
    sponsorCode?: StringWithAggregatesFilter<"UserSponsor"> | string
    activatedAt?: DateTimeWithAggregatesFilter<"UserSponsor"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    roomCode?: StringNullableFilter<"Match"> | string | null
    gameId?: StringFilter<"Match"> | string
    createdAt?: DateTimeFilter<"Match"> | Date | string
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    parts?: MatchParticipantListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    roomCode?: SortOrderInput | SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    room?: RoomOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    parts?: MatchParticipantOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    roomCode?: StringNullableFilter<"Match"> | string | null
    gameId?: StringFilter<"Match"> | string
    createdAt?: DateTimeFilter<"Match"> | Date | string
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    parts?: MatchParticipantListRelationFilter
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    roomCode?: SortOrderInput | SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    roomCode?: StringNullableWithAggregatesFilter<"Match"> | string | null
    gameId?: StringWithAggregatesFilter<"Match"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
  }

  export type MatchParticipantWhereInput = {
    AND?: MatchParticipantWhereInput | MatchParticipantWhereInput[]
    OR?: MatchParticipantWhereInput[]
    NOT?: MatchParticipantWhereInput | MatchParticipantWhereInput[]
    matchId?: StringFilter<"MatchParticipant"> | string
    userId?: StringFilter<"MatchParticipant"> | string
    outcome?: EnumOutcomeFilter<"MatchParticipant"> | $Enums.Outcome
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MatchParticipantOrderByWithRelationInput = {
    matchId?: SortOrder
    userId?: SortOrder
    outcome?: SortOrder
    match?: MatchOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MatchParticipantWhereUniqueInput = Prisma.AtLeast<{
    matchId_userId?: MatchParticipantMatchIdUserIdCompoundUniqueInput
    AND?: MatchParticipantWhereInput | MatchParticipantWhereInput[]
    OR?: MatchParticipantWhereInput[]
    NOT?: MatchParticipantWhereInput | MatchParticipantWhereInput[]
    matchId?: StringFilter<"MatchParticipant"> | string
    userId?: StringFilter<"MatchParticipant"> | string
    outcome?: EnumOutcomeFilter<"MatchParticipant"> | $Enums.Outcome
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "matchId_userId">

  export type MatchParticipantOrderByWithAggregationInput = {
    matchId?: SortOrder
    userId?: SortOrder
    outcome?: SortOrder
    _count?: MatchParticipantCountOrderByAggregateInput
    _max?: MatchParticipantMaxOrderByAggregateInput
    _min?: MatchParticipantMinOrderByAggregateInput
  }

  export type MatchParticipantScalarWhereWithAggregatesInput = {
    AND?: MatchParticipantScalarWhereWithAggregatesInput | MatchParticipantScalarWhereWithAggregatesInput[]
    OR?: MatchParticipantScalarWhereWithAggregatesInput[]
    NOT?: MatchParticipantScalarWhereWithAggregatesInput | MatchParticipantScalarWhereWithAggregatesInput[]
    matchId?: StringWithAggregatesFilter<"MatchParticipant"> | string
    userId?: StringWithAggregatesFilter<"MatchParticipant"> | string
    outcome?: EnumOutcomeWithAggregatesFilter<"MatchParticipant"> | $Enums.Outcome
  }

  export type TimelineEventWhereInput = {
    AND?: TimelineEventWhereInput | TimelineEventWhereInput[]
    OR?: TimelineEventWhereInput[]
    NOT?: TimelineEventWhereInput | TimelineEventWhereInput[]
    id?: StringFilter<"TimelineEvent"> | string
    userId?: StringNullableFilter<"TimelineEvent"> | string | null
    roomCode?: StringNullableFilter<"TimelineEvent"> | string | null
    gameId?: StringNullableFilter<"TimelineEvent"> | string | null
    kind?: StringFilter<"TimelineEvent"> | string
    meta?: JsonNullableFilter<"TimelineEvent">
    createdAt?: DateTimeFilter<"TimelineEvent"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
  }

  export type TimelineEventOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    roomCode?: SortOrderInput | SortOrder
    gameId?: SortOrderInput | SortOrder
    kind?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    room?: RoomOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
  }

  export type TimelineEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TimelineEventWhereInput | TimelineEventWhereInput[]
    OR?: TimelineEventWhereInput[]
    NOT?: TimelineEventWhereInput | TimelineEventWhereInput[]
    userId?: StringNullableFilter<"TimelineEvent"> | string | null
    roomCode?: StringNullableFilter<"TimelineEvent"> | string | null
    gameId?: StringNullableFilter<"TimelineEvent"> | string | null
    kind?: StringFilter<"TimelineEvent"> | string
    meta?: JsonNullableFilter<"TimelineEvent">
    createdAt?: DateTimeFilter<"TimelineEvent"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    room?: XOR<RoomNullableScalarRelationFilter, RoomWhereInput> | null
    game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
  }, "id">

  export type TimelineEventOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    roomCode?: SortOrderInput | SortOrder
    gameId?: SortOrderInput | SortOrder
    kind?: SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TimelineEventCountOrderByAggregateInput
    _max?: TimelineEventMaxOrderByAggregateInput
    _min?: TimelineEventMinOrderByAggregateInput
  }

  export type TimelineEventScalarWhereWithAggregatesInput = {
    AND?: TimelineEventScalarWhereWithAggregatesInput | TimelineEventScalarWhereWithAggregatesInput[]
    OR?: TimelineEventScalarWhereWithAggregatesInput[]
    NOT?: TimelineEventScalarWhereWithAggregatesInput | TimelineEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TimelineEvent"> | string
    userId?: StringNullableWithAggregatesFilter<"TimelineEvent"> | string | null
    roomCode?: StringNullableWithAggregatesFilter<"TimelineEvent"> | string | null
    gameId?: StringNullableWithAggregatesFilter<"TimelineEvent"> | string | null
    kind?: StringWithAggregatesFilter<"TimelineEvent"> | string
    meta?: JsonNullableWithAggregatesFilter<"TimelineEvent">
    createdAt?: DateTimeWithAggregatesFilter<"TimelineEvent"> | Date | string
  }

  export type GameCreateInput = {
    id: string
    name: string
    category: string
    rooms?: RoomCreateNestedManyWithoutGameInput
    matches?: MatchCreateNestedManyWithoutGameInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id: string
    name: string
    category: string
    rooms?: RoomUncheckedCreateNestedManyWithoutGameInput
    matches?: MatchUncheckedCreateNestedManyWithoutGameInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUpdateManyWithoutGameNestedInput
    matches?: MatchUpdateManyWithoutGameNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUncheckedUpdateManyWithoutGameNestedInput
    matches?: MatchUncheckedUpdateManyWithoutGameNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id: string
    name: string
    category: string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantCreateNestedManyWithoutUserInput
    timeline?: TimelineEventCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomUncheckedCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerUncheckedCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorUncheckedCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantUncheckedCreateNestedManyWithoutUserInput
    timeline?: TimelineEventUncheckedCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUncheckedUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUncheckedUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUncheckedUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUncheckedUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUncheckedUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
  }

  export type RoomCreateInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    game: GameCreateNestedOneWithoutRoomsInput
    host: UserCreateNestedOneWithoutRoomsHostedInput
    players?: RoomPlayerCreateNestedManyWithoutRoomInput
    matches?: MatchCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    code: string
    gameId: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    players?: RoomPlayerUncheckedCreateNestedManyWithoutRoomInput
    matches?: MatchUncheckedCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeUncheckedCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutRoomsNestedInput
    host?: UserUpdateOneRequiredWithoutRoomsHostedNestedInput
    players?: RoomPlayerUpdateManyWithoutRoomNestedInput
    matches?: MatchUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput
    matches?: MatchUncheckedUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUncheckedUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    code: string
    gameId: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
  }

  export type RoomUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoomUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoomPlayerCreateInput = {
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
    room: RoomCreateNestedOneWithoutPlayersInput
    user: UserCreateNestedOneWithoutRoomPlayersInput
  }

  export type RoomPlayerUncheckedCreateInput = {
    roomCode: string
    userId: string
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
  }

  export type RoomPlayerUpdateInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutPlayersNestedInput
    user?: UserUpdateOneRequiredWithoutRoomPlayersNestedInput
  }

  export type RoomPlayerUncheckedUpdateInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomPlayerCreateManyInput = {
    roomCode: string
    userId: string
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
  }

  export type RoomPlayerUpdateManyMutationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomPlayerUncheckedUpdateManyInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomStakeCreateInput = {
    amount: number
    reservedAt?: Date | string
    room: RoomCreateNestedOneWithoutStakesInput
    user: UserCreateNestedOneWithoutRoomStakeInput
  }

  export type RoomStakeUncheckedCreateInput = {
    roomCode: string
    userId: string
    amount: number
    reservedAt?: Date | string
  }

  export type RoomStakeUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutStakesNestedInput
    user?: UserUpdateOneRequiredWithoutRoomStakeNestedInput
  }

  export type RoomStakeUncheckedUpdateInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStakeCreateManyInput = {
    roomCode: string
    userId: string
    amount: number
    reservedAt?: Date | string
  }

  export type RoomStakeUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStakeUncheckedUpdateManyInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SponsorCreateInput = {
    code: string
    name: string
    active?: boolean
    users?: UserSponsorCreateNestedManyWithoutSponsorInput
  }

  export type SponsorUncheckedCreateInput = {
    code: string
    name: string
    active?: boolean
    users?: UserSponsorUncheckedCreateNestedManyWithoutSponsorInput
  }

  export type SponsorUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    users?: UserSponsorUpdateManyWithoutSponsorNestedInput
  }

  export type SponsorUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    users?: UserSponsorUncheckedUpdateManyWithoutSponsorNestedInput
  }

  export type SponsorCreateManyInput = {
    code: string
    name: string
    active?: boolean
  }

  export type SponsorUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SponsorUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSponsorCreateInput = {
    activatedAt?: Date | string
    user: UserCreateNestedOneWithoutSponsorsInput
    sponsor: SponsorCreateNestedOneWithoutUsersInput
  }

  export type UserSponsorUncheckedCreateInput = {
    userId: string
    sponsorCode: string
    activatedAt?: Date | string
  }

  export type UserSponsorUpdateInput = {
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSponsorsNestedInput
    sponsor?: SponsorUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserSponsorUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    sponsorCode?: StringFieldUpdateOperationsInput | string
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSponsorCreateManyInput = {
    userId: string
    sponsorCode: string
    activatedAt?: Date | string
  }

  export type UserSponsorUpdateManyMutationInput = {
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSponsorUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    sponsorCode?: StringFieldUpdateOperationsInput | string
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    id?: string
    createdAt?: Date | string
    room?: RoomCreateNestedOneWithoutMatchesInput
    game: GameCreateNestedOneWithoutMatchesInput
    parts?: MatchParticipantCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    roomCode?: string | null
    gameId: string
    createdAt?: Date | string
    parts?: MatchParticipantUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneWithoutMatchesNestedInput
    game?: GameUpdateOneRequiredWithoutMatchesNestedInput
    parts?: MatchParticipantUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: MatchParticipantUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: string
    roomCode?: string | null
    gameId: string
    createdAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchParticipantCreateInput = {
    outcome: $Enums.Outcome
    match: MatchCreateNestedOneWithoutPartsInput
    user: UserCreateNestedOneWithoutMatchPartsInput
  }

  export type MatchParticipantUncheckedCreateInput = {
    matchId: string
    userId: string
    outcome: $Enums.Outcome
  }

  export type MatchParticipantUpdateInput = {
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
    match?: MatchUpdateOneRequiredWithoutPartsNestedInput
    user?: UserUpdateOneRequiredWithoutMatchPartsNestedInput
  }

  export type MatchParticipantUncheckedUpdateInput = {
    matchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }

  export type MatchParticipantCreateManyInput = {
    matchId: string
    userId: string
    outcome: $Enums.Outcome
  }

  export type MatchParticipantUpdateManyMutationInput = {
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }

  export type MatchParticipantUncheckedUpdateManyInput = {
    matchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }

  export type TimelineEventCreateInput = {
    id?: string
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTimelineInput
    room?: RoomCreateNestedOneWithoutTimelineEventInput
    game?: GameCreateNestedOneWithoutTimelineEventInput
  }

  export type TimelineEventUncheckedCreateInput = {
    id?: string
    userId?: string | null
    roomCode?: string | null
    gameId?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TimelineEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTimelineNestedInput
    room?: RoomUpdateOneWithoutTimelineEventNestedInput
    game?: GameUpdateOneWithoutTimelineEventNestedInput
  }

  export type TimelineEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventCreateManyInput = {
    id?: string
    userId?: string | null
    roomCode?: string | null
    gameId?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TimelineEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RoomListRelationFilter = {
    every?: RoomWhereInput
    some?: RoomWhereInput
    none?: RoomWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type TimelineEventListRelationFilter = {
    every?: TimelineEventWhereInput
    some?: TimelineEventWhereInput
    none?: TimelineEventWhereInput
  }

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TimelineEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RoomPlayerListRelationFilter = {
    every?: RoomPlayerWhereInput
    some?: RoomPlayerWhereInput
    none?: RoomPlayerWhereInput
  }

  export type UserSponsorListRelationFilter = {
    every?: UserSponsorWhereInput
    some?: UserSponsorWhereInput
    none?: UserSponsorWhereInput
  }

  export type MatchParticipantListRelationFilter = {
    every?: MatchParticipantWhereInput
    some?: MatchParticipantWhereInput
    none?: MatchParticipantWhereInput
  }

  export type RoomStakeListRelationFilter = {
    every?: RoomStakeWhereInput
    some?: RoomStakeWhereInput
    none?: RoomStakeWhereInput
  }

  export type RoomPlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSponsorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomStakeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    permanentScore?: SortOrder
    creditPoints?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    permanentScore?: SortOrder
    creditPoints?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    permanentScore?: SortOrder
    creditPoints?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    displayName?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    permanentScore?: SortOrder
    creditPoints?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    permanentScore?: SortOrder
    creditPoints?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RoomCountOrderByAggregateInput = {
    code?: SortOrder
    gameId?: SortOrder
    hostUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    targetWinPoints?: SortOrder
    allowZeroCredit?: SortOrder
    timerSec?: SortOrder
    startedAt?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    targetWinPoints?: SortOrder
    timerSec?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    code?: SortOrder
    gameId?: SortOrder
    hostUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    targetWinPoints?: SortOrder
    allowZeroCredit?: SortOrder
    timerSec?: SortOrder
    startedAt?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    code?: SortOrder
    gameId?: SortOrder
    hostUserId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    targetWinPoints?: SortOrder
    allowZeroCredit?: SortOrder
    timerSec?: SortOrder
    startedAt?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    targetWinPoints?: SortOrder
    timerSec?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumTeamSideNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamSide | EnumTeamSideFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTeamSideNullableFilter<$PrismaModel> | $Enums.TeamSide | null
  }

  export type RoomScalarRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type RoomPlayerRoomCodeUserIdCompoundUniqueInput = {
    roomCode: string
    userId: string
  }

  export type RoomPlayerCountOrderByAggregateInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    team?: SortOrder
    isLeader?: SortOrder
  }

  export type RoomPlayerMaxOrderByAggregateInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    team?: SortOrder
    isLeader?: SortOrder
  }

  export type RoomPlayerMinOrderByAggregateInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    joinedAt?: SortOrder
    team?: SortOrder
    isLeader?: SortOrder
  }

  export type EnumTeamSideNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamSide | EnumTeamSideFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTeamSideNullableWithAggregatesFilter<$PrismaModel> | $Enums.TeamSide | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTeamSideNullableFilter<$PrismaModel>
    _max?: NestedEnumTeamSideNullableFilter<$PrismaModel>
  }

  export type RoomStakeRoomCodeUserIdCompoundUniqueInput = {
    roomCode: string
    userId: string
  }

  export type RoomStakeCountOrderByAggregateInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    reservedAt?: SortOrder
  }

  export type RoomStakeAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type RoomStakeMaxOrderByAggregateInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    reservedAt?: SortOrder
  }

  export type RoomStakeMinOrderByAggregateInput = {
    roomCode?: SortOrder
    userId?: SortOrder
    amount?: SortOrder
    reservedAt?: SortOrder
  }

  export type RoomStakeSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type SponsorCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    active?: SortOrder
  }

  export type SponsorMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    active?: SortOrder
  }

  export type SponsorMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    active?: SortOrder
  }

  export type SponsorScalarRelationFilter = {
    is?: SponsorWhereInput
    isNot?: SponsorWhereInput
  }

  export type UserSponsorUserIdSponsorCodeCompoundUniqueInput = {
    userId: string
    sponsorCode: string
  }

  export type UserSponsorCountOrderByAggregateInput = {
    userId?: SortOrder
    sponsorCode?: SortOrder
    activatedAt?: SortOrder
  }

  export type UserSponsorMaxOrderByAggregateInput = {
    userId?: SortOrder
    sponsorCode?: SortOrder
    activatedAt?: SortOrder
  }

  export type UserSponsorMinOrderByAggregateInput = {
    userId?: SortOrder
    sponsorCode?: SortOrder
    activatedAt?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RoomNullableScalarRelationFilter = {
    is?: RoomWhereInput | null
    isNot?: RoomWhereInput | null
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    roomCode?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    roomCode?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    roomCode?: SortOrder
    gameId?: SortOrder
    createdAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumOutcomeFilter<$PrismaModel = never> = {
    equals?: $Enums.Outcome | EnumOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutcomeFilter<$PrismaModel> | $Enums.Outcome
  }

  export type MatchScalarRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type MatchParticipantMatchIdUserIdCompoundUniqueInput = {
    matchId: string
    userId: string
  }

  export type MatchParticipantCountOrderByAggregateInput = {
    matchId?: SortOrder
    userId?: SortOrder
    outcome?: SortOrder
  }

  export type MatchParticipantMaxOrderByAggregateInput = {
    matchId?: SortOrder
    userId?: SortOrder
    outcome?: SortOrder
  }

  export type MatchParticipantMinOrderByAggregateInput = {
    matchId?: SortOrder
    userId?: SortOrder
    outcome?: SortOrder
  }

  export type EnumOutcomeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Outcome | EnumOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutcomeWithAggregatesFilter<$PrismaModel> | $Enums.Outcome
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutcomeFilter<$PrismaModel>
    _max?: NestedEnumOutcomeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type GameNullableScalarRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type TimelineEventCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roomCode?: SortOrder
    gameId?: SortOrder
    kind?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type TimelineEventMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roomCode?: SortOrder
    gameId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
  }

  export type TimelineEventMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roomCode?: SortOrder
    gameId?: SortOrder
    kind?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type RoomCreateNestedManyWithoutGameInput = {
    create?: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput> | RoomCreateWithoutGameInput[] | RoomUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutGameInput | RoomCreateOrConnectWithoutGameInput[]
    createMany?: RoomCreateManyGameInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutGameInput = {
    create?: XOR<MatchCreateWithoutGameInput, MatchUncheckedCreateWithoutGameInput> | MatchCreateWithoutGameInput[] | MatchUncheckedCreateWithoutGameInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGameInput | MatchCreateOrConnectWithoutGameInput[]
    createMany?: MatchCreateManyGameInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TimelineEventCreateNestedManyWithoutGameInput = {
    create?: XOR<TimelineEventCreateWithoutGameInput, TimelineEventUncheckedCreateWithoutGameInput> | TimelineEventCreateWithoutGameInput[] | TimelineEventUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutGameInput | TimelineEventCreateOrConnectWithoutGameInput[]
    createMany?: TimelineEventCreateManyGameInputEnvelope
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput> | RoomCreateWithoutGameInput[] | RoomUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutGameInput | RoomCreateOrConnectWithoutGameInput[]
    createMany?: RoomCreateManyGameInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<MatchCreateWithoutGameInput, MatchUncheckedCreateWithoutGameInput> | MatchCreateWithoutGameInput[] | MatchUncheckedCreateWithoutGameInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGameInput | MatchCreateOrConnectWithoutGameInput[]
    createMany?: MatchCreateManyGameInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TimelineEventUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<TimelineEventCreateWithoutGameInput, TimelineEventUncheckedCreateWithoutGameInput> | TimelineEventCreateWithoutGameInput[] | TimelineEventUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutGameInput | TimelineEventCreateOrConnectWithoutGameInput[]
    createMany?: TimelineEventCreateManyGameInputEnvelope
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RoomUpdateManyWithoutGameNestedInput = {
    create?: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput> | RoomCreateWithoutGameInput[] | RoomUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutGameInput | RoomCreateOrConnectWithoutGameInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutGameInput | RoomUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: RoomCreateManyGameInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutGameInput | RoomUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutGameInput | RoomUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutGameNestedInput = {
    create?: XOR<MatchCreateWithoutGameInput, MatchUncheckedCreateWithoutGameInput> | MatchCreateWithoutGameInput[] | MatchUncheckedCreateWithoutGameInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGameInput | MatchCreateOrConnectWithoutGameInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutGameInput | MatchUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: MatchCreateManyGameInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutGameInput | MatchUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutGameInput | MatchUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TimelineEventUpdateManyWithoutGameNestedInput = {
    create?: XOR<TimelineEventCreateWithoutGameInput, TimelineEventUncheckedCreateWithoutGameInput> | TimelineEventCreateWithoutGameInput[] | TimelineEventUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutGameInput | TimelineEventCreateOrConnectWithoutGameInput[]
    upsert?: TimelineEventUpsertWithWhereUniqueWithoutGameInput | TimelineEventUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: TimelineEventCreateManyGameInputEnvelope
    set?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    disconnect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    delete?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    update?: TimelineEventUpdateWithWhereUniqueWithoutGameInput | TimelineEventUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: TimelineEventUpdateManyWithWhereWithoutGameInput | TimelineEventUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput> | RoomCreateWithoutGameInput[] | RoomUncheckedCreateWithoutGameInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutGameInput | RoomCreateOrConnectWithoutGameInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutGameInput | RoomUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: RoomCreateManyGameInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutGameInput | RoomUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutGameInput | RoomUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<MatchCreateWithoutGameInput, MatchUncheckedCreateWithoutGameInput> | MatchCreateWithoutGameInput[] | MatchUncheckedCreateWithoutGameInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutGameInput | MatchCreateOrConnectWithoutGameInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutGameInput | MatchUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: MatchCreateManyGameInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutGameInput | MatchUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutGameInput | MatchUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TimelineEventUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<TimelineEventCreateWithoutGameInput, TimelineEventUncheckedCreateWithoutGameInput> | TimelineEventCreateWithoutGameInput[] | TimelineEventUncheckedCreateWithoutGameInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutGameInput | TimelineEventCreateOrConnectWithoutGameInput[]
    upsert?: TimelineEventUpsertWithWhereUniqueWithoutGameInput | TimelineEventUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: TimelineEventCreateManyGameInputEnvelope
    set?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    disconnect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    delete?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    update?: TimelineEventUpdateWithWhereUniqueWithoutGameInput | TimelineEventUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: TimelineEventUpdateManyWithWhereWithoutGameInput | TimelineEventUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
  }

  export type RoomCreateNestedManyWithoutHostInput = {
    create?: XOR<RoomCreateWithoutHostInput, RoomUncheckedCreateWithoutHostInput> | RoomCreateWithoutHostInput[] | RoomUncheckedCreateWithoutHostInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutHostInput | RoomCreateOrConnectWithoutHostInput[]
    createMany?: RoomCreateManyHostInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomPlayerCreateNestedManyWithoutUserInput = {
    create?: XOR<RoomPlayerCreateWithoutUserInput, RoomPlayerUncheckedCreateWithoutUserInput> | RoomPlayerCreateWithoutUserInput[] | RoomPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutUserInput | RoomPlayerCreateOrConnectWithoutUserInput[]
    createMany?: RoomPlayerCreateManyUserInputEnvelope
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
  }

  export type UserSponsorCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSponsorCreateWithoutUserInput, UserSponsorUncheckedCreateWithoutUserInput> | UserSponsorCreateWithoutUserInput[] | UserSponsorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutUserInput | UserSponsorCreateOrConnectWithoutUserInput[]
    createMany?: UserSponsorCreateManyUserInputEnvelope
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
  }

  export type MatchParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchParticipantCreateWithoutUserInput, MatchParticipantUncheckedCreateWithoutUserInput> | MatchParticipantCreateWithoutUserInput[] | MatchParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutUserInput | MatchParticipantCreateOrConnectWithoutUserInput[]
    createMany?: MatchParticipantCreateManyUserInputEnvelope
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
  }

  export type TimelineEventCreateNestedManyWithoutUserInput = {
    create?: XOR<TimelineEventCreateWithoutUserInput, TimelineEventUncheckedCreateWithoutUserInput> | TimelineEventCreateWithoutUserInput[] | TimelineEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutUserInput | TimelineEventCreateOrConnectWithoutUserInput[]
    createMany?: TimelineEventCreateManyUserInputEnvelope
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
  }

  export type RoomStakeCreateNestedManyWithoutUserInput = {
    create?: XOR<RoomStakeCreateWithoutUserInput, RoomStakeUncheckedCreateWithoutUserInput> | RoomStakeCreateWithoutUserInput[] | RoomStakeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutUserInput | RoomStakeCreateOrConnectWithoutUserInput[]
    createMany?: RoomStakeCreateManyUserInputEnvelope
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<RoomCreateWithoutHostInput, RoomUncheckedCreateWithoutHostInput> | RoomCreateWithoutHostInput[] | RoomUncheckedCreateWithoutHostInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutHostInput | RoomCreateOrConnectWithoutHostInput[]
    createMany?: RoomCreateManyHostInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type RoomPlayerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoomPlayerCreateWithoutUserInput, RoomPlayerUncheckedCreateWithoutUserInput> | RoomPlayerCreateWithoutUserInput[] | RoomPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutUserInput | RoomPlayerCreateOrConnectWithoutUserInput[]
    createMany?: RoomPlayerCreateManyUserInputEnvelope
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
  }

  export type UserSponsorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSponsorCreateWithoutUserInput, UserSponsorUncheckedCreateWithoutUserInput> | UserSponsorCreateWithoutUserInput[] | UserSponsorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutUserInput | UserSponsorCreateOrConnectWithoutUserInput[]
    createMany?: UserSponsorCreateManyUserInputEnvelope
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
  }

  export type MatchParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchParticipantCreateWithoutUserInput, MatchParticipantUncheckedCreateWithoutUserInput> | MatchParticipantCreateWithoutUserInput[] | MatchParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutUserInput | MatchParticipantCreateOrConnectWithoutUserInput[]
    createMany?: MatchParticipantCreateManyUserInputEnvelope
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
  }

  export type TimelineEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TimelineEventCreateWithoutUserInput, TimelineEventUncheckedCreateWithoutUserInput> | TimelineEventCreateWithoutUserInput[] | TimelineEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutUserInput | TimelineEventCreateOrConnectWithoutUserInput[]
    createMany?: TimelineEventCreateManyUserInputEnvelope
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
  }

  export type RoomStakeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RoomStakeCreateWithoutUserInput, RoomStakeUncheckedCreateWithoutUserInput> | RoomStakeCreateWithoutUserInput[] | RoomStakeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutUserInput | RoomStakeCreateOrConnectWithoutUserInput[]
    createMany?: RoomStakeCreateManyUserInputEnvelope
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RoomUpdateManyWithoutHostNestedInput = {
    create?: XOR<RoomCreateWithoutHostInput, RoomUncheckedCreateWithoutHostInput> | RoomCreateWithoutHostInput[] | RoomUncheckedCreateWithoutHostInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutHostInput | RoomCreateOrConnectWithoutHostInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutHostInput | RoomUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: RoomCreateManyHostInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutHostInput | RoomUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutHostInput | RoomUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type RoomPlayerUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoomPlayerCreateWithoutUserInput, RoomPlayerUncheckedCreateWithoutUserInput> | RoomPlayerCreateWithoutUserInput[] | RoomPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutUserInput | RoomPlayerCreateOrConnectWithoutUserInput[]
    upsert?: RoomPlayerUpsertWithWhereUniqueWithoutUserInput | RoomPlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoomPlayerCreateManyUserInputEnvelope
    set?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    disconnect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    delete?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    update?: RoomPlayerUpdateWithWhereUniqueWithoutUserInput | RoomPlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoomPlayerUpdateManyWithWhereWithoutUserInput | RoomPlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoomPlayerScalarWhereInput | RoomPlayerScalarWhereInput[]
  }

  export type UserSponsorUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSponsorCreateWithoutUserInput, UserSponsorUncheckedCreateWithoutUserInput> | UserSponsorCreateWithoutUserInput[] | UserSponsorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutUserInput | UserSponsorCreateOrConnectWithoutUserInput[]
    upsert?: UserSponsorUpsertWithWhereUniqueWithoutUserInput | UserSponsorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSponsorCreateManyUserInputEnvelope
    set?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    disconnect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    delete?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    update?: UserSponsorUpdateWithWhereUniqueWithoutUserInput | UserSponsorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSponsorUpdateManyWithWhereWithoutUserInput | UserSponsorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSponsorScalarWhereInput | UserSponsorScalarWhereInput[]
  }

  export type MatchParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchParticipantCreateWithoutUserInput, MatchParticipantUncheckedCreateWithoutUserInput> | MatchParticipantCreateWithoutUserInput[] | MatchParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutUserInput | MatchParticipantCreateOrConnectWithoutUserInput[]
    upsert?: MatchParticipantUpsertWithWhereUniqueWithoutUserInput | MatchParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchParticipantCreateManyUserInputEnvelope
    set?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    disconnect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    delete?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    update?: MatchParticipantUpdateWithWhereUniqueWithoutUserInput | MatchParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchParticipantUpdateManyWithWhereWithoutUserInput | MatchParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchParticipantScalarWhereInput | MatchParticipantScalarWhereInput[]
  }

  export type TimelineEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimelineEventCreateWithoutUserInput, TimelineEventUncheckedCreateWithoutUserInput> | TimelineEventCreateWithoutUserInput[] | TimelineEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutUserInput | TimelineEventCreateOrConnectWithoutUserInput[]
    upsert?: TimelineEventUpsertWithWhereUniqueWithoutUserInput | TimelineEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimelineEventCreateManyUserInputEnvelope
    set?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    disconnect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    delete?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    update?: TimelineEventUpdateWithWhereUniqueWithoutUserInput | TimelineEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimelineEventUpdateManyWithWhereWithoutUserInput | TimelineEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
  }

  export type RoomStakeUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoomStakeCreateWithoutUserInput, RoomStakeUncheckedCreateWithoutUserInput> | RoomStakeCreateWithoutUserInput[] | RoomStakeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutUserInput | RoomStakeCreateOrConnectWithoutUserInput[]
    upsert?: RoomStakeUpsertWithWhereUniqueWithoutUserInput | RoomStakeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoomStakeCreateManyUserInputEnvelope
    set?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    disconnect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    delete?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    update?: RoomStakeUpdateWithWhereUniqueWithoutUserInput | RoomStakeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoomStakeUpdateManyWithWhereWithoutUserInput | RoomStakeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoomStakeScalarWhereInput | RoomStakeScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<RoomCreateWithoutHostInput, RoomUncheckedCreateWithoutHostInput> | RoomCreateWithoutHostInput[] | RoomUncheckedCreateWithoutHostInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutHostInput | RoomCreateOrConnectWithoutHostInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutHostInput | RoomUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: RoomCreateManyHostInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutHostInput | RoomUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutHostInput | RoomUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type RoomPlayerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoomPlayerCreateWithoutUserInput, RoomPlayerUncheckedCreateWithoutUserInput> | RoomPlayerCreateWithoutUserInput[] | RoomPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutUserInput | RoomPlayerCreateOrConnectWithoutUserInput[]
    upsert?: RoomPlayerUpsertWithWhereUniqueWithoutUserInput | RoomPlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoomPlayerCreateManyUserInputEnvelope
    set?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    disconnect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    delete?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    update?: RoomPlayerUpdateWithWhereUniqueWithoutUserInput | RoomPlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoomPlayerUpdateManyWithWhereWithoutUserInput | RoomPlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoomPlayerScalarWhereInput | RoomPlayerScalarWhereInput[]
  }

  export type UserSponsorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSponsorCreateWithoutUserInput, UserSponsorUncheckedCreateWithoutUserInput> | UserSponsorCreateWithoutUserInput[] | UserSponsorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutUserInput | UserSponsorCreateOrConnectWithoutUserInput[]
    upsert?: UserSponsorUpsertWithWhereUniqueWithoutUserInput | UserSponsorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSponsorCreateManyUserInputEnvelope
    set?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    disconnect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    delete?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    update?: UserSponsorUpdateWithWhereUniqueWithoutUserInput | UserSponsorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSponsorUpdateManyWithWhereWithoutUserInput | UserSponsorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSponsorScalarWhereInput | UserSponsorScalarWhereInput[]
  }

  export type MatchParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchParticipantCreateWithoutUserInput, MatchParticipantUncheckedCreateWithoutUserInput> | MatchParticipantCreateWithoutUserInput[] | MatchParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutUserInput | MatchParticipantCreateOrConnectWithoutUserInput[]
    upsert?: MatchParticipantUpsertWithWhereUniqueWithoutUserInput | MatchParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchParticipantCreateManyUserInputEnvelope
    set?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    disconnect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    delete?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    update?: MatchParticipantUpdateWithWhereUniqueWithoutUserInput | MatchParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchParticipantUpdateManyWithWhereWithoutUserInput | MatchParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchParticipantScalarWhereInput | MatchParticipantScalarWhereInput[]
  }

  export type TimelineEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TimelineEventCreateWithoutUserInput, TimelineEventUncheckedCreateWithoutUserInput> | TimelineEventCreateWithoutUserInput[] | TimelineEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutUserInput | TimelineEventCreateOrConnectWithoutUserInput[]
    upsert?: TimelineEventUpsertWithWhereUniqueWithoutUserInput | TimelineEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TimelineEventCreateManyUserInputEnvelope
    set?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    disconnect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    delete?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    update?: TimelineEventUpdateWithWhereUniqueWithoutUserInput | TimelineEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TimelineEventUpdateManyWithWhereWithoutUserInput | TimelineEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
  }

  export type RoomStakeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RoomStakeCreateWithoutUserInput, RoomStakeUncheckedCreateWithoutUserInput> | RoomStakeCreateWithoutUserInput[] | RoomStakeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutUserInput | RoomStakeCreateOrConnectWithoutUserInput[]
    upsert?: RoomStakeUpsertWithWhereUniqueWithoutUserInput | RoomStakeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RoomStakeCreateManyUserInputEnvelope
    set?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    disconnect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    delete?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    update?: RoomStakeUpdateWithWhereUniqueWithoutUserInput | RoomStakeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RoomStakeUpdateManyWithWhereWithoutUserInput | RoomStakeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RoomStakeScalarWhereInput | RoomStakeScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutRoomsInput = {
    create?: XOR<GameCreateWithoutRoomsInput, GameUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: GameCreateOrConnectWithoutRoomsInput
    connect?: GameWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRoomsHostedInput = {
    create?: XOR<UserCreateWithoutRoomsHostedInput, UserUncheckedCreateWithoutRoomsHostedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsHostedInput
    connect?: UserWhereUniqueInput
  }

  export type RoomPlayerCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomPlayerCreateWithoutRoomInput, RoomPlayerUncheckedCreateWithoutRoomInput> | RoomPlayerCreateWithoutRoomInput[] | RoomPlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutRoomInput | RoomPlayerCreateOrConnectWithoutRoomInput[]
    createMany?: RoomPlayerCreateManyRoomInputEnvelope
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutRoomInput = {
    create?: XOR<MatchCreateWithoutRoomInput, MatchUncheckedCreateWithoutRoomInput> | MatchCreateWithoutRoomInput[] | MatchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRoomInput | MatchCreateOrConnectWithoutRoomInput[]
    createMany?: MatchCreateManyRoomInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type RoomStakeCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomStakeCreateWithoutRoomInput, RoomStakeUncheckedCreateWithoutRoomInput> | RoomStakeCreateWithoutRoomInput[] | RoomStakeUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutRoomInput | RoomStakeCreateOrConnectWithoutRoomInput[]
    createMany?: RoomStakeCreateManyRoomInputEnvelope
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
  }

  export type TimelineEventCreateNestedManyWithoutRoomInput = {
    create?: XOR<TimelineEventCreateWithoutRoomInput, TimelineEventUncheckedCreateWithoutRoomInput> | TimelineEventCreateWithoutRoomInput[] | TimelineEventUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutRoomInput | TimelineEventCreateOrConnectWithoutRoomInput[]
    createMany?: TimelineEventCreateManyRoomInputEnvelope
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
  }

  export type RoomPlayerUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomPlayerCreateWithoutRoomInput, RoomPlayerUncheckedCreateWithoutRoomInput> | RoomPlayerCreateWithoutRoomInput[] | RoomPlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutRoomInput | RoomPlayerCreateOrConnectWithoutRoomInput[]
    createMany?: RoomPlayerCreateManyRoomInputEnvelope
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<MatchCreateWithoutRoomInput, MatchUncheckedCreateWithoutRoomInput> | MatchCreateWithoutRoomInput[] | MatchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRoomInput | MatchCreateOrConnectWithoutRoomInput[]
    createMany?: MatchCreateManyRoomInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type RoomStakeUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<RoomStakeCreateWithoutRoomInput, RoomStakeUncheckedCreateWithoutRoomInput> | RoomStakeCreateWithoutRoomInput[] | RoomStakeUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutRoomInput | RoomStakeCreateOrConnectWithoutRoomInput[]
    createMany?: RoomStakeCreateManyRoomInputEnvelope
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
  }

  export type TimelineEventUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<TimelineEventCreateWithoutRoomInput, TimelineEventUncheckedCreateWithoutRoomInput> | TimelineEventCreateWithoutRoomInput[] | TimelineEventUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutRoomInput | TimelineEventCreateOrConnectWithoutRoomInput[]
    createMany?: TimelineEventCreateManyRoomInputEnvelope
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type GameUpdateOneRequiredWithoutRoomsNestedInput = {
    create?: XOR<GameCreateWithoutRoomsInput, GameUncheckedCreateWithoutRoomsInput>
    connectOrCreate?: GameCreateOrConnectWithoutRoomsInput
    upsert?: GameUpsertWithoutRoomsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutRoomsInput, GameUpdateWithoutRoomsInput>, GameUncheckedUpdateWithoutRoomsInput>
  }

  export type UserUpdateOneRequiredWithoutRoomsHostedNestedInput = {
    create?: XOR<UserCreateWithoutRoomsHostedInput, UserUncheckedCreateWithoutRoomsHostedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsHostedInput
    upsert?: UserUpsertWithoutRoomsHostedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoomsHostedInput, UserUpdateWithoutRoomsHostedInput>, UserUncheckedUpdateWithoutRoomsHostedInput>
  }

  export type RoomPlayerUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomPlayerCreateWithoutRoomInput, RoomPlayerUncheckedCreateWithoutRoomInput> | RoomPlayerCreateWithoutRoomInput[] | RoomPlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutRoomInput | RoomPlayerCreateOrConnectWithoutRoomInput[]
    upsert?: RoomPlayerUpsertWithWhereUniqueWithoutRoomInput | RoomPlayerUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomPlayerCreateManyRoomInputEnvelope
    set?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    disconnect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    delete?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    update?: RoomPlayerUpdateWithWhereUniqueWithoutRoomInput | RoomPlayerUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomPlayerUpdateManyWithWhereWithoutRoomInput | RoomPlayerUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomPlayerScalarWhereInput | RoomPlayerScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutRoomNestedInput = {
    create?: XOR<MatchCreateWithoutRoomInput, MatchUncheckedCreateWithoutRoomInput> | MatchCreateWithoutRoomInput[] | MatchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRoomInput | MatchCreateOrConnectWithoutRoomInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutRoomInput | MatchUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: MatchCreateManyRoomInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutRoomInput | MatchUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutRoomInput | MatchUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type RoomStakeUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomStakeCreateWithoutRoomInput, RoomStakeUncheckedCreateWithoutRoomInput> | RoomStakeCreateWithoutRoomInput[] | RoomStakeUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutRoomInput | RoomStakeCreateOrConnectWithoutRoomInput[]
    upsert?: RoomStakeUpsertWithWhereUniqueWithoutRoomInput | RoomStakeUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomStakeCreateManyRoomInputEnvelope
    set?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    disconnect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    delete?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    update?: RoomStakeUpdateWithWhereUniqueWithoutRoomInput | RoomStakeUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomStakeUpdateManyWithWhereWithoutRoomInput | RoomStakeUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomStakeScalarWhereInput | RoomStakeScalarWhereInput[]
  }

  export type TimelineEventUpdateManyWithoutRoomNestedInput = {
    create?: XOR<TimelineEventCreateWithoutRoomInput, TimelineEventUncheckedCreateWithoutRoomInput> | TimelineEventCreateWithoutRoomInput[] | TimelineEventUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutRoomInput | TimelineEventCreateOrConnectWithoutRoomInput[]
    upsert?: TimelineEventUpsertWithWhereUniqueWithoutRoomInput | TimelineEventUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: TimelineEventCreateManyRoomInputEnvelope
    set?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    disconnect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    delete?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    update?: TimelineEventUpdateWithWhereUniqueWithoutRoomInput | TimelineEventUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: TimelineEventUpdateManyWithWhereWithoutRoomInput | TimelineEventUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
  }

  export type RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomPlayerCreateWithoutRoomInput, RoomPlayerUncheckedCreateWithoutRoomInput> | RoomPlayerCreateWithoutRoomInput[] | RoomPlayerUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomPlayerCreateOrConnectWithoutRoomInput | RoomPlayerCreateOrConnectWithoutRoomInput[]
    upsert?: RoomPlayerUpsertWithWhereUniqueWithoutRoomInput | RoomPlayerUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomPlayerCreateManyRoomInputEnvelope
    set?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    disconnect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    delete?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    connect?: RoomPlayerWhereUniqueInput | RoomPlayerWhereUniqueInput[]
    update?: RoomPlayerUpdateWithWhereUniqueWithoutRoomInput | RoomPlayerUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomPlayerUpdateManyWithWhereWithoutRoomInput | RoomPlayerUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomPlayerScalarWhereInput | RoomPlayerScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<MatchCreateWithoutRoomInput, MatchUncheckedCreateWithoutRoomInput> | MatchCreateWithoutRoomInput[] | MatchUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutRoomInput | MatchCreateOrConnectWithoutRoomInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutRoomInput | MatchUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: MatchCreateManyRoomInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutRoomInput | MatchUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutRoomInput | MatchUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type RoomStakeUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<RoomStakeCreateWithoutRoomInput, RoomStakeUncheckedCreateWithoutRoomInput> | RoomStakeCreateWithoutRoomInput[] | RoomStakeUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: RoomStakeCreateOrConnectWithoutRoomInput | RoomStakeCreateOrConnectWithoutRoomInput[]
    upsert?: RoomStakeUpsertWithWhereUniqueWithoutRoomInput | RoomStakeUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: RoomStakeCreateManyRoomInputEnvelope
    set?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    disconnect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    delete?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    connect?: RoomStakeWhereUniqueInput | RoomStakeWhereUniqueInput[]
    update?: RoomStakeUpdateWithWhereUniqueWithoutRoomInput | RoomStakeUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: RoomStakeUpdateManyWithWhereWithoutRoomInput | RoomStakeUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: RoomStakeScalarWhereInput | RoomStakeScalarWhereInput[]
  }

  export type TimelineEventUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<TimelineEventCreateWithoutRoomInput, TimelineEventUncheckedCreateWithoutRoomInput> | TimelineEventCreateWithoutRoomInput[] | TimelineEventUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: TimelineEventCreateOrConnectWithoutRoomInput | TimelineEventCreateOrConnectWithoutRoomInput[]
    upsert?: TimelineEventUpsertWithWhereUniqueWithoutRoomInput | TimelineEventUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: TimelineEventCreateManyRoomInputEnvelope
    set?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    disconnect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    delete?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    connect?: TimelineEventWhereUniqueInput | TimelineEventWhereUniqueInput[]
    update?: TimelineEventUpdateWithWhereUniqueWithoutRoomInput | TimelineEventUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: TimelineEventUpdateManyWithWhereWithoutRoomInput | TimelineEventUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
  }

  export type RoomCreateNestedOneWithoutPlayersInput = {
    create?: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutPlayersInput
    connect?: RoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRoomPlayersInput = {
    create?: XOR<UserCreateWithoutRoomPlayersInput, UserUncheckedCreateWithoutRoomPlayersInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomPlayersInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumTeamSideFieldUpdateOperationsInput = {
    set?: $Enums.TeamSide | null
  }

  export type RoomUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: RoomCreateOrConnectWithoutPlayersInput
    upsert?: RoomUpsertWithoutPlayersInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutPlayersInput, RoomUpdateWithoutPlayersInput>, RoomUncheckedUpdateWithoutPlayersInput>
  }

  export type UserUpdateOneRequiredWithoutRoomPlayersNestedInput = {
    create?: XOR<UserCreateWithoutRoomPlayersInput, UserUncheckedCreateWithoutRoomPlayersInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomPlayersInput
    upsert?: UserUpsertWithoutRoomPlayersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoomPlayersInput, UserUpdateWithoutRoomPlayersInput>, UserUncheckedUpdateWithoutRoomPlayersInput>
  }

  export type RoomCreateNestedOneWithoutStakesInput = {
    create?: XOR<RoomCreateWithoutStakesInput, RoomUncheckedCreateWithoutStakesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutStakesInput
    connect?: RoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRoomStakeInput = {
    create?: XOR<UserCreateWithoutRoomStakeInput, UserUncheckedCreateWithoutRoomStakeInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomStakeInput
    connect?: UserWhereUniqueInput
  }

  export type RoomUpdateOneRequiredWithoutStakesNestedInput = {
    create?: XOR<RoomCreateWithoutStakesInput, RoomUncheckedCreateWithoutStakesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutStakesInput
    upsert?: RoomUpsertWithoutStakesInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutStakesInput, RoomUpdateWithoutStakesInput>, RoomUncheckedUpdateWithoutStakesInput>
  }

  export type UserUpdateOneRequiredWithoutRoomStakeNestedInput = {
    create?: XOR<UserCreateWithoutRoomStakeInput, UserUncheckedCreateWithoutRoomStakeInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomStakeInput
    upsert?: UserUpsertWithoutRoomStakeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoomStakeInput, UserUpdateWithoutRoomStakeInput>, UserUncheckedUpdateWithoutRoomStakeInput>
  }

  export type UserSponsorCreateNestedManyWithoutSponsorInput = {
    create?: XOR<UserSponsorCreateWithoutSponsorInput, UserSponsorUncheckedCreateWithoutSponsorInput> | UserSponsorCreateWithoutSponsorInput[] | UserSponsorUncheckedCreateWithoutSponsorInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutSponsorInput | UserSponsorCreateOrConnectWithoutSponsorInput[]
    createMany?: UserSponsorCreateManySponsorInputEnvelope
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
  }

  export type UserSponsorUncheckedCreateNestedManyWithoutSponsorInput = {
    create?: XOR<UserSponsorCreateWithoutSponsorInput, UserSponsorUncheckedCreateWithoutSponsorInput> | UserSponsorCreateWithoutSponsorInput[] | UserSponsorUncheckedCreateWithoutSponsorInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutSponsorInput | UserSponsorCreateOrConnectWithoutSponsorInput[]
    createMany?: UserSponsorCreateManySponsorInputEnvelope
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
  }

  export type UserSponsorUpdateManyWithoutSponsorNestedInput = {
    create?: XOR<UserSponsorCreateWithoutSponsorInput, UserSponsorUncheckedCreateWithoutSponsorInput> | UserSponsorCreateWithoutSponsorInput[] | UserSponsorUncheckedCreateWithoutSponsorInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutSponsorInput | UserSponsorCreateOrConnectWithoutSponsorInput[]
    upsert?: UserSponsorUpsertWithWhereUniqueWithoutSponsorInput | UserSponsorUpsertWithWhereUniqueWithoutSponsorInput[]
    createMany?: UserSponsorCreateManySponsorInputEnvelope
    set?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    disconnect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    delete?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    update?: UserSponsorUpdateWithWhereUniqueWithoutSponsorInput | UserSponsorUpdateWithWhereUniqueWithoutSponsorInput[]
    updateMany?: UserSponsorUpdateManyWithWhereWithoutSponsorInput | UserSponsorUpdateManyWithWhereWithoutSponsorInput[]
    deleteMany?: UserSponsorScalarWhereInput | UserSponsorScalarWhereInput[]
  }

  export type UserSponsorUncheckedUpdateManyWithoutSponsorNestedInput = {
    create?: XOR<UserSponsorCreateWithoutSponsorInput, UserSponsorUncheckedCreateWithoutSponsorInput> | UserSponsorCreateWithoutSponsorInput[] | UserSponsorUncheckedCreateWithoutSponsorInput[]
    connectOrCreate?: UserSponsorCreateOrConnectWithoutSponsorInput | UserSponsorCreateOrConnectWithoutSponsorInput[]
    upsert?: UserSponsorUpsertWithWhereUniqueWithoutSponsorInput | UserSponsorUpsertWithWhereUniqueWithoutSponsorInput[]
    createMany?: UserSponsorCreateManySponsorInputEnvelope
    set?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    disconnect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    delete?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    connect?: UserSponsorWhereUniqueInput | UserSponsorWhereUniqueInput[]
    update?: UserSponsorUpdateWithWhereUniqueWithoutSponsorInput | UserSponsorUpdateWithWhereUniqueWithoutSponsorInput[]
    updateMany?: UserSponsorUpdateManyWithWhereWithoutSponsorInput | UserSponsorUpdateManyWithWhereWithoutSponsorInput[]
    deleteMany?: UserSponsorScalarWhereInput | UserSponsorScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSponsorsInput = {
    create?: XOR<UserCreateWithoutSponsorsInput, UserUncheckedCreateWithoutSponsorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSponsorsInput
    connect?: UserWhereUniqueInput
  }

  export type SponsorCreateNestedOneWithoutUsersInput = {
    create?: XOR<SponsorCreateWithoutUsersInput, SponsorUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SponsorCreateOrConnectWithoutUsersInput
    connect?: SponsorWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSponsorsNestedInput = {
    create?: XOR<UserCreateWithoutSponsorsInput, UserUncheckedCreateWithoutSponsorsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSponsorsInput
    upsert?: UserUpsertWithoutSponsorsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSponsorsInput, UserUpdateWithoutSponsorsInput>, UserUncheckedUpdateWithoutSponsorsInput>
  }

  export type SponsorUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<SponsorCreateWithoutUsersInput, SponsorUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SponsorCreateOrConnectWithoutUsersInput
    upsert?: SponsorUpsertWithoutUsersInput
    connect?: SponsorWhereUniqueInput
    update?: XOR<XOR<SponsorUpdateToOneWithWhereWithoutUsersInput, SponsorUpdateWithoutUsersInput>, SponsorUncheckedUpdateWithoutUsersInput>
  }

  export type RoomCreateNestedOneWithoutMatchesInput = {
    create?: XOR<RoomCreateWithoutMatchesInput, RoomUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMatchesInput
    connect?: RoomWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutMatchesInput = {
    create?: XOR<GameCreateWithoutMatchesInput, GameUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: GameCreateOrConnectWithoutMatchesInput
    connect?: GameWhereUniqueInput
  }

  export type MatchParticipantCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchParticipantCreateWithoutMatchInput, MatchParticipantUncheckedCreateWithoutMatchInput> | MatchParticipantCreateWithoutMatchInput[] | MatchParticipantUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutMatchInput | MatchParticipantCreateOrConnectWithoutMatchInput[]
    createMany?: MatchParticipantCreateManyMatchInputEnvelope
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
  }

  export type MatchParticipantUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchParticipantCreateWithoutMatchInput, MatchParticipantUncheckedCreateWithoutMatchInput> | MatchParticipantCreateWithoutMatchInput[] | MatchParticipantUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutMatchInput | MatchParticipantCreateOrConnectWithoutMatchInput[]
    createMany?: MatchParticipantCreateManyMatchInputEnvelope
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
  }

  export type RoomUpdateOneWithoutMatchesNestedInput = {
    create?: XOR<RoomCreateWithoutMatchesInput, RoomUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: RoomCreateOrConnectWithoutMatchesInput
    upsert?: RoomUpsertWithoutMatchesInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutMatchesInput, RoomUpdateWithoutMatchesInput>, RoomUncheckedUpdateWithoutMatchesInput>
  }

  export type GameUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<GameCreateWithoutMatchesInput, GameUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: GameCreateOrConnectWithoutMatchesInput
    upsert?: GameUpsertWithoutMatchesInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutMatchesInput, GameUpdateWithoutMatchesInput>, GameUncheckedUpdateWithoutMatchesInput>
  }

  export type MatchParticipantUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchParticipantCreateWithoutMatchInput, MatchParticipantUncheckedCreateWithoutMatchInput> | MatchParticipantCreateWithoutMatchInput[] | MatchParticipantUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutMatchInput | MatchParticipantCreateOrConnectWithoutMatchInput[]
    upsert?: MatchParticipantUpsertWithWhereUniqueWithoutMatchInput | MatchParticipantUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchParticipantCreateManyMatchInputEnvelope
    set?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    disconnect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    delete?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    update?: MatchParticipantUpdateWithWhereUniqueWithoutMatchInput | MatchParticipantUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchParticipantUpdateManyWithWhereWithoutMatchInput | MatchParticipantUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchParticipantScalarWhereInput | MatchParticipantScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MatchParticipantUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchParticipantCreateWithoutMatchInput, MatchParticipantUncheckedCreateWithoutMatchInput> | MatchParticipantCreateWithoutMatchInput[] | MatchParticipantUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchParticipantCreateOrConnectWithoutMatchInput | MatchParticipantCreateOrConnectWithoutMatchInput[]
    upsert?: MatchParticipantUpsertWithWhereUniqueWithoutMatchInput | MatchParticipantUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchParticipantCreateManyMatchInputEnvelope
    set?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    disconnect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    delete?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    connect?: MatchParticipantWhereUniqueInput | MatchParticipantWhereUniqueInput[]
    update?: MatchParticipantUpdateWithWhereUniqueWithoutMatchInput | MatchParticipantUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchParticipantUpdateManyWithWhereWithoutMatchInput | MatchParticipantUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchParticipantScalarWhereInput | MatchParticipantScalarWhereInput[]
  }

  export type MatchCreateNestedOneWithoutPartsInput = {
    create?: XOR<MatchCreateWithoutPartsInput, MatchUncheckedCreateWithoutPartsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutPartsInput
    connect?: MatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchPartsInput = {
    create?: XOR<UserCreateWithoutMatchPartsInput, UserUncheckedCreateWithoutMatchPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchPartsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumOutcomeFieldUpdateOperationsInput = {
    set?: $Enums.Outcome
  }

  export type MatchUpdateOneRequiredWithoutPartsNestedInput = {
    create?: XOR<MatchCreateWithoutPartsInput, MatchUncheckedCreateWithoutPartsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutPartsInput
    upsert?: MatchUpsertWithoutPartsInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutPartsInput, MatchUpdateWithoutPartsInput>, MatchUncheckedUpdateWithoutPartsInput>
  }

  export type UserUpdateOneRequiredWithoutMatchPartsNestedInput = {
    create?: XOR<UserCreateWithoutMatchPartsInput, UserUncheckedCreateWithoutMatchPartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchPartsInput
    upsert?: UserUpsertWithoutMatchPartsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchPartsInput, UserUpdateWithoutMatchPartsInput>, UserUncheckedUpdateWithoutMatchPartsInput>
  }

  export type UserCreateNestedOneWithoutTimelineInput = {
    create?: XOR<UserCreateWithoutTimelineInput, UserUncheckedCreateWithoutTimelineInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimelineInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutTimelineEventInput = {
    create?: XOR<RoomCreateWithoutTimelineEventInput, RoomUncheckedCreateWithoutTimelineEventInput>
    connectOrCreate?: RoomCreateOrConnectWithoutTimelineEventInput
    connect?: RoomWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutTimelineEventInput = {
    create?: XOR<GameCreateWithoutTimelineEventInput, GameUncheckedCreateWithoutTimelineEventInput>
    connectOrCreate?: GameCreateOrConnectWithoutTimelineEventInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneWithoutTimelineNestedInput = {
    create?: XOR<UserCreateWithoutTimelineInput, UserUncheckedCreateWithoutTimelineInput>
    connectOrCreate?: UserCreateOrConnectWithoutTimelineInput
    upsert?: UserUpsertWithoutTimelineInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTimelineInput, UserUpdateWithoutTimelineInput>, UserUncheckedUpdateWithoutTimelineInput>
  }

  export type RoomUpdateOneWithoutTimelineEventNestedInput = {
    create?: XOR<RoomCreateWithoutTimelineEventInput, RoomUncheckedCreateWithoutTimelineEventInput>
    connectOrCreate?: RoomCreateOrConnectWithoutTimelineEventInput
    upsert?: RoomUpsertWithoutTimelineEventInput
    disconnect?: RoomWhereInput | boolean
    delete?: RoomWhereInput | boolean
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutTimelineEventInput, RoomUpdateWithoutTimelineEventInput>, RoomUncheckedUpdateWithoutTimelineEventInput>
  }

  export type GameUpdateOneWithoutTimelineEventNestedInput = {
    create?: XOR<GameCreateWithoutTimelineEventInput, GameUncheckedCreateWithoutTimelineEventInput>
    connectOrCreate?: GameCreateOrConnectWithoutTimelineEventInput
    upsert?: GameUpsertWithoutTimelineEventInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutTimelineEventInput, GameUpdateWithoutTimelineEventInput>, GameUncheckedUpdateWithoutTimelineEventInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumTeamSideNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamSide | EnumTeamSideFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTeamSideNullableFilter<$PrismaModel> | $Enums.TeamSide | null
  }

  export type NestedEnumTeamSideNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamSide | EnumTeamSideFieldRefInput<$PrismaModel> | null
    in?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TeamSide[] | ListEnumTeamSideFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTeamSideNullableWithAggregatesFilter<$PrismaModel> | $Enums.TeamSide | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTeamSideNullableFilter<$PrismaModel>
    _max?: NestedEnumTeamSideNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumOutcomeFilter<$PrismaModel = never> = {
    equals?: $Enums.Outcome | EnumOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutcomeFilter<$PrismaModel> | $Enums.Outcome
  }

  export type NestedEnumOutcomeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Outcome | EnumOutcomeFieldRefInput<$PrismaModel>
    in?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Outcome[] | ListEnumOutcomeFieldRefInput<$PrismaModel>
    not?: NestedEnumOutcomeWithAggregatesFilter<$PrismaModel> | $Enums.Outcome
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOutcomeFilter<$PrismaModel>
    _max?: NestedEnumOutcomeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type RoomCreateWithoutGameInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    host: UserCreateNestedOneWithoutRoomsHostedInput
    players?: RoomPlayerCreateNestedManyWithoutRoomInput
    matches?: MatchCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutGameInput = {
    code: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    players?: RoomPlayerUncheckedCreateNestedManyWithoutRoomInput
    matches?: MatchUncheckedCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeUncheckedCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutGameInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput>
  }

  export type RoomCreateManyGameInputEnvelope = {
    data: RoomCreateManyGameInput | RoomCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutGameInput = {
    id?: string
    createdAt?: Date | string
    room?: RoomCreateNestedOneWithoutMatchesInput
    parts?: MatchParticipantCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutGameInput = {
    id?: string
    roomCode?: string | null
    createdAt?: Date | string
    parts?: MatchParticipantUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutGameInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutGameInput, MatchUncheckedCreateWithoutGameInput>
  }

  export type MatchCreateManyGameInputEnvelope = {
    data: MatchCreateManyGameInput | MatchCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type TimelineEventCreateWithoutGameInput = {
    id?: string
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTimelineInput
    room?: RoomCreateNestedOneWithoutTimelineEventInput
  }

  export type TimelineEventUncheckedCreateWithoutGameInput = {
    id?: string
    userId?: string | null
    roomCode?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TimelineEventCreateOrConnectWithoutGameInput = {
    where: TimelineEventWhereUniqueInput
    create: XOR<TimelineEventCreateWithoutGameInput, TimelineEventUncheckedCreateWithoutGameInput>
  }

  export type TimelineEventCreateManyGameInputEnvelope = {
    data: TimelineEventCreateManyGameInput | TimelineEventCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithWhereUniqueWithoutGameInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutGameInput, RoomUncheckedUpdateWithoutGameInput>
    create: XOR<RoomCreateWithoutGameInput, RoomUncheckedCreateWithoutGameInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutGameInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutGameInput, RoomUncheckedUpdateWithoutGameInput>
  }

  export type RoomUpdateManyWithWhereWithoutGameInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutGameInput>
  }

  export type RoomScalarWhereInput = {
    AND?: RoomScalarWhereInput | RoomScalarWhereInput[]
    OR?: RoomScalarWhereInput[]
    NOT?: RoomScalarWhereInput | RoomScalarWhereInput[]
    code?: StringFilter<"Room"> | string
    gameId?: StringFilter<"Room"> | string
    hostUserId?: StringFilter<"Room"> | string
    status?: StringFilter<"Room"> | string
    createdAt?: DateTimeFilter<"Room"> | Date | string
    targetWinPoints?: IntNullableFilter<"Room"> | number | null
    allowZeroCredit?: BoolFilter<"Room"> | boolean
    timerSec?: IntNullableFilter<"Room"> | number | null
    startedAt?: DateTimeNullableFilter<"Room"> | Date | string | null
  }

  export type MatchUpsertWithWhereUniqueWithoutGameInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutGameInput, MatchUncheckedUpdateWithoutGameInput>
    create: XOR<MatchCreateWithoutGameInput, MatchUncheckedCreateWithoutGameInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutGameInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutGameInput, MatchUncheckedUpdateWithoutGameInput>
  }

  export type MatchUpdateManyWithWhereWithoutGameInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutGameInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    roomCode?: StringNullableFilter<"Match"> | string | null
    gameId?: StringFilter<"Match"> | string
    createdAt?: DateTimeFilter<"Match"> | Date | string
  }

  export type TimelineEventUpsertWithWhereUniqueWithoutGameInput = {
    where: TimelineEventWhereUniqueInput
    update: XOR<TimelineEventUpdateWithoutGameInput, TimelineEventUncheckedUpdateWithoutGameInput>
    create: XOR<TimelineEventCreateWithoutGameInput, TimelineEventUncheckedCreateWithoutGameInput>
  }

  export type TimelineEventUpdateWithWhereUniqueWithoutGameInput = {
    where: TimelineEventWhereUniqueInput
    data: XOR<TimelineEventUpdateWithoutGameInput, TimelineEventUncheckedUpdateWithoutGameInput>
  }

  export type TimelineEventUpdateManyWithWhereWithoutGameInput = {
    where: TimelineEventScalarWhereInput
    data: XOR<TimelineEventUpdateManyMutationInput, TimelineEventUncheckedUpdateManyWithoutGameInput>
  }

  export type TimelineEventScalarWhereInput = {
    AND?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
    OR?: TimelineEventScalarWhereInput[]
    NOT?: TimelineEventScalarWhereInput | TimelineEventScalarWhereInput[]
    id?: StringFilter<"TimelineEvent"> | string
    userId?: StringNullableFilter<"TimelineEvent"> | string | null
    roomCode?: StringNullableFilter<"TimelineEvent"> | string | null
    gameId?: StringNullableFilter<"TimelineEvent"> | string | null
    kind?: StringFilter<"TimelineEvent"> | string
    meta?: JsonNullableFilter<"TimelineEvent">
    createdAt?: DateTimeFilter<"TimelineEvent"> | Date | string
  }

  export type RoomCreateWithoutHostInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    game: GameCreateNestedOneWithoutRoomsInput
    players?: RoomPlayerCreateNestedManyWithoutRoomInput
    matches?: MatchCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutHostInput = {
    code: string
    gameId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    players?: RoomPlayerUncheckedCreateNestedManyWithoutRoomInput
    matches?: MatchUncheckedCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeUncheckedCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutHostInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutHostInput, RoomUncheckedCreateWithoutHostInput>
  }

  export type RoomCreateManyHostInputEnvelope = {
    data: RoomCreateManyHostInput | RoomCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type RoomPlayerCreateWithoutUserInput = {
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
    room: RoomCreateNestedOneWithoutPlayersInput
  }

  export type RoomPlayerUncheckedCreateWithoutUserInput = {
    roomCode: string
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
  }

  export type RoomPlayerCreateOrConnectWithoutUserInput = {
    where: RoomPlayerWhereUniqueInput
    create: XOR<RoomPlayerCreateWithoutUserInput, RoomPlayerUncheckedCreateWithoutUserInput>
  }

  export type RoomPlayerCreateManyUserInputEnvelope = {
    data: RoomPlayerCreateManyUserInput | RoomPlayerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSponsorCreateWithoutUserInput = {
    activatedAt?: Date | string
    sponsor: SponsorCreateNestedOneWithoutUsersInput
  }

  export type UserSponsorUncheckedCreateWithoutUserInput = {
    sponsorCode: string
    activatedAt?: Date | string
  }

  export type UserSponsorCreateOrConnectWithoutUserInput = {
    where: UserSponsorWhereUniqueInput
    create: XOR<UserSponsorCreateWithoutUserInput, UserSponsorUncheckedCreateWithoutUserInput>
  }

  export type UserSponsorCreateManyUserInputEnvelope = {
    data: UserSponsorCreateManyUserInput | UserSponsorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MatchParticipantCreateWithoutUserInput = {
    outcome: $Enums.Outcome
    match: MatchCreateNestedOneWithoutPartsInput
  }

  export type MatchParticipantUncheckedCreateWithoutUserInput = {
    matchId: string
    outcome: $Enums.Outcome
  }

  export type MatchParticipantCreateOrConnectWithoutUserInput = {
    where: MatchParticipantWhereUniqueInput
    create: XOR<MatchParticipantCreateWithoutUserInput, MatchParticipantUncheckedCreateWithoutUserInput>
  }

  export type MatchParticipantCreateManyUserInputEnvelope = {
    data: MatchParticipantCreateManyUserInput | MatchParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TimelineEventCreateWithoutUserInput = {
    id?: string
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    room?: RoomCreateNestedOneWithoutTimelineEventInput
    game?: GameCreateNestedOneWithoutTimelineEventInput
  }

  export type TimelineEventUncheckedCreateWithoutUserInput = {
    id?: string
    roomCode?: string | null
    gameId?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TimelineEventCreateOrConnectWithoutUserInput = {
    where: TimelineEventWhereUniqueInput
    create: XOR<TimelineEventCreateWithoutUserInput, TimelineEventUncheckedCreateWithoutUserInput>
  }

  export type TimelineEventCreateManyUserInputEnvelope = {
    data: TimelineEventCreateManyUserInput | TimelineEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoomStakeCreateWithoutUserInput = {
    amount: number
    reservedAt?: Date | string
    room: RoomCreateNestedOneWithoutStakesInput
  }

  export type RoomStakeUncheckedCreateWithoutUserInput = {
    roomCode: string
    amount: number
    reservedAt?: Date | string
  }

  export type RoomStakeCreateOrConnectWithoutUserInput = {
    where: RoomStakeWhereUniqueInput
    create: XOR<RoomStakeCreateWithoutUserInput, RoomStakeUncheckedCreateWithoutUserInput>
  }

  export type RoomStakeCreateManyUserInputEnvelope = {
    data: RoomStakeCreateManyUserInput | RoomStakeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithWhereUniqueWithoutHostInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutHostInput, RoomUncheckedUpdateWithoutHostInput>
    create: XOR<RoomCreateWithoutHostInput, RoomUncheckedCreateWithoutHostInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutHostInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutHostInput, RoomUncheckedUpdateWithoutHostInput>
  }

  export type RoomUpdateManyWithWhereWithoutHostInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutHostInput>
  }

  export type RoomPlayerUpsertWithWhereUniqueWithoutUserInput = {
    where: RoomPlayerWhereUniqueInput
    update: XOR<RoomPlayerUpdateWithoutUserInput, RoomPlayerUncheckedUpdateWithoutUserInput>
    create: XOR<RoomPlayerCreateWithoutUserInput, RoomPlayerUncheckedCreateWithoutUserInput>
  }

  export type RoomPlayerUpdateWithWhereUniqueWithoutUserInput = {
    where: RoomPlayerWhereUniqueInput
    data: XOR<RoomPlayerUpdateWithoutUserInput, RoomPlayerUncheckedUpdateWithoutUserInput>
  }

  export type RoomPlayerUpdateManyWithWhereWithoutUserInput = {
    where: RoomPlayerScalarWhereInput
    data: XOR<RoomPlayerUpdateManyMutationInput, RoomPlayerUncheckedUpdateManyWithoutUserInput>
  }

  export type RoomPlayerScalarWhereInput = {
    AND?: RoomPlayerScalarWhereInput | RoomPlayerScalarWhereInput[]
    OR?: RoomPlayerScalarWhereInput[]
    NOT?: RoomPlayerScalarWhereInput | RoomPlayerScalarWhereInput[]
    roomCode?: StringFilter<"RoomPlayer"> | string
    userId?: StringFilter<"RoomPlayer"> | string
    joinedAt?: DateTimeFilter<"RoomPlayer"> | Date | string
    team?: EnumTeamSideNullableFilter<"RoomPlayer"> | $Enums.TeamSide | null
    isLeader?: BoolFilter<"RoomPlayer"> | boolean
  }

  export type UserSponsorUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSponsorWhereUniqueInput
    update: XOR<UserSponsorUpdateWithoutUserInput, UserSponsorUncheckedUpdateWithoutUserInput>
    create: XOR<UserSponsorCreateWithoutUserInput, UserSponsorUncheckedCreateWithoutUserInput>
  }

  export type UserSponsorUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSponsorWhereUniqueInput
    data: XOR<UserSponsorUpdateWithoutUserInput, UserSponsorUncheckedUpdateWithoutUserInput>
  }

  export type UserSponsorUpdateManyWithWhereWithoutUserInput = {
    where: UserSponsorScalarWhereInput
    data: XOR<UserSponsorUpdateManyMutationInput, UserSponsorUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSponsorScalarWhereInput = {
    AND?: UserSponsorScalarWhereInput | UserSponsorScalarWhereInput[]
    OR?: UserSponsorScalarWhereInput[]
    NOT?: UserSponsorScalarWhereInput | UserSponsorScalarWhereInput[]
    userId?: StringFilter<"UserSponsor"> | string
    sponsorCode?: StringFilter<"UserSponsor"> | string
    activatedAt?: DateTimeFilter<"UserSponsor"> | Date | string
  }

  export type MatchParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: MatchParticipantWhereUniqueInput
    update: XOR<MatchParticipantUpdateWithoutUserInput, MatchParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<MatchParticipantCreateWithoutUserInput, MatchParticipantUncheckedCreateWithoutUserInput>
  }

  export type MatchParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: MatchParticipantWhereUniqueInput
    data: XOR<MatchParticipantUpdateWithoutUserInput, MatchParticipantUncheckedUpdateWithoutUserInput>
  }

  export type MatchParticipantUpdateManyWithWhereWithoutUserInput = {
    where: MatchParticipantScalarWhereInput
    data: XOR<MatchParticipantUpdateManyMutationInput, MatchParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type MatchParticipantScalarWhereInput = {
    AND?: MatchParticipantScalarWhereInput | MatchParticipantScalarWhereInput[]
    OR?: MatchParticipantScalarWhereInput[]
    NOT?: MatchParticipantScalarWhereInput | MatchParticipantScalarWhereInput[]
    matchId?: StringFilter<"MatchParticipant"> | string
    userId?: StringFilter<"MatchParticipant"> | string
    outcome?: EnumOutcomeFilter<"MatchParticipant"> | $Enums.Outcome
  }

  export type TimelineEventUpsertWithWhereUniqueWithoutUserInput = {
    where: TimelineEventWhereUniqueInput
    update: XOR<TimelineEventUpdateWithoutUserInput, TimelineEventUncheckedUpdateWithoutUserInput>
    create: XOR<TimelineEventCreateWithoutUserInput, TimelineEventUncheckedCreateWithoutUserInput>
  }

  export type TimelineEventUpdateWithWhereUniqueWithoutUserInput = {
    where: TimelineEventWhereUniqueInput
    data: XOR<TimelineEventUpdateWithoutUserInput, TimelineEventUncheckedUpdateWithoutUserInput>
  }

  export type TimelineEventUpdateManyWithWhereWithoutUserInput = {
    where: TimelineEventScalarWhereInput
    data: XOR<TimelineEventUpdateManyMutationInput, TimelineEventUncheckedUpdateManyWithoutUserInput>
  }

  export type RoomStakeUpsertWithWhereUniqueWithoutUserInput = {
    where: RoomStakeWhereUniqueInput
    update: XOR<RoomStakeUpdateWithoutUserInput, RoomStakeUncheckedUpdateWithoutUserInput>
    create: XOR<RoomStakeCreateWithoutUserInput, RoomStakeUncheckedCreateWithoutUserInput>
  }

  export type RoomStakeUpdateWithWhereUniqueWithoutUserInput = {
    where: RoomStakeWhereUniqueInput
    data: XOR<RoomStakeUpdateWithoutUserInput, RoomStakeUncheckedUpdateWithoutUserInput>
  }

  export type RoomStakeUpdateManyWithWhereWithoutUserInput = {
    where: RoomStakeScalarWhereInput
    data: XOR<RoomStakeUpdateManyMutationInput, RoomStakeUncheckedUpdateManyWithoutUserInput>
  }

  export type RoomStakeScalarWhereInput = {
    AND?: RoomStakeScalarWhereInput | RoomStakeScalarWhereInput[]
    OR?: RoomStakeScalarWhereInput[]
    NOT?: RoomStakeScalarWhereInput | RoomStakeScalarWhereInput[]
    roomCode?: StringFilter<"RoomStake"> | string
    userId?: StringFilter<"RoomStake"> | string
    amount?: IntFilter<"RoomStake"> | number
    reservedAt?: DateTimeFilter<"RoomStake"> | Date | string
  }

  export type GameCreateWithoutRoomsInput = {
    id: string
    name: string
    category: string
    matches?: MatchCreateNestedManyWithoutGameInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutRoomsInput = {
    id: string
    name: string
    category: string
    matches?: MatchUncheckedCreateNestedManyWithoutGameInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutRoomsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutRoomsInput, GameUncheckedCreateWithoutRoomsInput>
  }

  export type UserCreateWithoutRoomsHostedInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomPlayers?: RoomPlayerCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantCreateNestedManyWithoutUserInput
    timeline?: TimelineEventCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoomsHostedInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomPlayers?: RoomPlayerUncheckedCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorUncheckedCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantUncheckedCreateNestedManyWithoutUserInput
    timeline?: TimelineEventUncheckedCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoomsHostedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomsHostedInput, UserUncheckedCreateWithoutRoomsHostedInput>
  }

  export type RoomPlayerCreateWithoutRoomInput = {
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
    user: UserCreateNestedOneWithoutRoomPlayersInput
  }

  export type RoomPlayerUncheckedCreateWithoutRoomInput = {
    userId: string
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
  }

  export type RoomPlayerCreateOrConnectWithoutRoomInput = {
    where: RoomPlayerWhereUniqueInput
    create: XOR<RoomPlayerCreateWithoutRoomInput, RoomPlayerUncheckedCreateWithoutRoomInput>
  }

  export type RoomPlayerCreateManyRoomInputEnvelope = {
    data: RoomPlayerCreateManyRoomInput | RoomPlayerCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutRoomInput = {
    id?: string
    createdAt?: Date | string
    game: GameCreateNestedOneWithoutMatchesInput
    parts?: MatchParticipantCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutRoomInput = {
    id?: string
    gameId: string
    createdAt?: Date | string
    parts?: MatchParticipantUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutRoomInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutRoomInput, MatchUncheckedCreateWithoutRoomInput>
  }

  export type MatchCreateManyRoomInputEnvelope = {
    data: MatchCreateManyRoomInput | MatchCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type RoomStakeCreateWithoutRoomInput = {
    amount: number
    reservedAt?: Date | string
    user: UserCreateNestedOneWithoutRoomStakeInput
  }

  export type RoomStakeUncheckedCreateWithoutRoomInput = {
    userId: string
    amount: number
    reservedAt?: Date | string
  }

  export type RoomStakeCreateOrConnectWithoutRoomInput = {
    where: RoomStakeWhereUniqueInput
    create: XOR<RoomStakeCreateWithoutRoomInput, RoomStakeUncheckedCreateWithoutRoomInput>
  }

  export type RoomStakeCreateManyRoomInputEnvelope = {
    data: RoomStakeCreateManyRoomInput | RoomStakeCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type TimelineEventCreateWithoutRoomInput = {
    id?: string
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutTimelineInput
    game?: GameCreateNestedOneWithoutTimelineEventInput
  }

  export type TimelineEventUncheckedCreateWithoutRoomInput = {
    id?: string
    userId?: string | null
    gameId?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type TimelineEventCreateOrConnectWithoutRoomInput = {
    where: TimelineEventWhereUniqueInput
    create: XOR<TimelineEventCreateWithoutRoomInput, TimelineEventUncheckedCreateWithoutRoomInput>
  }

  export type TimelineEventCreateManyRoomInputEnvelope = {
    data: TimelineEventCreateManyRoomInput | TimelineEventCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithoutRoomsInput = {
    update: XOR<GameUpdateWithoutRoomsInput, GameUncheckedUpdateWithoutRoomsInput>
    create: XOR<GameCreateWithoutRoomsInput, GameUncheckedCreateWithoutRoomsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutRoomsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutRoomsInput, GameUncheckedUpdateWithoutRoomsInput>
  }

  export type GameUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    matches?: MatchUpdateManyWithoutGameNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutRoomsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    matches?: MatchUncheckedUpdateManyWithoutGameNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserUpsertWithoutRoomsHostedInput = {
    update: XOR<UserUpdateWithoutRoomsHostedInput, UserUncheckedUpdateWithoutRoomsHostedInput>
    create: XOR<UserCreateWithoutRoomsHostedInput, UserUncheckedCreateWithoutRoomsHostedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoomsHostedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoomsHostedInput, UserUncheckedUpdateWithoutRoomsHostedInput>
  }

  export type UserUpdateWithoutRoomsHostedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomPlayers?: RoomPlayerUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoomsHostedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomPlayers?: RoomPlayerUncheckedUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUncheckedUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUncheckedUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUncheckedUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomPlayerUpsertWithWhereUniqueWithoutRoomInput = {
    where: RoomPlayerWhereUniqueInput
    update: XOR<RoomPlayerUpdateWithoutRoomInput, RoomPlayerUncheckedUpdateWithoutRoomInput>
    create: XOR<RoomPlayerCreateWithoutRoomInput, RoomPlayerUncheckedCreateWithoutRoomInput>
  }

  export type RoomPlayerUpdateWithWhereUniqueWithoutRoomInput = {
    where: RoomPlayerWhereUniqueInput
    data: XOR<RoomPlayerUpdateWithoutRoomInput, RoomPlayerUncheckedUpdateWithoutRoomInput>
  }

  export type RoomPlayerUpdateManyWithWhereWithoutRoomInput = {
    where: RoomPlayerScalarWhereInput
    data: XOR<RoomPlayerUpdateManyMutationInput, RoomPlayerUncheckedUpdateManyWithoutRoomInput>
  }

  export type MatchUpsertWithWhereUniqueWithoutRoomInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutRoomInput, MatchUncheckedUpdateWithoutRoomInput>
    create: XOR<MatchCreateWithoutRoomInput, MatchUncheckedCreateWithoutRoomInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutRoomInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutRoomInput, MatchUncheckedUpdateWithoutRoomInput>
  }

  export type MatchUpdateManyWithWhereWithoutRoomInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutRoomInput>
  }

  export type RoomStakeUpsertWithWhereUniqueWithoutRoomInput = {
    where: RoomStakeWhereUniqueInput
    update: XOR<RoomStakeUpdateWithoutRoomInput, RoomStakeUncheckedUpdateWithoutRoomInput>
    create: XOR<RoomStakeCreateWithoutRoomInput, RoomStakeUncheckedCreateWithoutRoomInput>
  }

  export type RoomStakeUpdateWithWhereUniqueWithoutRoomInput = {
    where: RoomStakeWhereUniqueInput
    data: XOR<RoomStakeUpdateWithoutRoomInput, RoomStakeUncheckedUpdateWithoutRoomInput>
  }

  export type RoomStakeUpdateManyWithWhereWithoutRoomInput = {
    where: RoomStakeScalarWhereInput
    data: XOR<RoomStakeUpdateManyMutationInput, RoomStakeUncheckedUpdateManyWithoutRoomInput>
  }

  export type TimelineEventUpsertWithWhereUniqueWithoutRoomInput = {
    where: TimelineEventWhereUniqueInput
    update: XOR<TimelineEventUpdateWithoutRoomInput, TimelineEventUncheckedUpdateWithoutRoomInput>
    create: XOR<TimelineEventCreateWithoutRoomInput, TimelineEventUncheckedCreateWithoutRoomInput>
  }

  export type TimelineEventUpdateWithWhereUniqueWithoutRoomInput = {
    where: TimelineEventWhereUniqueInput
    data: XOR<TimelineEventUpdateWithoutRoomInput, TimelineEventUncheckedUpdateWithoutRoomInput>
  }

  export type TimelineEventUpdateManyWithWhereWithoutRoomInput = {
    where: TimelineEventScalarWhereInput
    data: XOR<TimelineEventUpdateManyMutationInput, TimelineEventUncheckedUpdateManyWithoutRoomInput>
  }

  export type RoomCreateWithoutPlayersInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    game: GameCreateNestedOneWithoutRoomsInput
    host: UserCreateNestedOneWithoutRoomsHostedInput
    matches?: MatchCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutPlayersInput = {
    code: string
    gameId: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    matches?: MatchUncheckedCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeUncheckedCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutPlayersInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
  }

  export type UserCreateWithoutRoomPlayersInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomCreateNestedManyWithoutHostInput
    sponsors?: UserSponsorCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantCreateNestedManyWithoutUserInput
    timeline?: TimelineEventCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoomPlayersInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomUncheckedCreateNestedManyWithoutHostInput
    sponsors?: UserSponsorUncheckedCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantUncheckedCreateNestedManyWithoutUserInput
    timeline?: TimelineEventUncheckedCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoomPlayersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomPlayersInput, UserUncheckedCreateWithoutRoomPlayersInput>
  }

  export type RoomUpsertWithoutPlayersInput = {
    update: XOR<RoomUpdateWithoutPlayersInput, RoomUncheckedUpdateWithoutPlayersInput>
    create: XOR<RoomCreateWithoutPlayersInput, RoomUncheckedCreateWithoutPlayersInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutPlayersInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutPlayersInput, RoomUncheckedUpdateWithoutPlayersInput>
  }

  export type RoomUpdateWithoutPlayersInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutRoomsNestedInput
    host?: UserUpdateOneRequiredWithoutRoomsHostedNestedInput
    matches?: MatchUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutPlayersInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    matches?: MatchUncheckedUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUncheckedUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserUpsertWithoutRoomPlayersInput = {
    update: XOR<UserUpdateWithoutRoomPlayersInput, UserUncheckedUpdateWithoutRoomPlayersInput>
    create: XOR<UserCreateWithoutRoomPlayersInput, UserUncheckedCreateWithoutRoomPlayersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoomPlayersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoomPlayersInput, UserUncheckedUpdateWithoutRoomPlayersInput>
  }

  export type UserUpdateWithoutRoomPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUpdateManyWithoutHostNestedInput
    sponsors?: UserSponsorUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoomPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUncheckedUpdateManyWithoutHostNestedInput
    sponsors?: UserSponsorUncheckedUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUncheckedUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUncheckedUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomCreateWithoutStakesInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    game: GameCreateNestedOneWithoutRoomsInput
    host: UserCreateNestedOneWithoutRoomsHostedInput
    players?: RoomPlayerCreateNestedManyWithoutRoomInput
    matches?: MatchCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutStakesInput = {
    code: string
    gameId: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    players?: RoomPlayerUncheckedCreateNestedManyWithoutRoomInput
    matches?: MatchUncheckedCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutStakesInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutStakesInput, RoomUncheckedCreateWithoutStakesInput>
  }

  export type UserCreateWithoutRoomStakeInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantCreateNestedManyWithoutUserInput
    timeline?: TimelineEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoomStakeInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomUncheckedCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerUncheckedCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorUncheckedCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantUncheckedCreateNestedManyWithoutUserInput
    timeline?: TimelineEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoomStakeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomStakeInput, UserUncheckedCreateWithoutRoomStakeInput>
  }

  export type RoomUpsertWithoutStakesInput = {
    update: XOR<RoomUpdateWithoutStakesInput, RoomUncheckedUpdateWithoutStakesInput>
    create: XOR<RoomCreateWithoutStakesInput, RoomUncheckedCreateWithoutStakesInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutStakesInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutStakesInput, RoomUncheckedUpdateWithoutStakesInput>
  }

  export type RoomUpdateWithoutStakesInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutRoomsNestedInput
    host?: UserUpdateOneRequiredWithoutRoomsHostedNestedInput
    players?: RoomPlayerUpdateManyWithoutRoomNestedInput
    matches?: MatchUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutStakesInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput
    matches?: MatchUncheckedUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type UserUpsertWithoutRoomStakeInput = {
    update: XOR<UserUpdateWithoutRoomStakeInput, UserUncheckedUpdateWithoutRoomStakeInput>
    create: XOR<UserCreateWithoutRoomStakeInput, UserUncheckedCreateWithoutRoomStakeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoomStakeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoomStakeInput, UserUncheckedUpdateWithoutRoomStakeInput>
  }

  export type UserUpdateWithoutRoomStakeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoomStakeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUncheckedUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUncheckedUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUncheckedUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUncheckedUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserSponsorCreateWithoutSponsorInput = {
    activatedAt?: Date | string
    user: UserCreateNestedOneWithoutSponsorsInput
  }

  export type UserSponsorUncheckedCreateWithoutSponsorInput = {
    userId: string
    activatedAt?: Date | string
  }

  export type UserSponsorCreateOrConnectWithoutSponsorInput = {
    where: UserSponsorWhereUniqueInput
    create: XOR<UserSponsorCreateWithoutSponsorInput, UserSponsorUncheckedCreateWithoutSponsorInput>
  }

  export type UserSponsorCreateManySponsorInputEnvelope = {
    data: UserSponsorCreateManySponsorInput | UserSponsorCreateManySponsorInput[]
    skipDuplicates?: boolean
  }

  export type UserSponsorUpsertWithWhereUniqueWithoutSponsorInput = {
    where: UserSponsorWhereUniqueInput
    update: XOR<UserSponsorUpdateWithoutSponsorInput, UserSponsorUncheckedUpdateWithoutSponsorInput>
    create: XOR<UserSponsorCreateWithoutSponsorInput, UserSponsorUncheckedCreateWithoutSponsorInput>
  }

  export type UserSponsorUpdateWithWhereUniqueWithoutSponsorInput = {
    where: UserSponsorWhereUniqueInput
    data: XOR<UserSponsorUpdateWithoutSponsorInput, UserSponsorUncheckedUpdateWithoutSponsorInput>
  }

  export type UserSponsorUpdateManyWithWhereWithoutSponsorInput = {
    where: UserSponsorScalarWhereInput
    data: XOR<UserSponsorUpdateManyMutationInput, UserSponsorUncheckedUpdateManyWithoutSponsorInput>
  }

  export type UserCreateWithoutSponsorsInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantCreateNestedManyWithoutUserInput
    timeline?: TimelineEventCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSponsorsInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomUncheckedCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerUncheckedCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantUncheckedCreateNestedManyWithoutUserInput
    timeline?: TimelineEventUncheckedCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSponsorsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSponsorsInput, UserUncheckedCreateWithoutSponsorsInput>
  }

  export type SponsorCreateWithoutUsersInput = {
    code: string
    name: string
    active?: boolean
  }

  export type SponsorUncheckedCreateWithoutUsersInput = {
    code: string
    name: string
    active?: boolean
  }

  export type SponsorCreateOrConnectWithoutUsersInput = {
    where: SponsorWhereUniqueInput
    create: XOR<SponsorCreateWithoutUsersInput, SponsorUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutSponsorsInput = {
    update: XOR<UserUpdateWithoutSponsorsInput, UserUncheckedUpdateWithoutSponsorsInput>
    create: XOR<UserCreateWithoutSponsorsInput, UserUncheckedCreateWithoutSponsorsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSponsorsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSponsorsInput, UserUncheckedUpdateWithoutSponsorsInput>
  }

  export type UserUpdateWithoutSponsorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSponsorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUncheckedUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUncheckedUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUncheckedUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUncheckedUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SponsorUpsertWithoutUsersInput = {
    update: XOR<SponsorUpdateWithoutUsersInput, SponsorUncheckedUpdateWithoutUsersInput>
    create: XOR<SponsorCreateWithoutUsersInput, SponsorUncheckedCreateWithoutUsersInput>
    where?: SponsorWhereInput
  }

  export type SponsorUpdateToOneWithWhereWithoutUsersInput = {
    where?: SponsorWhereInput
    data: XOR<SponsorUpdateWithoutUsersInput, SponsorUncheckedUpdateWithoutUsersInput>
  }

  export type SponsorUpdateWithoutUsersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SponsorUncheckedUpdateWithoutUsersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomCreateWithoutMatchesInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    game: GameCreateNestedOneWithoutRoomsInput
    host: UserCreateNestedOneWithoutRoomsHostedInput
    players?: RoomPlayerCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutMatchesInput = {
    code: string
    gameId: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    players?: RoomPlayerUncheckedCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeUncheckedCreateNestedManyWithoutRoomInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutMatchesInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutMatchesInput, RoomUncheckedCreateWithoutMatchesInput>
  }

  export type GameCreateWithoutMatchesInput = {
    id: string
    name: string
    category: string
    rooms?: RoomCreateNestedManyWithoutGameInput
    TimelineEvent?: TimelineEventCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutMatchesInput = {
    id: string
    name: string
    category: string
    rooms?: RoomUncheckedCreateNestedManyWithoutGameInput
    TimelineEvent?: TimelineEventUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutMatchesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutMatchesInput, GameUncheckedCreateWithoutMatchesInput>
  }

  export type MatchParticipantCreateWithoutMatchInput = {
    outcome: $Enums.Outcome
    user: UserCreateNestedOneWithoutMatchPartsInput
  }

  export type MatchParticipantUncheckedCreateWithoutMatchInput = {
    userId: string
    outcome: $Enums.Outcome
  }

  export type MatchParticipantCreateOrConnectWithoutMatchInput = {
    where: MatchParticipantWhereUniqueInput
    create: XOR<MatchParticipantCreateWithoutMatchInput, MatchParticipantUncheckedCreateWithoutMatchInput>
  }

  export type MatchParticipantCreateManyMatchInputEnvelope = {
    data: MatchParticipantCreateManyMatchInput | MatchParticipantCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type RoomUpsertWithoutMatchesInput = {
    update: XOR<RoomUpdateWithoutMatchesInput, RoomUncheckedUpdateWithoutMatchesInput>
    create: XOR<RoomCreateWithoutMatchesInput, RoomUncheckedCreateWithoutMatchesInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutMatchesInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutMatchesInput, RoomUncheckedUpdateWithoutMatchesInput>
  }

  export type RoomUpdateWithoutMatchesInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutRoomsNestedInput
    host?: UserUpdateOneRequiredWithoutRoomsHostedNestedInput
    players?: RoomPlayerUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutMatchesInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUncheckedUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type GameUpsertWithoutMatchesInput = {
    update: XOR<GameUpdateWithoutMatchesInput, GameUncheckedUpdateWithoutMatchesInput>
    create: XOR<GameCreateWithoutMatchesInput, GameUncheckedCreateWithoutMatchesInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutMatchesInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutMatchesInput, GameUncheckedUpdateWithoutMatchesInput>
  }

  export type GameUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUpdateManyWithoutGameNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUncheckedUpdateManyWithoutGameNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutGameNestedInput
  }

  export type MatchParticipantUpsertWithWhereUniqueWithoutMatchInput = {
    where: MatchParticipantWhereUniqueInput
    update: XOR<MatchParticipantUpdateWithoutMatchInput, MatchParticipantUncheckedUpdateWithoutMatchInput>
    create: XOR<MatchParticipantCreateWithoutMatchInput, MatchParticipantUncheckedCreateWithoutMatchInput>
  }

  export type MatchParticipantUpdateWithWhereUniqueWithoutMatchInput = {
    where: MatchParticipantWhereUniqueInput
    data: XOR<MatchParticipantUpdateWithoutMatchInput, MatchParticipantUncheckedUpdateWithoutMatchInput>
  }

  export type MatchParticipantUpdateManyWithWhereWithoutMatchInput = {
    where: MatchParticipantScalarWhereInput
    data: XOR<MatchParticipantUpdateManyMutationInput, MatchParticipantUncheckedUpdateManyWithoutMatchInput>
  }

  export type MatchCreateWithoutPartsInput = {
    id?: string
    createdAt?: Date | string
    room?: RoomCreateNestedOneWithoutMatchesInput
    game: GameCreateNestedOneWithoutMatchesInput
  }

  export type MatchUncheckedCreateWithoutPartsInput = {
    id?: string
    roomCode?: string | null
    gameId: string
    createdAt?: Date | string
  }

  export type MatchCreateOrConnectWithoutPartsInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutPartsInput, MatchUncheckedCreateWithoutPartsInput>
  }

  export type UserCreateWithoutMatchPartsInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorCreateNestedManyWithoutUserInput
    timeline?: TimelineEventCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMatchPartsInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomUncheckedCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerUncheckedCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorUncheckedCreateNestedManyWithoutUserInput
    timeline?: TimelineEventUncheckedCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMatchPartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchPartsInput, UserUncheckedCreateWithoutMatchPartsInput>
  }

  export type MatchUpsertWithoutPartsInput = {
    update: XOR<MatchUpdateWithoutPartsInput, MatchUncheckedUpdateWithoutPartsInput>
    create: XOR<MatchCreateWithoutPartsInput, MatchUncheckedCreateWithoutPartsInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutPartsInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutPartsInput, MatchUncheckedUpdateWithoutPartsInput>
  }

  export type MatchUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneWithoutMatchesNestedInput
    game?: GameUpdateOneRequiredWithoutMatchesNestedInput
  }

  export type MatchUncheckedUpdateWithoutPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMatchPartsInput = {
    update: XOR<UserUpdateWithoutMatchPartsInput, UserUncheckedUpdateWithoutMatchPartsInput>
    create: XOR<UserCreateWithoutMatchPartsInput, UserUncheckedCreateWithoutMatchPartsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchPartsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchPartsInput, UserUncheckedUpdateWithoutMatchPartsInput>
  }

  export type UserUpdateWithoutMatchPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchPartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUncheckedUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUncheckedUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUncheckedUpdateManyWithoutUserNestedInput
    timeline?: TimelineEventUncheckedUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTimelineInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTimelineInput = {
    id?: string
    email: string
    displayName: string
    passwordHash: string
    createdAt?: Date | string
    permanentScore?: number
    creditPoints?: number
    roomsHosted?: RoomUncheckedCreateNestedManyWithoutHostInput
    roomPlayers?: RoomPlayerUncheckedCreateNestedManyWithoutUserInput
    sponsors?: UserSponsorUncheckedCreateNestedManyWithoutUserInput
    matchParts?: MatchParticipantUncheckedCreateNestedManyWithoutUserInput
    RoomStake?: RoomStakeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTimelineInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTimelineInput, UserUncheckedCreateWithoutTimelineInput>
  }

  export type RoomCreateWithoutTimelineEventInput = {
    code: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    game: GameCreateNestedOneWithoutRoomsInput
    host: UserCreateNestedOneWithoutRoomsHostedInput
    players?: RoomPlayerCreateNestedManyWithoutRoomInput
    matches?: MatchCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutTimelineEventInput = {
    code: string
    gameId: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
    players?: RoomPlayerUncheckedCreateNestedManyWithoutRoomInput
    matches?: MatchUncheckedCreateNestedManyWithoutRoomInput
    stakes?: RoomStakeUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutTimelineEventInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutTimelineEventInput, RoomUncheckedCreateWithoutTimelineEventInput>
  }

  export type GameCreateWithoutTimelineEventInput = {
    id: string
    name: string
    category: string
    rooms?: RoomCreateNestedManyWithoutGameInput
    matches?: MatchCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTimelineEventInput = {
    id: string
    name: string
    category: string
    rooms?: RoomUncheckedCreateNestedManyWithoutGameInput
    matches?: MatchUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTimelineEventInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTimelineEventInput, GameUncheckedCreateWithoutTimelineEventInput>
  }

  export type UserUpsertWithoutTimelineInput = {
    update: XOR<UserUpdateWithoutTimelineInput, UserUncheckedUpdateWithoutTimelineInput>
    create: XOR<UserCreateWithoutTimelineInput, UserUncheckedCreateWithoutTimelineInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTimelineInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTimelineInput, UserUncheckedUpdateWithoutTimelineInput>
  }

  export type UserUpdateWithoutTimelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTimelineInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permanentScore?: IntFieldUpdateOperationsInput | number
    creditPoints?: IntFieldUpdateOperationsInput | number
    roomsHosted?: RoomUncheckedUpdateManyWithoutHostNestedInput
    roomPlayers?: RoomPlayerUncheckedUpdateManyWithoutUserNestedInput
    sponsors?: UserSponsorUncheckedUpdateManyWithoutUserNestedInput
    matchParts?: MatchParticipantUncheckedUpdateManyWithoutUserNestedInput
    RoomStake?: RoomStakeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomUpsertWithoutTimelineEventInput = {
    update: XOR<RoomUpdateWithoutTimelineEventInput, RoomUncheckedUpdateWithoutTimelineEventInput>
    create: XOR<RoomCreateWithoutTimelineEventInput, RoomUncheckedCreateWithoutTimelineEventInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutTimelineEventInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutTimelineEventInput, RoomUncheckedUpdateWithoutTimelineEventInput>
  }

  export type RoomUpdateWithoutTimelineEventInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutRoomsNestedInput
    host?: UserUpdateOneRequiredWithoutRoomsHostedNestedInput
    players?: RoomPlayerUpdateManyWithoutRoomNestedInput
    matches?: MatchUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutTimelineEventInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput
    matches?: MatchUncheckedUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type GameUpsertWithoutTimelineEventInput = {
    update: XOR<GameUpdateWithoutTimelineEventInput, GameUncheckedUpdateWithoutTimelineEventInput>
    create: XOR<GameCreateWithoutTimelineEventInput, GameUncheckedCreateWithoutTimelineEventInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutTimelineEventInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutTimelineEventInput, GameUncheckedUpdateWithoutTimelineEventInput>
  }

  export type GameUpdateWithoutTimelineEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUpdateManyWithoutGameNestedInput
    matches?: MatchUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTimelineEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    rooms?: RoomUncheckedUpdateManyWithoutGameNestedInput
    matches?: MatchUncheckedUpdateManyWithoutGameNestedInput
  }

  export type RoomCreateManyGameInput = {
    code: string
    hostUserId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
  }

  export type MatchCreateManyGameInput = {
    id?: string
    roomCode?: string | null
    createdAt?: Date | string
  }

  export type TimelineEventCreateManyGameInput = {
    id?: string
    userId?: string | null
    roomCode?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RoomUpdateWithoutGameInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    host?: UserUpdateOneRequiredWithoutRoomsHostedNestedInput
    players?: RoomPlayerUpdateManyWithoutRoomNestedInput
    matches?: MatchUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutGameInput = {
    code?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput
    matches?: MatchUncheckedUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUncheckedUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutGameInput = {
    code?: StringFieldUpdateOperationsInput | string
    hostUserId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MatchUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneWithoutMatchesNestedInput
    parts?: MatchParticipantUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: MatchParticipantUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTimelineNestedInput
    room?: RoomUpdateOneWithoutTimelineEventNestedInput
  }

  export type TimelineEventUncheckedUpdateWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventUncheckedUpdateManyWithoutGameInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateManyHostInput = {
    code: string
    gameId: string
    status?: string
    createdAt?: Date | string
    targetWinPoints?: number | null
    allowZeroCredit?: boolean
    timerSec?: number | null
    startedAt?: Date | string | null
  }

  export type RoomPlayerCreateManyUserInput = {
    roomCode: string
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
  }

  export type UserSponsorCreateManyUserInput = {
    sponsorCode: string
    activatedAt?: Date | string
  }

  export type MatchParticipantCreateManyUserInput = {
    matchId: string
    outcome: $Enums.Outcome
  }

  export type TimelineEventCreateManyUserInput = {
    id?: string
    roomCode?: string | null
    gameId?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RoomStakeCreateManyUserInput = {
    roomCode: string
    amount: number
    reservedAt?: Date | string
  }

  export type RoomUpdateWithoutHostInput = {
    code?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutRoomsNestedInput
    players?: RoomPlayerUpdateManyWithoutRoomNestedInput
    matches?: MatchUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutHostInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    players?: RoomPlayerUncheckedUpdateManyWithoutRoomNestedInput
    matches?: MatchUncheckedUpdateManyWithoutRoomNestedInput
    stakes?: RoomStakeUncheckedUpdateManyWithoutRoomNestedInput
    TimelineEvent?: TimelineEventUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutHostInput = {
    code?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    targetWinPoints?: NullableIntFieldUpdateOperationsInput | number | null
    allowZeroCredit?: BoolFieldUpdateOperationsInput | boolean
    timerSec?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoomPlayerUpdateWithoutUserInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
    room?: RoomUpdateOneRequiredWithoutPlayersNestedInput
  }

  export type RoomPlayerUncheckedUpdateWithoutUserInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomPlayerUncheckedUpdateManyWithoutUserInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserSponsorUpdateWithoutUserInput = {
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sponsor?: SponsorUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserSponsorUncheckedUpdateWithoutUserInput = {
    sponsorCode?: StringFieldUpdateOperationsInput | string
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSponsorUncheckedUpdateManyWithoutUserInput = {
    sponsorCode?: StringFieldUpdateOperationsInput | string
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchParticipantUpdateWithoutUserInput = {
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
    match?: MatchUpdateOneRequiredWithoutPartsNestedInput
  }

  export type MatchParticipantUncheckedUpdateWithoutUserInput = {
    matchId?: StringFieldUpdateOperationsInput | string
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }

  export type MatchParticipantUncheckedUpdateManyWithoutUserInput = {
    matchId?: StringFieldUpdateOperationsInput | string
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }

  export type TimelineEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneWithoutTimelineEventNestedInput
    game?: GameUpdateOneWithoutTimelineEventNestedInput
  }

  export type TimelineEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roomCode?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStakeUpdateWithoutUserInput = {
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: RoomUpdateOneRequiredWithoutStakesNestedInput
  }

  export type RoomStakeUncheckedUpdateWithoutUserInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStakeUncheckedUpdateManyWithoutUserInput = {
    roomCode?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomPlayerCreateManyRoomInput = {
    userId: string
    joinedAt?: Date | string
    team?: $Enums.TeamSide | null
    isLeader?: boolean
  }

  export type MatchCreateManyRoomInput = {
    id?: string
    gameId: string
    createdAt?: Date | string
  }

  export type RoomStakeCreateManyRoomInput = {
    userId: string
    amount: number
    reservedAt?: Date | string
  }

  export type TimelineEventCreateManyRoomInput = {
    id?: string
    userId?: string | null
    gameId?: string | null
    kind: string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type RoomPlayerUpdateWithoutRoomInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRoomPlayersNestedInput
  }

  export type RoomPlayerUncheckedUpdateWithoutRoomInput = {
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RoomPlayerUncheckedUpdateManyWithoutRoomInput = {
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: NullableEnumTeamSideFieldUpdateOperationsInput | $Enums.TeamSide | null
    isLeader?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutMatchesNestedInput
    parts?: MatchParticipantUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parts?: MatchParticipantUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    gameId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStakeUpdateWithoutRoomInput = {
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRoomStakeNestedInput
  }

  export type RoomStakeUncheckedUpdateWithoutRoomInput = {
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomStakeUncheckedUpdateManyWithoutRoomInput = {
    userId?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    reservedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutTimelineNestedInput
    game?: GameUpdateOneWithoutTimelineEventNestedInput
  }

  export type TimelineEventUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TimelineEventUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    gameId?: NullableStringFieldUpdateOperationsInput | string | null
    kind?: StringFieldUpdateOperationsInput | string
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSponsorCreateManySponsorInput = {
    userId: string
    activatedAt?: Date | string
  }

  export type UserSponsorUpdateWithoutSponsorInput = {
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSponsorsNestedInput
  }

  export type UserSponsorUncheckedUpdateWithoutSponsorInput = {
    userId?: StringFieldUpdateOperationsInput | string
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSponsorUncheckedUpdateManyWithoutSponsorInput = {
    userId?: StringFieldUpdateOperationsInput | string
    activatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchParticipantCreateManyMatchInput = {
    userId: string
    outcome: $Enums.Outcome
  }

  export type MatchParticipantUpdateWithoutMatchInput = {
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
    user?: UserUpdateOneRequiredWithoutMatchPartsNestedInput
  }

  export type MatchParticipantUncheckedUpdateWithoutMatchInput = {
    userId?: StringFieldUpdateOperationsInput | string
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }

  export type MatchParticipantUncheckedUpdateManyWithoutMatchInput = {
    userId?: StringFieldUpdateOperationsInput | string
    outcome?: EnumOutcomeFieldUpdateOperationsInput | $Enums.Outcome
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}